      SUBROUTINE BDYINT(IMOV,NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,
     *      JRF,DELCOL,DELROW,THCK,
     *      IBOUND,NODESS,CNOLD,CBNDY,RHS,RHSO,NTFACE,VC,VR,VL,RF,
     *      POR,TIMV,VCMAX,VRMAX,VLMAX,IOUTS,DIAGST,LBNDY,NZIN,
     *      NFACES,NONU,SAV,XFOR,XBAC,
     *      YFOR,YBAC,CINFL,NCINFL,IABOVE,IBELOW,DECAY,IDIM,NRFLG,
     *      DAGE)
C
C********************************************************************
C
C   BDYINT DIRECTS BDYCON TO ACCUMULATE TO STORAGE INTEGRALS FOR 
C     TRANSPORT DOMAIN BOUNDARY:
C   - LEFT AND RIGHT DOMAIN FACES ARE TREATED, FROM FRONT TO BACK AND
C      FROM 2ND TO TOP OCTANT TO 2ND TO BOTTOM OCTANT OF DOMAIN
C   - FRONT AND BACK DOMAIN FACES ARE TREATED, FROM 2ND TO LEFT OCTANT 
C     TO NEXT TO RIGHT, AND FROM TOP TO BOTTOM OF DOMAIN 
C   - TOP AND BOTTOM DOMAIN FACES ARE TREATED, FROM 2ND TO BACK OCTANT
C     TO 2ND TO FRONT, AND FROM RIGHT TO LEFT
C   THEN DOMAIN CORNER OCTANTS ARE TREATED.
C   INACTIVE CELLS ARE IGNORED.
C
      DOUBLE PRECISION DECAY
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION DELCOL(NCOL),DELROW(NROW),THCK(NSCOL,NSROW,NSLAY),
     *          IBOUND(NCOL,NROW,NLAY)
C
C
C   X FACES
C
C   INCREMENT FROM LEFT FACE TO RIGHT FACE IS NSCOL.
C   INCREMENT FROM BACK FACE TO FRONT FACE IS NSCOL*NSROW -NSCOL.
C   IF DOMAIN ONLY HAS ONE LAYER, THEN FRONT, BACK, TOP AND BOTTOM
C     CONSTITUTE ENTIRE BOUNDARY.
C   NODI1 AND NODI2 ARE TRANSPORT NODE NUMBERS FOR CELLS ON LEFT AND 
C     RIGHT FACES, RESPECTIVELY, FOR USE BY BDYCON.
C
      NSCR  = NSCOL*NSROW
      IDELX = NSCOL
      IDELY = NSCR - NSCOL
      IF (NSLAY.EQ.1) GOTO 1000
      NODI1 = 1
      NODI2 = NSCOL  
C
C   N1 AND N2 ARE USED TO SELECT OCTANTS FOR INTEGRATION VIA NOCT TABLE
C      IN BDYCON
C   STARTING WITH N1=3, N2=4, MEANS TOP OCTANTS OF LEFT AND RIGHT FACES
C      AREN'T INTEGRATED YET
C
      K     = ISLAY1 - 1
      N1    = 3
      N2    = 4
      DO KS = 1,NSLAY
         K  = K + 1
      I  = ISROW1 - 1
C
C   DON'T INTEGRATE BOTTOM OCTANTS ON LEFT AND RIGHT YET
      IF (KS.EQ.NSLAY) N2=2
C
         DO IS = 1,NSROW
         I  = I + 1
         IF (IBOUND(ISCOL1,I,K).EQ.0) GOTO 100
C
C   DO LHS AND RHS CONCENTRATION INTEGRATION FOR BOUNDARY OCTANTS ON
C   NFAC = 1
C   INTERIOR TRANSP NODE NUMBER NODI1
C   TRANSPORT COORDS (1,IS,KS)
C   FLOW COORDS      (ISCOL1,I,K)
C
            CALL BDYCON(IMOV,N1,N2,1,1,IS,KS,NODI1,NODESS,
     *        ISCOL1,I,K,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
100         CONTINUE
            IF (IBOUND(ISCOL2,I,K).EQ.0) GOTO 200
C
C   DO LHS AND RHS CONCENTRATION INTEGRATION FOR BOUNDARY OCTANTS ON
C   NFAC = 2
C   INTERIOR TRANSPORT NODE NUMBER NODI2
C   TRANSPORT COORDS (NSCOL,IS,KS)
C   FLOW COORDS      (ISCOL2,I,K)
C
            CALL BDYCON(IMOV,N1,N2,2,NSCOL,IS,KS,NODI2,NODESS,
     *        ISCOL2,I,K,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
200         CONTINUE
         NODI1 = NODI1 + IDELX
         NODI2 = NODI2 + IDELX
      ENDDO
      N1   = 1
      ENDDO
C
C   Y FACES
C
1000  CONTINUE
      IF (NSCOL.EQ.1) GOTO 2000
      NODI1 = 1
      NODI2 = IDELY + 1
      K     = ISLAY1 - 1
      DO KS = 1,NSLAY
         K  = K + 1
         J  = ISCOL1 - 1
      N1 = 3
      N2 = 4
         DO JS = 1,NSCOL
            J  = J + 1
         IF (JS.EQ.NSCOL) THEN
            N1 = 1
            N2 = 2
         ENDIF
            IF (IBOUND(J,ISROW1,K).EQ.0) GOTO 105
C
C   DO LHS AND RHS CONCENTRATION INTEGRATION FOR BOUNDARY OCTANTS ON
C   NFAC = 3
C   INTERIOR TRANSP NODE NUMBER NODI1
C   TRANSPORT COORDS (JS,1,KS)
C   FLOW COORDS      (J,ISROW1,K)
C
            CALL BDYCON(IMOV,N1,N2,3,JS,1,KS,NODI1,NODESS,
     *        J,ISROW1,K,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
105         CONTINUE
            IF (IBOUND(J,ISROW2,K).EQ.0) GOTO 205
C
C   DO LHS AND RHS CONCENTRATION INTEGRATION FOR BOUNDARY OCTANTS ON
C   NFAC = 4
C   INTERIOR TRANSP NODE NUMBER NODI2
C   TRANSPORT COORDS (JS,NSROW,KS)
C   FLOW COORDS      (J,ISROW2,K)
C
            CALL BDYCON(IMOV,N1,N2,4,JS,NSROW,KS,NODI2,NODESS,
     *        J,ISROW2,K,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
205         CONTINUE
         NODI1 = NODI1 + 1
            NODI2 = NODI2 + 1
         N1    = 1
      ENDDO
         NODI1 = NODI1 + IDELY
         NODI2 = NODI2 + IDELY
      ENDDO
C
C   Z FACES
C
2000  CONTINUE
      IF (NSROW.EQ.1) GOTO 3000
      NODI1 = 1
      NODI2 = NSCR*(NSLAY-1) + 1
      I     = ISROW1 - 1
      N1    = 3
      N2    = 4
      DO IS = 1,NSROW
         I  = I + 1
         J  = ISCOL1 - 1
      IF (IS.EQ.NSROW) THEN
         N2 = 2
      ENDIF
         DO JS = 1,NSCOL
            J  =J + 1
            IF (IBOUND(J,I,ISLAY1).EQ.0) GOTO 110
C
C   DO LHS AND RHS CONCENTRATION INTEGRATION FOR BOUNDARY OCTANTS ON
C   NFAC = 5
C   INTERIOR TRANSP NODE NUMBER NODI1
C   TRANSPORT COORDS (JS,IS,1)
C   FLOW COORDS      (J,I,ISLAY1)
C
            CALL BDYCON(IMOV,N1,N2,5,JS,IS,1,NODI1,NODESS,
     *        J,I,ISLAY1,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
110         CONTINUE
            IF (IBOUND(J,I,ISLAY2).EQ.0) GOTO 210
C
C   DO LHS AND RHS CONCENTRATION INTEGRATION FOR BOUNDARY OCTANTS ON
C   NFAC = 6
C   INTERIOR TRANSP NODE NUMBER NODI2
C   TRANSPORT COORDS (JS,IS,NSLAY)
C   FLOW COORDS      (J,I,ISLAY2)
C
            CALL BDYCON(IMOV,N1,N2,6,JS,IS,NSLAY,NODI2,NODESS,
     *        J,I,ISLAY2,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
210         CONTINUE
            NODI1 = NODI1 + 1
            NODI2 = NODI2 + 1
         ENDDO
      N1   = 1
      ENDDO
C
C   CORNERS
C
3000  CONTINUE
C   CORNER OF (JS,IS,KS)=(1,1,1)
      IF (IBOUND(ISCOL1,ISROW1,ISLAY1).EQ.0) GOTO 220
      CALL BDYCON(IMOV,1,1,1,1,1,1,1,NODESS,
     *        ISCOL1,ISROW1,ISLAY1,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
C   CORNER OF (JS,IS,KS)=(NSCOL,1,1)
220   IF (IBOUND(ISCOL2,ISROW1,ISLAY1).EQ.0) GOTO 230
            CALL BDYCON(IMOV,1,1,2,NSCOL,1,1,NSCOL,NODESS,
     *        ISCOL2,ISROW1,ISLAY1,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
C   CORNER OF (JS,IS,KS)=(1,NSROW,1)
230   IF (IBOUND(ISCOL1,ISROW2,ISLAY1).EQ.0) GOTO 240
      NODI2 = IDELY + 1
            CALL BDYCON(IMOV,2,2,1,1,NSROW,1,NODI2,NODESS,
     *        ISCOL1,ISROW2,ISLAY1,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
C   CORNER OF (JS,IS,KS)=(NSCOL,NSROW,1)
240   IF (IBOUND(ISCOL2,ISROW2,ISLAY1).EQ.0) GOTO 250
      NODI2 = NSCR
            CALL BDYCON(IMOV,2,2,2,NSCOL,NSROW,1,NODI2,NODESS,
     *        ISCOL2,ISROW2,ISLAY1,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
C   CORNER OF (JS,IS,KS)=(1,1,NSLAY)
250   IF (IBOUND(ISCOL1,ISROW1,ISLAY2).EQ.0) GOTO 260
      NODI2 = NSCR* (NSLAY - 1) + 1
            CALL BDYCON(IMOV,3,3,1,1,1,NSLAY,NODI2,NODESS,
     *        ISCOL1,ISROW1,ISLAY2,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
C   CORNER OF (JS,IS,KS)=(NSCOL,1,NSLAY)
260   IF (IBOUND(ISCOL2,ISROW1,ISLAY2).EQ.0) GOTO 270
      NODI2 = NSCR* (NSLAY - 1) + NSCOL
            CALL BDYCON(IMOV,3,3,2,NSCOL,1,NSLAY,NODI2,NODESS,
     *        ISCOL2,ISROW1,ISLAY2,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
C   CORNER OF (JS,IS,KS)=(1,NSROW,NSLAY)
270   IF (IBOUND(ISCOL1,ISROW2,ISLAY2).EQ.0) GOTO 280
      NODI2 = NSCR* (NSLAY - 1) + IDELY + 1
            CALL BDYCON(IMOV,4,4,1,1,NSROW,NSLAY,NODI2,NODESS,
     *        ISCOL1,ISROW2,ISLAY2,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
C   CORNER OF (JS,IS,KS)=(NSCOL,NSROW,NSLAY)
280   IF (IBOUND(ISCOL2,ISROW2,ISLAY2).EQ.0) GOTO 290
      NODI2 = NSCR*NSLAY
            CALL BDYCON(IMOV,4,4,2,NSCOL,NSROW,NSLAY,NODI2,NODESS,
     *        ISCOL2,ISROW2,ISLAY2,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
290   CONTINUE
      RETURN
      END
C         
C***********************************************************************   
C
C     BDYC0N   BUILD LHS AND RHS CONCENTRATION INTEGRALS 
C***********************************************************************
C
      SUBROUTINE BDYCON(IMOV,N1,N2,NFAC,JS,IS,KS,NODE,NODESS,
     *        J,I,K,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY,JRF,
     *        CNOLD,CBNDY,RHS,RHSO,
     *        NTFACE,NFACES,NONU,SAV,
     *        VC,VR,VL,RF,THCK,POR,TIMV,
     *        VCMAX,VRMAX,VLMAX,IOUTS,
     *        DIAGST,LBNDY,NZIN,
     *        XFOR,XBAC,YFOR,YBAC,
     *        CINFL,NCINFL,IABOVE,IBELOW,DELCOL,DELROW,DECAY,IDIM,
     *        NRFLG,DAGE)
C
C*****************************************************************
C
C  BDYCON USES N1, N2 PARAMETERS TO SELECT OCTANTS OF CELL NUMBER,
C   NODE, FOR INTEGRATION.
C  FOR EACH OCTANT INTEGRATED, BDYCON CALLS:
C     BUILDNEI  TO FIND NEIGHBOR CELLS TO OCTANT; 
C               THEIR ACTIVE AND BOUNDARY STATUS
C     BDYCR     TO ACCUMULATE CONTRIBUTION TO RHS FROM OLD TIME
C            LEVEL INTEGRATION FROM INTEGRATION POINTS IN OCTANT
C  IF FIRST TRANSPORT TIME STEP (IMOV=1),
C     BDYCL     TO ACCUMULATE CONTRIBUTION TO DIAGST AND RHS FROM
C            NEW TIME LEVEL INTEGRATION FROM CURRENT NODE AND
C            OCTANT NEIGHBORS.
C
      DOUBLE PRECISION DECAY
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION IBOUND(NCOL,NROW,NLAY),THCK(NSCOL,NSROW,NSLAY)
      DIMENSION DELCOL(NCOL),DELROW(NROW),XFOR(NSCOL),
     *     XBAC(NSCOL),YFOR(NSROW),YBAC(NSROW),NOCT(4,6)
C
C  NOCT COLUMN INDEX IS NFAC; COLUMNS CONTAIN OCTANT NUMBERS FOR 
C   BOUNDARY OCTANTS ON LEFT, RIGHT, BACK, FRONT, TOP AND BOTTOM
C   FACES RESPECTIVELY
C  OCTANT NUMBERS ARE ARRANGED SO THAT BDYINT CAN DIRECT INTEGRATION
C   OVER ENTIRE BOUNDARY, WITHOUT DUPLICATION, USING PARAMETRES N1, N2
C
      DATA NOCT/1,     3,     2,     4,
     *          5,     7,     6,     8,
     *          1,     2,     5,     6,
     *          3,     4,     7,     8,
     *          1,     5,     3,     7,
     *          2,     6,     4,     8/
C
C  FIND VOLUME OF SUBCELL FOR INTEGRATION
C  FOR RHS, OLD TIME LEVEL, INTEGRATION IS OVER ENTIRE BOUNDARY OCTANT
C  FOR LHS, NEW TIME LEVEL, INTEGRATION IS OVER BOUNDARY LAYER ONLY
C      
      VOLN=CINV*DELCOL(J)*RINV*DELROW(I)*BINV*THCK(JS,IS,KS)
      VOLN1=DELCOL(J)*DELROW(I)*THCK(JS,IS,KS)/2**6
C
C  INTEGRATE OVER OCTANTS OF CELL 
C
      DO 950 N=N1,N2
      NOCTANT = NOCT(N,NFAC)
      CALL BUILDNEI(NOCTANT,JS,IS,KS,NODE,NODESS,
     *        J,I,K,IBOUND,NCOL,NROW,NLAY,
     *        NSCOL,NSROW,NSLAY)
C
C   DETERMINE COL, ROW, THICKNESS RATIOS 
C
      GOTO (100,200,300,400,500,600,700,800), NOCTANT
100   XRAT=XBAC(JS)
      YRAT=YBAC(IS)
      TH1=TH(0,0,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH2=TH(-1,0,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH3=TH(-1,-1,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH4=TH(0,-1,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      GOTO 25
C
200   XRAT=XBAC(JS)
      YRAT=YBAC(IS)
      TH1=TH(0,0,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH2=TH(-1,0,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH3=TH(-1,-1,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH4=TH(0,-1,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      GOTO 25
C
300   XRAT=XBAC(JS)
      YRAT=YFOR(IS)
      TH1=TH(0,0,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH2=TH(-1,0,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH3=TH(-1,1,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH4=TH(0,1,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      GOTO 25
C
400   XRAT=XBAC(JS)
      YRAT=YFOR(IS)
      TH1=TH(0,0,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH2=TH(-1,0,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH3=TH(-1,1,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH4=TH(0,1,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      GOTO 25
C
500   XRAT=XFOR(JS)
      YRAT=YBAC(IS)
      TH1=TH(0,0,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH2=TH(1,0,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH3=TH(1,-1,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH4=TH(0,-1,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      GOTO 25
C
600   XRAT=XFOR(JS)
      YRAT=YBAC(IS)
      TH1=TH(0,0,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH2=TH(1,0,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH3=TH(1,-1,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH4=TH(0,-1,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      GOTO 25
C
700   XRAT=XFOR(JS)
      YRAT=YFOR(IS)
      TH1=TH(0,0,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH2=TH(1,0,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH3=TH(1,1,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH4=TH(0,1,-1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      GOTO 25
C
800   XRAT=XFOR(JS)
      YRAT=YFOR(IS)
      TH1=TH(0,0,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH2=TH(1,0,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH3=TH(1,1,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      TH4=TH(0,1,1,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
C
C   INTEGRATE CONCENTRATION OVER THIS OCTANT AT OLD TIME LEVEL
C
25    CONTINUE
      IF (NRFLG.EQ.0) CALL BDYCR(IBOUND,CNOLD,CBNDY,RHS,RHSO,
     *             LBNDY,NZIN,NODE,
     *             J,I,K,NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *             VC,VR,VL,RF,THCK,POR,TIMV,
     *             VCMAX,VRMAX,VLMAX,IOUTS,NCOL,NROW,NLAY,VOLN,
     *             NOCTANT,DELCOL,DELROW,XRAT,YRAT,TH1,TH2,
     *             TH3,TH4,XFOR,
     *             XBAC,YFOR,YBAC,DECAY,imov,IDIM,DAGE)
C
C   IF FIRST TRANSPORT TIMESTEP,
C   INTEGRATE CONCENTRATION OVER THIS OCTANT AT NEW TIME LEVEL
C
      IF (IMOV.EQ.1)
     *    CALL BDYCL(IMOV,RHS,RHSO,THCK,DIAGST,
     *            LBNDY,JS,IS,KS,
     *            J,I,K,NODE,NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *            NFACES,JRF,RF,VOLN1,
     *            NOCTANT,NONU,SAV,POR,CBNDY,
     *            CINFL,NCINFL,IABOVE,IBELOW,XRAT,YRAT,
     *            TH1,TH2,TH3,TH4,IDIM)
C
950   CONTINUE
C
      RETURN
      END
C
C***********************************************************************
C
      FUNCTION TH(NX,NY,NZ,JS,IS,KS,THCK,NSCOL,NSROW,NSLAY)
      DIMENSION THCK(NSCOL,NSROW,NSLAY)
C***********************************************************************
C
C  FIND RATIO OF THICKNESS OF CELL (JS+NX,IS+NY,KS) TO
C   TO SUM OF THICKNESSES OF CELLS 
C                       (JS+NX,IS+NY,KS) AND (JS+NX,IS+NY,KS+NZ).
C  FOR USE IN INTERPOLATION OF CONCENTRATION AT OLD TIME LEVEL
C  AND CALCULATION OF STORAGE COEFFICIENTS (INTEGRATION WEIGHTS) AT 
C  NEW TIME LEVEL
C
      NJ=JS+NX
      NI=IS+NY
      NK=KS+NZ
      IF (NJ.EQ.0 .OR. NJ.GT.NSCOL) NJ=JS
      IF (NI.EQ.0 .OR. NI.GT.NSROW) NI=IS
      IF (NK.EQ.0 .OR. NK.GT.NSLAY) NK=KS
C
C   IF CELL IS INACTIVE, THICKNESS HAS BEEN SET TO ZERO.
C   APPROX LAYER RATIO BY 0.5 FOR USE IN DETERMINING
C   INTEGRATION/INTERPOLATION WGHTS IN NEIGHBORING ACTIVE CELLS
C
        IF (THCK(NJ,NI,KS).EQ.0D0) THEN
          TH=0.5D0
        ELSE
           IF (THCK(NJ,NI,NK).EQ.0D0) THEN
              TH=0.5D0
           ELSE
C
C   FIND RATIO, IF BOTH CELLS ARE ACTIVE
C
               TH=THCK(NJ,NI,KS)/
     *           (THCK(NJ,NI,KS)+THCK(NJ,NI,NK))
           ENDIF
        ENDIF
        END
C
C**********************************************************************
C
C     BDYCR BUILD RHS CONCENTRATION INTEGRAL FOR BOUNDARY 
C**********************************************************************
C
      SUBROUTINE BDYCR(IBOUND,CNOLD,CBNDY,RHS,RHSO,
     *                 LBNDY,NZIN,NODE,
     *                 J,I,K,NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *                 VC,VR,VL,RF,THCK,POR,TIMV,
     *                 VCMAX,VRMAX,VLMAX,IOUTS,NCOL,NROW,NLAY,VOLN,
     *                 NOCTANT,DELCOL,DELROW,XRAT,YRAT,TH1,TH2,
     *                 TH3,TH4,XFOR,XBAC,YFOR,YBAC,DECAY,imov,IDIM,DAGE)
C
C**********************************************************************
C
C  IF CELL HOLDS MASS AT OLD TIME LEVEL,
C  BDYCR 
C  - DETERMINES POSITIONS OF INTEGRATION POINTS AT CENTERS OF
C  SUBCELLS OF DIMENSION 1/NSC X 1/NSR X 1/NSL IN BOUNDARY OCTANT 
C  - INTERPOLATES CONCENTRATION AT INTEGRATION POINT AT OLD TIME 
C  LEVEL, USING BINTERP
C  - TRACKS MOVEMENT UNDER ADVECTION OF INTEGRATION POINT OVER TIME
C  STEP, USING MOVE
C  - DISTRIBUTES MASS ASSOCIATED WITH INTEGRATION POINT AMONG CELLS
C  OR BOUNDARY FACES AT NEW TIME LEVEL, USING EVALTF OR BNDYTF
C  - ACCUMULATES MASS INTO RHS OF INTERIOR EQUATIONS OR BOUNDARY
C  EQUATIONS, DEPENDING ON DESTINATION OF TRACKED INTEGRATION POINT
C  AND TEST FUNCTION EVALUATION
C**********************************************************************
      DIMENSION IBOUND(NCOL,NROW,NLAY),NZIN(NODESS),
     *          RHS(NODESS),RHSO(NTFACE),CNOLD(NODESS)
      DIMENSION TFVAL(8),NUMTF(8),NSCOORD(3,8),POR(NODESS)
      DIMENSION CVERT(8),X(8,8),Y(8,8),Z(8,8),START(3,8)
      DOUBLE PRECISION DECAY
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C
C  X, Y AND Z ARRAYS SPECIFY X, Y AND Z COORDINATES, RESPECTIVELY,
C  OF REFERENCE CELL OCTANT CORNERS IN DIRECTION OF NEIGHBOR.
C  ROW INDEX IS NEIGHBOR NUMBER
C  COL INDEX IS CELL OCTANT, NOCTANT
C  
      DATA X/0.,-.5,-.5,0.,0.,-.5,-.5,0.,
     *       0.,-.5,-.5,0.,0.,-.5,-.5,0.,
     *       0.,-.5,-.5,0.,0.,-.5,-.5,0.,
     *       0.,-.5,-.5,0.,0.,-.5,-.5,0.,
     *       0., .5, .5,0.,0., .5, .5,0.,
     *       0., .5, .5,0.,0., .5, .5,0.,
     *       0., .5, .5,0.,0., .5, .5,0.,
     *       0., .5, .5,0.,0., .5, .5,0./
      DATA Y/0.,0.,-.5,-.5,0.,0.,-.5,-.5,
     *       0.,0.,-.5,-.5,0.,0.,-.5,-.5,
     *       0.,0., .5, .5,0.,0., .5, .5,
     *       0.,0., .5, .5,0.,0., .5, .5,
     *       0.,0.,-.5,-.5,0.,0.,-.5,-.5,
     *       0.,0.,-.5,-.5,0.,0.,-.5,-.5,
     *       0.,0., .5, .5,0.,0., .5, .5,
     *       0.,0., .5, .5,0.,0., .5, .5/
      DATA Z/0.,0.,0.,0.,-.5,-.5,-.5,-.5,
     *       0.,0.,0.,0., .5, .5, .5, .5,
     *       0.,0.,0.,0.,-.5,-.5,-.5,-.5,
     *       0.,0.,0.,0., .5, .5, .5, .5,
     *       0.,0.,0.,0.,-.5,-.5,-.5,-.5,
     *       0.,0.,0.,0., .5, .5, .5, .5,
     *       0.,0.,0.,0.,-.5,-.5,-.5,-.5,
     *       0.,0.,0.,0., .5, .5, .5, .5/
C
C   START ARRAY GIVES X, Y AND Z REFERENCE COORDINATES FOR EACH 
C   OCTANT USED TO CALCULATE LOCATION IN REFERNECE CELL OF 
C   INTEGRATION POINTS.
C
      DATA START/     -0.5D0,     -0.5D0,     -0.5D0,
     *               -0.5D0,     -0.5D0,        0D0,
     *               -0.5D0,        0D0,     -0.5D0,
     *               -0.5D0,    0D0,    0D0,
     *                  0D0,     -0.5D0,     -0.5D0,
     *                  0D0,     -0.5D0,        0D0,
     *                  0D0,        0D0,     -0.5D0,
     *                  0D0,        0D0,        0D0/
C
C  IF CELL ALTOGETHER HAS (NUMERICALLY) ZERO MASS,
C  THEN DON'T ACCUMULATE ITS POSITIVE AND NEGATIVE MASS CONTRIBUTIONS.
C  NUMERICAL ZERO IS SCALED TO MAX OF RHS, AND DETERIMINED IN ELSOLV.
C  NZIN HOLDS INDICATORS SAYING WHICH CELLS HOLD MASS, SET IN SMOC5A.
C 
cea IF (NZIN(NODE).EQ.0 .AND. IMOV.NE.1) RETURN
C
      POROS=POR(NODE)
      FACT=EXP(-TIMV*DECAY)
C
C  SET DEFAULT FOR BINTERP TO INDICATE INTERPOLATION BETWEEN NODES 
C  OF SUBGRID
      ININD=1
C
C  IF ANY NEIGHBORS ARE INACTIVE,
C       INTERPOLATE TO FIND CONC AT OCTANT CORNERS THEN
C       INTERPOLATE OVER OCTANT ONLY FOR CONC AT INTEGRATION POINTS
C  OTHERWISE, INTERPOLATE BETWEEN NODES OF GRID
C
      IF (NEIGHB(2,2)*NEIGHB(3,2)*NEIGHB(4,2)*NEIGHB(5,2)*
     *    NEIGHB(6,2)*NEIGHB(7,2)*NEIGHB(8,2).EQ.0) THEN
C
C  (INTERPOLATION OVER OCTANT ONLY NOT NEEDED FOR SUBGRID EDGES)
C
         IF ((NEIGHB(2,2)*NEIGHB(4,2)*NEIGHB(5,2).EQ.0).OR.
     *    ((NEIGHB(3,2).EQ.0).AND.(NEIGHB(3,1).NE.-1)).OR.
     *    ((NEIGHB(6,2).EQ.0).AND.(NEIGHB(6,1).NE.-1)).OR.
     *    ((NEIGHB(7,2).EQ.0).AND.(NEIGHB(7,1).NE.-1)).OR.
     *    ((NEIGHB(8,2).EQ.0).AND.(NEIGHB(8,1).NE.-1))) THEN
C
C  GET CONC AT OCTANT CORNERS
            DO 2100 N=2,8
            XHAT=X(N,NOCTANT)*2*XRAT
            YHAT=Y(N,NOCTANT)*2*YRAT
            ZHAT=Z(N,NOCTANT)*2
            CALL BINTERP(NOCTANT,NODESS,NTFACE,LBNDY,
     *           XHAT,YHAT,ZHAT,CNOLD,CBNDY,CVAL,NSCOL,NSROW,NSLAY,
     *           CVERT,ININD,TH1,TH2,TH3,TH4,IDIM,XHAT,YHAT,ZHAT)
C
            CVERT(N)=CVAL
2100        CONTINUE
C
            CVERT(1)=CNOLD(NEIGHB(1,1))
C  SET SLOPE FOR INTERPOLATION OVER OCTANT ONLY
            NSLOPE(1)=2
            NSLOPE(2)=2
            NSLOPE(3)=2
C  TELL BINTERP TO USE CVERT FOR CONC VALUES
            ININD=2
         ENDIF
      ENDIF
C
C
C   DETERMINE INTEGRATION POINTS, FOR OCTANT OF CELL.
C   START WITH MINIMUM VALUES OF XHAT, YHAT AND ZHAT FOR EACH OCTANT,
C   AND DETERMINE INTEGRATION POINTS AT CENTERS OF EACH 
C   1/NSC X 1/NSR X 1/NSL SUBCELL
C
C   INTERPOLATION ON NONUNIFORM GRID IS ACCOMPLISHED BY SCALING 
C   COORDINATES OF INTEGRATION POINTS IN REFERENCE GRID.
C
C   HBINV=0.5*BINV=1/(2*NSL)
C   HRINV=0.5*RINV=1/(2*NSR)
C   HCINV=0.5*CINV=1/(2*NSC)    
C  
      XRAT2=2*XRAT
      YRAT2=2*YRAT
C
      ZHAT=START(3,NOCTANT)-HBINV
      DO 900 NL=1,NSLH
C      
      ZHAT=ZHAT+BINV
      PL=K+ZHAT
      ZZ=2*ZHAT
C
      YHAT=START(2,NOCTANT)-HRINV
      DO 900 NR=1,NSRH
C      
      YHAT=YHAT+RINV
      PR=I+YHAT
      YY=YHAT*YRAT2
C
      XHAT=START(1,NOCTANT)-HCINV
      DO 900 NC=1,NSCH
C      
      XHAT=XHAT+CINV
      PC=J+XHAT
      XX=XHAT*XRAT2
C
C   FIND CONCENTRATION AT INTEGRATION POINT (XX,YY,ZZ) USING TRILINEAR
C   INTERPOLATION
C
      CALL BINTERP(NOCTANT,NODESS,NTFACE,LBNDY,
     *       XHAT,YHAT,ZHAT,CNOLD,CBNDY,CVAL,NSCOL,NSROW,NSLAY,
     *       CVERT,ININD,TH1,TH2,TH3,TH4,IDIM,XX,YY,ZZ)
C                     
C
C   DON'T TRACK POINT ASSOCIATED WITH ZERO MASS
C
cea IF (CVAL.EQ.0.D0) GOTO 900
C        if (abs(cval).lt.azero) goto900
C      
C   FORWARD TRACK INTEGRATION POINT TO NEW TIME LEVEL
C
      PCMV=PC
      PRMV=PR
      PLMV=PL
C
      CALL ELMOVE(PCMV,PRMV,PLMV,VC,VR,VL,RF,
     *       THCK,POR,IBOUND,
     *       NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *       IOUTS,TIMV,TSTEP2,VCMAX,VRMAX,VLMAX,
     *       JSMV,ISMV,KSMV,JMV,IMV,KMV,NLOC,DELCOL,DELROW)
C
C   EVALUATE ALL NONZERO TEST FUNCTIONS AT FORWARD TRACKED POINT
C   AT NEW TIME LEVEL.
C
C   NLOC=0 INDICATES INTEGRATION POINT IS TRACKED TO WITHIN TRANSPORT
C   DOMAIN.
C   NLOC=1 INDICATES INTEGRATION POINT LEAVES OUTFLOW BOUNDARY 
C   DURING TIME STEP.
C
c      noda=(KSmv-1)*NSCOL*NSROW + (ISmv-1)*NSCOL + JSmv
C
      IF (NLOC.EQ.0) THEN
            CALL EVALTF(PCMV,PRMV,PLMV,TFVAL,IBOUND,
     *           NUMTF,JSMV,ISMV,KSMV,JMV,IMV,KMV,NCOL,NROW,NLAY,
     *           NSCOL,NSROW,NSLAY,NNZER,NSCOORD,THCK,
     *           XFOR,XBAC,YFOR,YBAC)
      ELSE
            CALL BNDYTF(PCMV,PRMV,PLMV,TFVAL,IBOUND,
     *           NUMTF,JSMV,ISMV,KSMV,JMV,IMV,KMV,NCOL,NROW,NLAY,
     *           NSCOL,NSROW,NSLAY,NODESS,NNZER,LBNDY,NTFACE,THCK,
     *           XFOR,XBAC,YFOR,YBAC)
      ENDIF
C
c      if (imov.gt.1) then
c      nnzer=1
c      tfval(1)=1d0
c      numtf(1)=noda
c      endif
C
C   (DECAYED) MASS ACCUMULATED TO INTERIOR EQUATION OR OUTFLOW, DEPENDING ON
C   TEST FUNCTION EVALUATION.
C   IF AGE RUN, WATER IS AGED OVER COMPLETED TIMESTEP
C     ADD ZERO-ORDER GROWTH TERM FOR AGE
C     DAGE IS ZERO IF NOT AGE RUN
C
cea      PROD=CVAL*VOLN
      TMASS=(FACT*CVAL + DAGE)*VOLN*POROS
C
      DO 600 N=1,NNZER
      IF (NUMTF(N).LE.NODESS) THEN
      RHS(NUMTF(N))=RHS(NUMTF(N))+
cea     *                 FACT*TFVAL(N)*PROD*POROS/POR(NUMTF(N))
     *                 TFVAL(N)*TMASS/POR(NUMTF(N)) 
      ELSE
         RHSO(NUMTF(N)-NODESS)=RHSO(NUMTF(N)-NODESS)
cea     *                           +FACT*TFVAL(N)*PROD*POROS
     *                           +TFVAL(N)*TMASS
      ENDIF
600   CONTINUE     
900   CONTINUE
C
      RETURN
      END
C
C**********************************************************************
C
C   BDYCL  INTEGRATE CONCENTRATION OVER OCTANT AT NEW TIME LEVEL
C**********************************************************************
      SUBROUTINE BDYCL(IMOV,RHS,RHSO,THCK,DIAGST,
     *      LBNDY,JS,IS,KS,
     *      J,I,K,NODE,NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *      NFACES,JRF,RF,VOLN1,
     *      NOCTANT,NONU,SAV,POR,CBNDY,
     *      CINFL,NCINFL,IABOVE,IBELOW,XRAT,YRAT,TH1,TH2,TH3,TH4,IDIM)
C**********************************************************************
C
C   USE TRAPEZOIDAL INTEGRATION RULE FOR INTEGRATION OF CONCENTRATION
C   OVER OCTANT=NOCTANT OF CELL=NODE=(JS,IS,KS)=(J,I,K):
C
C   0.125(0.5 CDEL * 0.5 RDEL * 0.5 THCK)(SUM OF CONC AT OCTANT CORNERS)
C
C   TO FIND WEIGHTS FOR CURRENT AND NEIGHBORING NODES.
C
C   CONCENTRATION AT OCTANT CORNERS IS VALUE INTERPOLATED FROM NODAL
C   CONCENTRATIONS USING TRILINEAR INTERPOLATION.  THUS COEFFICIENTS
C   OF NODAL CONCENTRATIONS USED TO INTERPOLATE ARE INTEGRATION WEIGHTS
C   FOR LHS STORAGE MATRIX OF 27 DIAGONALS.
C
C   WEIGHT IS ADDED TO:     DIAGST    IF WEIGHTED NODE IS INTERIOR TO SUBGRID
C               DIAGST    IF WGHTED NODE IS NOFLOW BOUNDARY NODE
C               SAV       IF WGHTED NODE IS INFLOW OR OUTFLOW BDY
C
C   WHEN OUTFLOW BOUNDARY SYSTEM IS SOLVED, SAV*OUTFLOW CONC 
C   OR SAV*INFLOW CONC,
C   WILL BE ACCUMULATED TO RHS OF EQUATION NUMBER NODE.
C
C   DIAGST IS 27 DIAGONAL MATRIX OF STORAGE COEFFICIENTS.  ONLY 
C   DIAGONALS ARE STORED. MATRIX IS 27 X NODESS.  MAIN DIAGONAL IS 14.
C   FIRST 9 DIAGS:  PREV LAYER
C   MIDDLE 9 DIAGS: CURRENT LAYER
C   LAST 9 DIAGS:   NEXT LAYER
C   WITHIN EACH LAYER,
C   FIRST 3 DIAGS:  PREV ROW
C   MIDDLE 3 DIAGS: CURRENT ROW
C   LAST 3 DIAGS:   NEXT ROW
C   WITHIN THAT; PREV, CURRENT AND NEXT COL
C     
C   ROW INDEX = DIAG NUMBER: 1 PREV LAY, PREV ROW, PREV COL
C                    2 PREV LAY, PREV ROW, THIS COL
C                            3 PREV LAY, PREV ROW, NEXT COL
C                            4 PREV LAY, THIS ROW, PREV COL...
C   COL INDEX = INTERIOR EQUATION NUMBER
C
C   BDYCL BUILDS NUMC, TABLE OF ACTIVE NEIGHBORING NODE NUMBERS
C               CWGHT, TABLE OF WEIGHTS FOR RESPECTIVE NODES.
C   INTEGRATION WEIGHT IS CWGHT*VOLN1, WHERE SUBCELL VOLUME, VOLN1 IS 
C   PASSED FROM BDYCON.
C   IF WEIGHTED NODE IS INTERIOR NODE OR NOFLOW BOUNDARY NODE,
C     BDYCL ADDS INTEGRATION WEIGHT INTO DIAGST.
C   IF WEIGHTED NODE IS INFLOW OR OUTFLOW BOUNDARY NODE,
C     BDYCL SAVES THE EQUATION NUMBER (NODE), THE BOUNDARY NODE NUMBER,
C     AND THE INTEGRATION WEIGHT, IN NONU AND SAV ARRAYS, TO BE ADDED
C     TO THE RHS OF EQUATION NUMBER NODE LATER, IN ELLOUT.  
C
C   BDYCL BUILDS NUMC AND CWGHT USING THE NEIGHBOR TABLE ALREADY 
C   CREATED FOR THIS NODE AND OCTANT, AND THROUGH TWO INTERMEDIARY
C   ARRAYS, TEMP AND TEMP1.
C   TEMP IS FIRST CONSTRUCTED TO HOLD WEIGHTS FOR ALL NODES IN NEIGHB,
C   ASSUMING EACH NODE IS ACTIVE.  
C   IF NEIGHBOR 7 REPRESENTS A BOUNDARY FACE, THEN ALL FACE WEIGHTS ARE
C   STORED INTO TEMP1.  DISTRIB IS THEN CALLED TO DISTRIBUTE FACE 
C   WEIGHTS AMONG THE ACTIVE FACE NEIGHBORS, ADDING THE WEIGHTS INTO 
C   THE TEMP ARRAY.
C   EDGEWGHT IS CALLED TO MOVE WEIGHT OFF OF ANY NEIGHBORS WHICH ARE
C   EDGES OF TRANSPORT DOMAIN.
C   FINALLY, NUMC IS CONSTRUCTED FROM THE ACTIVE NODES IN NEIGHB, AND 
C   CWGHT IS BUILT BY TAKING THE ACTIVE WEIGHT FROM TEMP AND  
C   DISTRIBUTING WEIGHTS FROM INACTIVE CELLS PROPORTIONALLY AMONG THE
C   ACTIVE.
*****************************************************************
C
      DIMENSION DIAGST(27,NODESS),RF(NSCOL,NSROW,NSLAY),
     *          RHS(NODESS),THCK(NSCOL,NSROW,NSLAY)
      DIMENSION CWGHT(8),NUMC(8),INDX(8),TEMPT(8),CBNDY(NTFACE),
     *          NDIAG(8,8),TEMP(8),LBNDY(NTFACE),POR(NODESS)
      DIMENSION NONU(2,32*NFACES),SAV(32*NFACES),RHSO(NTFACE),
     *          CINFL(NCINFL)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C  
C  NDIAG TABLE 
C     ROW INDEX IS NEIGHBOR NUMBER
C     COL INDEX IS OCTANT NUMBER
C     VALUE IS DIAGONAL TO WHICH NEIGHBOR WEIGHT IS ACCUMULATED
C  GIVEN NODE,OCTANT BEING INTEGRATED 
C  WEIGHT FOR NEIGHB(N,1)
C  IS ADDED TO DIAGST(NDIAG(NEIGHB(N,1),NOCTANT),NODE)
C
      DATA NDIAG/14,13,10,11,5,4,1,2,
     *             14,13,10,11,23,22,19,20,
     *             14,13,16,17,5,4,7,8,
     *             14,13,16,17,23,22,25,26,
     *             14,15,12,11,5,6,3,2,
     *             14,15,12,11,23,24,21,20,
     *             14,15,18,17,5,6,9,8,
     *             14,15,18,17,23,24,27,26/
C
      OMXRAT=1-XRAT
      OMYRAT=1-YRAT
C      
      DO 15 N=1,8
      TEMP(N)=0.D0
      TEMPT(N)=0.D0
15    CONTINUE
C
C   CURRENT NODE IS ACTIVE
      TEMP(1)=1D0
C
      DO 210 N=2,8
C
C  SEE IF NEIGHBOR IS ON BOUNDARY EDGE
      IF (NEIGHB(N,1).EQ.-1) GOTO (210,210,22,210,210,22,21,22),N
C
C  SEE IF NEIGHBOR IS ON BOUNDARY FACE
      IF (NEIGHB(N,1).GT.NODESS) GOTO (210,22,32,22,22,62,72,82),N
C
C  NEXT NEIGHBOR, IF INTERIOR NODE
C  INTERIOR NODES NOW HANDLED BY ELLLHI
      GOTO 210
C  NEIGHBOR 7 IS BOUNDARY EDGE; CHECK IF BOUNDARY CORNER
21    IF ((NEIGHB(3,1).EQ.-1).AND.(NEIGHB(6,1).EQ.-1)) GOTO 22
C
C  X EDGE: INTERP BETWEEN NEIGH 7 AND 8
C
      IF (NEIGHB(8,1).EQ.-1) THEN
         TEMP(7)=TEMP(7)+XRAT*NEIGHB(6,2)
         TEMP(8)=TEMP(8)+OMXRAT+(1-NEIGHB(6,2))*XRAT
      ELSE
C
C  Y EDGE: INTERP BETWEEN NEIGH 7 AND 6
C
         IF (NEIGHB(6,1).EQ.-1) THEN
            TEMP(6)=TEMP(6)+OMYRAT+(1-NEIGHB(8,2))*YRAT
            TEMP(7)=TEMP(7)+YRAT*NEIGHB(8,2)
         ELSE
C
C  Z EDGE: INTERP BETWEEN NEIGH 7 AND 3
C
            TEMP(7)=TEMP(7)+TH1+(1-NEIGHB(4,2))*(1-TH1)
            TEMP(3)=TEMP(3)+(1-TH1)*NEIGHB(4,2)
         ENDIF
      ENDIF
      GOTO 210
C
C   3,6,8 EDGE OR 2,4 BNDY FACE
C   IN THESE CASES, NEIGHBOR IS OCTANT CORNER, SO GETS WEIGHT OF 1
C
22    TEMP(N)=TEMP(N)+1
      GOTO 210
C
C   3 IS BNDY FACE
C
32    IF (NEIGHB(2,1).GT.NODESS) THEN
C
C   X FACE: INTERP BETWEEN NEIGH 3 AND 2
C
         TEMP(2)=TEMP(2)+OMYRAT+(1-NEIGHB(4,2))*YRAT
         TEMP(3)=TEMP(3)+YRAT*NEIGHB(4,2)
      ELSE
C
C   Y FACE: INTERP BETWEEN NEIGH 3 AND 4
C
         TEMP(4)=TEMP(4)+OMXRAT+(1-NEIGHB(2,2))*XRAT
         TEMP(3)=TEMP(3)+XRAT*NEIGHB(2,2)
      ENDIF
      GOTO 210
C
C   6 IS BNDY FACE
C
62    IF (NEIGHB(2,1).GT.NODESS) THEN
C
C   X FACE: INTERP BETWEEN 6 AND 2
C
         TEMP(2)=TEMP(2)+1-TH1+(1-NEIGHB(5,2))*TH1
         TEMP(6)=TEMP(6)+TH1*NEIGHB(5,2)
      ELSE
C
C   Z FACE: INTERP BETWEEN 6 AND 5
C
         TEMP(5)=TEMP(5)+OMXRAT+(1-NEIGHB(2,2))*XRAT
         TEMP(6)=TEMP(6)+XRAT*NEIGHB(2,2)
      ENDIF
      GOTO 210
C
C   7 IS BNDY FACE
C
72    IF (NEIGHB(2,1).GT.NODESS) THEN
C
C   X FACE: INTERP BETWEEN 7, 2, 3, 6
C   CALL DISTRIB IN CASE OF INACTIVE NODES
C
         TEMPT(2)=OMYRAT*(1-TH1)
         TEMPT(3)=YRAT*(1-TH4)
         TEMPT(6)=OMYRAT*TH1
         TEMPT(7)=YRAT*TH4
      CALL DISTRIB(9,TEMPT,TEMP)
         GOTO 210
      ENDIF
      IF (NEIGHB(4,1).GT.NODESS) THEN
C
C   Y FACE: INTERP BETWEEN 7, 3, 4, 8
C   CALL DISTRIB IN CASE OF INACTIVE NODES
C         
         TEMPT(3)=OMXRAT*(1-TH2)
         TEMPT(4)=XRAT*(1-TH1)
         TEMPT(7)=OMXRAT*TH2
         TEMPT(8)=XRAT*TH1
      CALL DISTRIB(10,TEMPT,TEMP)
      ELSE
C
C   Z FACE: INTERP BETWEEN 7, 5, 6, 8
C   CALL DISTRIB IN CASE OF INACTIVE NODES
C         
         TEMPT(5)=OMXRAT*OMYRAT
         TEMPT(6)=XRAT*OMYRAT
         TEMPT(7)=XRAT*YRAT
         TEMPT(8)=OMXRAT*YRAT
      CALL DISTRIB(11,TEMPT,TEMP)
      ENDIF
      GOTO 210
C
C   8 IS BNDY FACE
C
82    IF (NEIGHB(4,1).GT.NODESS) THEN
C
C   Y FACE: INTERP BETWEEN 8 AND 4
C
         TEMP(4)=TEMP(4)+1-TH1+(1-NEIGHB(5,2))*TH1
         TEMP(8)=TEMP(8)+TH1*NEIGHB(5,2)
      ELSE
C
C   Z FACE: INTERP BETWEEN 8 AND 5
C
         TEMP(5)=TEMP(5)+OMYRAT+(1-NEIGHB(4,2))*YRAT
         TEMP(8)=TEMP(8)+YRAT*NEIGHB(4,2)
      ENDIF
      GOTO 210
C
210   CONTINUE
C
C   SOME OCTANT CORNERS COULD BE EDGES OF TRANSPORT DOMAIN
C   EDGES HAVE NO NODE NUMBERS, AND NO ASSOCIATED CONCENTRATION
C   INTEGRATION WEIGHTS MUST BE MOVED FROM EDGES TO INTERIOR OR
C   BOUNDARY NODES.
C   DISTRIBUTE EDGE WEIGHTS
C
      CALL EDGWGHT(TEMP,LBNDY,NTFACE,NODESS,NSCOL,NSROW,NSLAY,IDIM)
C
C   PUT ONLY ACTIVE NEIGHBORS INTO CWGHT TABLE.
C      
      NNZER=0
      DO 65 N=1,8
      IF ((NEIGHB(N,2).NE.0).AND.(TEMP(N).NE.0.D0)) THEN
            NNZER=NNZER+1
            NUMC(NNZER)=NEIGHB(N,1)
            CWGHT(NNZER)=TEMP(N)
            INDX(NNZER)=NDIAG(N,NOCTANT)
      ENDIF
65    CONTINUE
C
C   NODAL WGHT COUNTED IN INTERIOR
      CWGHT(1)=CWGHT(1)-1.0
C
C   ADD INTEGRATION WEIGHTS INTO MATRIX OR SAV
C   (SEE DISCUSSION AT BEGINNING OF SUBROUTINE)
C
      DO 220 N=1,NNZER
C      
      IF (NUMC(N).LE.NODESS) THEN
C
C   NUMC(N) IS INTERIOR NODE
         DIAGST(INDX(N),NODE)=DIAGST(INDX(N),NODE)+VOLN1*CWGHT(N)
C
      ELSE
         NBR=NUMC(N)-NODESS
         LBVAL=LBNDY(NBR)
         IF (LBVAL.GT.0) THEN
C
C   NUMC(N) IS NOFLOW BOUNDARY NODE; TAKES VALUE OF INTERIOR
            NUMDI=INTDIA(LBVAL,INDX(N),
     *              JS,IS,KS,NSCOL,NSROW,NSLAY)
            DIAGST(NUMDI,NODE)=DIAGST(NUMDI,NODE)+VOLN1*CWGHT(N)
         ELSE
            if (lbval.ne.-2) then
C
C   IF FIRST TRANSPORT TIME STEP, 
C   ACCUMULATE INITIAL MASS FOR MASS BALANCE
C   INITIAL BOUNDARY CONCENTRATION SAME AS INTERIOR; INITIALIZED IN
C   MOC5
cea
C   ALSO ACCUMULATE WATER VOLUME TO CALCULATE AGE MASS
C
                PARVOL = VOLN1*CWGHT(N)*POR(NODE)
                WATVOL = WATVOL + PARVOL
cea         	CBE    = VOLN1*CWGHT(N)*CBNDY(NBR)*POR(NODE)
                CBE    = CBNDY(NBR)*PARVOL 
                STINIT = STINIT + CBE
cellam
                IF (JRF.EQ.1) ADINIT=ADINIT + CBE*RF(JS,IS,KS) -CBE
                NCOEF=NCOEF+1
                NONU(2,NCOEF)=NBR
                SAV(NCOEF)=VOLN1*CWGHT(N)
                IF (LBVAL.eq.-1) THEN
C
C   NUMC(N) IS INFLOW BOUNDARY NODE; THEN ADD CINFL*SAV TO RHS IN ELLOUT
C   USE -NODE TO INDICATE INFLOW
               	   NONU(1,NCOEF)= -NODE
            	ELSE
C
C   NUMC(N) IS OUTFLOW BOUNDARY NODE; SAVE COEFF, THEN ADD C*COEFF TO RHS
               	   NONU(1,NCOEF)=NODE
            	ENDIF
	     endif
         ENDIF
      ENDIF
C
220   CONTINUE
C
      RETURN
      END
C
C**********************************************************************
C
      FUNCTION INTDIA(NV,IND,JS,IS,KS,NSCOL,NSROW,NSLAY)
C**********************************************************************
C  FIND DIAG NBR FOR INTERIOR NODE NV
C  ASSOCIATED WITH BNDY COEFF IN DIAG NBR INDX
C  FOR EQUATION FOR NODE (JS,IS,KS)
C
C  CODE ACCOMPLISHES:
C  INTDIA(5,11,13,15,17 OR 23)=14
C  IF INTERIOR NODE NV TO LEFT OR RIGHT (JS+-1) OF NODE THEN
C    INTDIA(6,12,18 OR 24)=15
C    INTDIA(4,10,16 OR 22)=13
C  IF INTERIOR NODE NV TO BACK OR FRONT (IS+-1) OF NODE THEN
C    INTDIA(2,10,12 OR 20)=11
C    INTDIA(8,16,18 OR 26)=17
C  IF INTERIOR NODE NV TO TOP OR BOTTOM (KS+-1) OF NODE THEN
C    INTDIA(2,4,6 OR 8)    =5
C    INTDIA(20,22,24 OR 26)=23
C
C**********************************************************************
C
      NJ=MOD(NV-1,NSCOL)+1
      JSDIFF=NJ-JS
      NZ=(NV-1)/(NSCOL*NSROW)+1
      KSDIFF=NZ-KS
      ISDIFF=(NV-NJ)/NSCOL-(NZ-1)*NSROW+1-IS
      L=-1
      GOTO (10,20,10,30),MOD(IND,4)+1
C
C   BOUNDARY NODE FOR EVEN NUMBERED DIAGONAL
C   CELL MEETS CELL BEING INTEGRATED ON EDGE
C
10    INTDIA=14+(JSDIFF+3*ISDIFF+9*KSDIFF)
      RETURN
C
C   BOUNDARY NODE FOR ODD NUMBERED DIAGONAL
C   CELL MEETS CELL BEING INTEGRATED AT FACE OR CORNER
C
20    L=1
30    N=ISDIFF*KSDIFF+3*JSDIFF*KSDIFF+9*JSDIFF*ISDIFF
      M=IND+L*N
      INTDIA=14+(M-14)*MIN(ABS(N),1)
      RETURN
C      
      END
C
C************************************************************************
      SUBROUTINE EDGWGHT(TEMP,LBNDY,NTFACE,NODESS,NSCOL,NSROW,
     *   NSLAY,IDIM)
C************************************************************************
C   MOVE EDGE WEIGHTS IN TEMP TABLE TO BOUNDARY FACES
C   AND ZERO EDGE WEIGHTS
C************************************************************************
C
      parameter (precno=5.d-7)
      DIMENSION TEMP(8),LBNDY(NTFACE)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C
      uu=temp(1)+temp(2)+temp(3)+temp(4)+temp(5)+temp(6)+temp(7)+temp(8)
C
C**********************************************************************
C  THREE DIMENSIONAL PROBLEM
C  MOVE EDGE WEIGHTS TO FACES
C
C       EDGE          
C     FROM          MOVE WGHT TO
C   JS+/-1,IS+/-1,KS     JS+/-1,IS,KS    (HALF TO EACH, IF BOTH OR 
C               JS,IS+/-1,KS     NEITHER NOFLOW)
C
C   JS+/1,IS,KS+/-1     JS+/-1,IS,KS     (HALF TO EACH, IF BOTH OR
C               JS,IS,KS+/-1     NEITHER NOFLOW)
C
C   JS+/-1.IS+/-1,KS+/-1 JS+/-1,IS,KS   (THIRD TO EACH, IF ALL OR
C                JS,IS+/-1,KS    NONE NOFLOW)
C                JS,IS,KS+/-1
C
C   JS,IS+/-1,KS+/-1       JS,IS+/-1,KS     (HALF TO EACH, IF BOTH OR
C                       JS,IS,KS+/-1     NEITHER NOFLOW)
C
C  IF FLOW AND NOFLOW FACES ADJACENT TO EDGE, ADD 1/(NBR NOFLOW FACES) 
C  TO EACH NOFLOW FACE. 
C
C     NEIGHB NBRS
C       FROM            TO
C     3          2,4
C     6          2,5
C     7          2,4,5 OR #,8 OR 3,6 OR 6,8
C     8          4,5
C
C  IF 6,8 ARE EDGES, THEN 7 IS A CORNER
C  OTHERWISE,  6,7 ARE EDGES
C              7,8 ARE EDGES
C           OR 3,7 ARE EDGES
C**********************************************************************
530   CONTINUE
C
C   CHECK FOR NEIGHBORS ON EDGE
C   IF NO NEIGHBORS ON EDGE, RETURN
C
      IF (NEIGHB(3,1).NE.-1 .AND. NEIGHB(6,1).NE.-1 .AND.
     *    NEIGHB(8,1).NE.-1) RETURN
C
C   SET NOFLN=1 ONLY IF NEIGHBOR N IS NOFLOW FACE 
C   AND ADJACENT TO EDGE.
      NOFL2=0
      NOFL4=0
      NOFL5=0
      IF (NEIGHB(3,1).EQ.-1 .OR. NEIGHB(6,1).EQ.-1) THEN
C
C  NEIGHB 2 IS FACE NODE
        IF (LBNDY(NEIGHB(2,1)-NODESS).EQ.NEIGHB(1,1)) NOFL2=1
      ENDIF
C
      IF (NEIGHB(3,1).EQ.-1 .OR. NEIGHB(8,1).EQ.-1) THEN
C
C  NEIGHB 4 IS FACE NODE
        IF (LBNDY(NEIGHB(4,1)-NODESS).EQ.NEIGHB(1,1)) NOFL4=1
      ENDIF
C
      IF (NEIGHB(6,1).EQ.-1 .OR. NEIGHB(8,1).EQ.-1) THEN
C
C NEIGHB 5 IS FACE NODE
        IF (LBNDY(NEIGHB(5,1)-NODESS).EQ.NEIGHB(1,1)) NOFL5=1
      ENDIF
C
C
C  NEIGHBOR 7 COULD BE CORNER, HORIZONTAL X EDGE, HORIZONTAL Y EDGE
C  OR VERTICAL Z EDGE
C
C  DO IF NEIGHB 7 IS A CORNER
C
      IF (NEIGHB(6,1).EQ.-1 .AND. NEIGHB(8,1).EQ.-1) THEN
C
C  VMTON WILL HOLD AMOUNT OF NEIGHBOR M WEIGHT TO MOVE TO
C  NEIGHBOR N
C
      V3TO2=(1+NOFL2-NOFL4)*0.5D0*TEMP(3)
      V3TO4=TEMP(3)-V3TO2
      V6TO2=(1+NOFL2-NOFL5)*0.5D0*TEMP(6)
      V6TO5=TEMP(6)-V6TO2
      V8TO4=(1+NOFL4-NOFL5)*0.5D0*TEMP(8)
      V8TO5=TEMP(8)-V8TO4
C
C  MOVE WEIGHTS FROM EDGES 3, 6 AND 8, AND ZERO THEM
C
      TEMP(2)=TEMP(2)+V3TO2+V6TO2
      TEMP(4)=TEMP(4)+V3TO4+V8TO4
      TEMP(5)=TEMP(5)+V6TO5+V8TO5
      TEMP(3)=0D0
      TEMP(6)=0D0
      TEMP(8)=0D0
C
C  NOW, DISTRIBUTE WEIGHT FROM NEIGHB 7
C
        IF (NOFL2.EQ.NOFL4) THEN
       IF (NOFL2.EQ.NOFL5) THEN
C
C  ALL FACES ADJACENT TO 7 FLOW OR ALL NOFLOW
         V=TEMP(7)/3
            TEMP(2)=TEMP(2)+V
            TEMP(4)=TEMP(4)+V
            TEMP(5)=TEMP(5)+TEMP(7)-V-V
          ELSE
C
C  NEIGHBORS 2 AND 4 BOTH FLOW OR BOTH NOFLOW, NEIGHB 5 DIFFERENT
C  GIVE WEIGHT TO NOFLOW NODE(S)
            TEMP(2)=TEMP(2)+0.5D0*TEMP(7)*NOFL2
            TEMP(4)=TEMP(4)+0.5D0*TEMP(7)*NOFL2
            TEMP(5)=TEMP(5)+TEMP(7)*NOFL5
          ENDIF
        ELSE
          IF (NOFL2.EQ.NOFL5) THEN
C
C  NEIGHBORS 2 AND 5 BOTH FLOW OR BOTH NOFLOW, NEIGHB 4 DIFFERENT
C  GIVE WEIGHT TO NOFLOW NODE(S)
            TEMP(2)=TEMP(2)+0.5D0*TEMP(7)*NOFL2
            TEMP(5)=TEMP(5)+0.5D0*TEMP(7)*NOFL2
            TEMP(4)=TEMP(4)+TEMP(7)*NOFL4
          ELSE
C
C  NEIGHBORS 4 AND 5 BOTH FLOW OR BOTH NOFLOW, NEIGHB 2 DIFFERENT
C  GIVE WEIGHT TO NOFLOW NODE(S)
            TEMP(4)=TEMP(4)+0.5D0*TEMP(7)*NOFL4
            TEMP(5)=TEMP(5)+0.5D0*TEMP(7)*NOFL4
            TEMP(2)=TEMP(2)+TEMP(7)*NOFL2
          ENDIF
        ENDIF
        TEMP(7)=0D0
      vv=temp(1)+temp(2)+temp(3)+temp(4)+temp(5)+temp(6)+temp(7)+temp(8)
      if(abs(uu-vv).gt.precno) then
         print *,'corner uu,vv',uu,vv,' temp1-8',temp
      endif
        RETURN
      ENDIF          
C        
C   NEIGHB 7 MUST BE ON X,Y OR Z EDGE
C   
      IF (NEIGHB(8,1).EQ.-1) THEN
C
C   X EDGE
C
C   NEIGHBS 3 AND 6 ARE FACES.  SET NOFL.
        NOFL3=0
        NOFL6=0
        IF (LBNDY(NEIGHB(3,1)-NODESS).EQ.NEIGHB(1,1)) NOFL3=1
        IF (LBNDY(NEIGHB(6,1)-NODESS).EQ.NEIGHB(1,1)) NOFL6=1
C   CALCULATE WEIGHT TO MOVE FROM 7 AND FROM 8
        V7TO3=(1+NOFL3-NOFL6)*0.5D0*TEMP(7)
        V7TO6=TEMP(7)-V7TO3
        V8TO4=(1+NOFL4-NOFL5)*0.5D0*TEMP(8)
        V8TO5=TEMP(8)-V8TO4
C   MOVE WEIGHT, AND ZERO EDGES
        TEMP(4)=TEMP(4)+V8TO4
        TEMP(5)=TEMP(5)+V8TO5
        TEMP(3)=TEMP(3)+V7TO3
        TEMP(6)=TEMP(6)+V7TO6 
        TEMP(7)=0D0
        TEMP(8)=0D0
      vv=temp(1)+temp(2)+temp(3)+temp(4)+temp(5)+temp(6)+temp(7)+temp(8)
      if(abs(uu-vv).gt.precno) then
         print *,'x face uu,vv',uu,vv,' temp1-8',temp
      endif
        RETURN
      ENDIF
C
C
      IF (NEIGHB(6,1).EQ.-1) THEN
C
C   Y EDGE
C
C   NEIGHBS 3 AND 8 ARE FACES.  SET NOFL
        NOFL3=0
        NOFL8=0
        IF (LBNDY(NEIGHB(3,1)-NODESS).EQ.NEIGHB(1,1)) NOFL3=1
        IF (LBNDY(NEIGHB(8,1)-NODESS).EQ.NEIGHB(1,1)) NOFL8=1
C   CALCULATE WEIGHT TO MOVE FROM 7 AND FROM 6
        V7TO3=(1+NOFL3-NOFL8)*0.5D0*TEMP(7)
        V7TO8=TEMP(7)-V7TO3
        V6TO2=(1+NOFL2-NOFL5)*0.5D0*TEMP(6)
        V6TO5=TEMP(6)-V6TO2
C   MOVE WEIGHT, AND ZERO EDGES
        TEMP(3)=TEMP(3)+V7TO3
        TEMP(8)=TEMP(8)+V7TO8
        TEMP(2)=TEMP(2)+V6TO2
        TEMP(5)=TEMP(5)+V6TO5
        TEMP(6)=0D0
        TEMP(7)=0D0
      vv=temp(1)+temp(2)+temp(3)+temp(4)+temp(5)+temp(6)+temp(7)+temp(8)
      if(abs(uu-vv).gt.precno) then
         print *,'y edge uu,vv',uu,vv,' temp1-8',temp
      endif
        RETURN
      ENDIF
C
C
C   MUST BE
C   Z EDGE
C
C   NEIGHBS 6 AND 8 ARE FACES.  SET NOFL
C
        NOFL6=0
        NOFL8=0
        IF (LBNDY(NEIGHB(6,1)-NODESS).EQ.NEIGHB(1,1)) NOFL6=1
        IF (LBNDY(NEIGHB(8,1)-NODESS).EQ.NEIGHB(1,1)) NOFL8=1
C   CALCULATE WEIGHT TO MOVE FROM 7 AND FROM 3
        V7TO6=(1+NOFL6-NOFL8)*0.5D0*TEMP(7)
        V7TO8=TEMP(7)-V7TO6
        V3TO2=(1+NOFL2-NOFL4)*0.5D0*TEMP(3)
        V3TO4=TEMP(3)-V3TO2
C   MOVE WEIGHT, AND ZERO EDGES
        TEMP(6)=TEMP(6)+V7TO6
        TEMP(8)=TEMP(8)+V7TO8
        TEMP(2)=TEMP(2)+V3TO2
        TEMP(4)=TEMP(4)+V3TO4
        TEMP(3)=0D0
        TEMP(7)=0D0
      vv=temp(1)+temp(2)+temp(3)+temp(4)+temp(5)+temp(6)+temp(7)+temp(8)
      if(abs(uu-vv).gt.precno) then
         print *,'v76,v78,v32,v34',V7TO6,V7TO8,V3TO2,V3TO4
         print *,'z edge uu,vv',uu,vv,' temp1-8',temp
      endif
        RETURN
C
      END
C
C**********************************************************************
C
      SUBROUTINE DISTRIB(N,TEMPT,TEMP)
C**********************************************************************
C
C  MOVE WEIGHTS FROM TEMPT TABLE TO TEMP TABLE, DISTRIBUTING WEIGHT 
C  FROM INACTIVE NODES PROPORTIONALLY AMONG ACTIVE NODES
C
      DIMENSION NLIM(11),IX(8,11),TEMPT(8),TEMP(8)
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C
C  NLIM GIVES NUMBER OF TEMPT ENTRIES, DEPENDING ON CALLING SUBROUTINE
      DATA NLIM/1,2,4,2,2,4,8,4,4,4,4/
C  IX GIVES WHICH ENTRIES IN TEMPT ARE PRESENT, DEPENDING ON CALLING
C  SUBROUTINE.  
C  ROW INDEX IS ORDINAL OF ENTRY, READ FROM 1 TO NLIM(N)
C  COL INDEX IS N, IDENTIFYING CALLING ROUTINE
C  ONLY LAST 3 COLS NOW IN USE-INTERIOR PROCESSING DONE BY ELLLHI
      DATA IX/1, 0, 0, 0, 0, 0, 0, 0,
     *        1, 2, 0, 0, 0, 0, 0, 0,
     *        1, 2, 3, 4, 0, 0, 0, 0,
     *        1, 4, 0, 0, 0, 0, 0, 0,
     *        1, 5, 0, 0, 0, 0, 0, 0,
     *        1, 2, 5, 6, 0, 0, 0, 0,
     *        1, 2, 3, 4, 5, 6, 7, 8,
     *        1, 4, 5, 8, 0, 0, 0, 0,
     *        2, 3, 6, 7, 0, 0, 0, 0,
     *        4, 3, 7, 8, 0, 0, 0, 0,
     *        5, 6, 7, 8, 0, 0, 0, 0/
C
      SUMA=0.D0
      DO M=1,NLIM(N)
C
C  TOTAL ACTIVE AND INACTIVE WEIGHTS, BASED ON ACTIVE STATUS IN
C  NEIGHBOR TABLE
C
        IF (NEIGHB(IX(M,N),2).EQ.1) SUMA=SUMA+TEMPT(IX(M,N))
      ENDDO
C
      SUMI = 1. - SUMA
C
C  DISTRIBUTE INACTIVE WEIGHT PROPORTIONALLY AMONG ACTIVE NODES
C
      IF (SUMI.NE.0.D0) THEN
C
      AINV=1/SUMA
         TOT=0.D0
         DO M=1,NLIM(N)
            IF (NEIGHB(IX(M,N),2).EQ.1) THEN
            ADD=TEMPT(IX(M,N))*AINV*SUMI
               TEMPT(IX(M,N))=TEMPT(IX(M,N))+ADD
            TOT=TOT+ADD
         ELSE
            TEMPT(IX(M,N))=0.D0
            ENDIF
         ENDDO
         TEMP(1)=TEMP(1)+SUMI-TOT
      ENDIF
C
C  ACCUMULATE TO TEMP AND CLEAR TEMPT
      DO M=1,NLIM(N)
      TEMP(IX(M,N))=TEMP(IX(M,N))+TEMPT(IX(M,N))
      TEMPT(IX(M,N))=0.D0
      ENDDO
      RETURN
      END
C
C**********************************************************************
      SUBROUTINE BINTERP(NOCTANT,NODESS,NTFACE,LBNDY,
     *     XHAT,YHAT,ZHAT,CNOLD,CBNDY,CVAL,NSCOL,NSROW,NSLAY,
     *     CVERT,ININD,TH1,TH2,TH3,TH4,IDIM,XX,YY,ZZ)
C**********************************************************************
C
C   GIVEN A POINT IN OCTANT=NOCTANT OF CELL=NEIGHB(1,1),
C   USE TRILINEAR INTERPOLATION TO FIND CONCENTRATION AT THAT POINT
C   AT TIME=OLD TIME LEVEL,
C   USING NODAL CONCENTRATION VALUES STORED IN 
C      CNOLD AND CBNDY     IF ININD=1
C   OR CVERT               IF ININD=2.
C   LINEAR BASIS FUNCTIONS IN EACH OF X, Y, AND Z DIRECTIONS ARE 
C   USED TO ACCOMPLISH INTERPOLATION.
C
C   ININD=1 IS USED FOR INTERPOLATION BETWEEN NODES OF GRID, WHILE
C   ININD=2 IS USED FOR INTERPOLATION OVER OCTANT ONLY.  (IN THIS
C   CASE, BINTERP HAS ALREADY BEEN CALLED WITH ININD=1 TO FIND
C   CONCENTRATIONS AT OCTANT CORNERS.  THEN BINTERP IS CALLED WITH 
C   ININD=2, WHERE INTERPOLATED CONCENTRATIONS AT OCTANT CORNERS
C   ARE STORED IN CVERT AT ENTRY.)
C***********************************************************************
      PARAMETER(precno=5.d-7,SMALL=1.D-4)
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION NUMC(8),CVERT(8),LBNDY(NTFACE),
     *            CNOLD(NODESS),CBNDY(NTFACE),
     *            CWGHT(8),TEMP(8)
C
C  FIRST NEIGHBOR IS ALWAYS NODE ITSELF
      NUMC(1)=NEIGHB(1,1)
C
      GOTO (3000,4000),ININD
C
3000  CONTINUE
      GOTO (100,200,300,400,500,600,700,800),NOCTANT
C
C   X,Y,Z<0
100   TEMP(1)=
     *  BH(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BH(ZZ*TH1,NSLOPE(3))
      TEMP(2)=
     * -BF(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BH(ZZ*TH2,NSLOPE(3))
      TEMP(3)=
     *  BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BH(ZZ*TH3,NSLOPE(3))
      TEMP(4)=
     * -BH(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BH(ZZ*TH4,NSLOPE(3))
      TEMP(5)=
     * -BH(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BF(ZZ*TH1,NSLOPE(3))
      TEMP(6)=
     *  BF(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BF(ZZ*TH2,NSLOPE(3))
      TEMP(7)=
     * -BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH3,NSLOPE(3))
      TEMP(8)=
     *  BH(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH4,NSLOPE(3))
      GOTO 1000
C
C   X,Y<0  Z>0
200   TEMP(1)=
     *  BH(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BG(ZZ*TH1,NSLOPE(3))
      TEMP(2)=
     * -BF(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BG(ZZ*TH2,NSLOPE(3))
      TEMP(3)=
     *  BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BG(ZZ*TH3,NSLOPE(3))
      TEMP(4)=
     * -BH(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BG(ZZ*TH4,NSLOPE(3))
      TEMP(5)=
     *  BH(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BF(ZZ*TH1,NSLOPE(3))
      TEMP(6)=
     * -BF(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BF(ZZ*TH2,NSLOPE(3))
      TEMP(7)=
     *  BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH3,NSLOPE(3))
      TEMP(8)=
     * -BH(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH4,NSLOPE(3))
      GOTO 1000
C
C   X<0  Y>0  Z<0
300   TEMP(1)=
     *  BH(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BH(ZZ*TH1,NSLOPE(3))
      TEMP(2)=
     * -BF(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BH(ZZ*TH2,NSLOPE(3))
      TEMP(3)=
     * -BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BH(ZZ*TH3,NSLOPE(3))
      TEMP(4)=
     *  BH(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BH(ZZ*TH4,NSLOPE(3))
      TEMP(5)=
     * -BH(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BF(ZZ*TH1,NSLOPE(3))
      TEMP(6)=
     *  BF(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BF(ZZ*TH2,NSLOPE(3))
      TEMP(7)=
     *  BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH3,NSLOPE(3))
      TEMP(8)=
     * -BH(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH4,NSLOPE(3))
      GOTO 1000
C
C   X<0  Y,Z>0
400   TEMP(1)=
     *  BH(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BG(ZZ*TH1,NSLOPE(3))
      TEMP(2)=
     * -BF(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BG(ZZ*TH2,NSLOPE(3))
      TEMP(3)=
     * -BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BG(ZZ*TH3,NSLOPE(3))
      TEMP(4)=
     *  BH(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BG(ZZ*TH4,NSLOPE(3))
      TEMP(5)=
     *  BH(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BF(ZZ*TH1,NSLOPE(3))
      TEMP(6)=
     * -BF(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BF(ZZ*TH2,NSLOPE(3))
      TEMP(7)=
     * -BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH3,NSLOPE(3))
      TEMP(8)=
     *  BH(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH4,NSLOPE(3))
      GOTO 1000
C
C   X>0  Y,Z<0
500   TEMP(1)=
     *  BG(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BH(ZZ*TH1,NSLOPE(3))
      TEMP(2)=
     *  BF(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BH(ZZ*TH2,NSLOPE(3))
      TEMP(3)=
     * -BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BH(ZZ*TH3,NSLOPE(3))
      TEMP(4)=
     * -BG(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BH(ZZ*TH4,NSLOPE(3))
      TEMP(5)=
     * -BG(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BF(ZZ*TH1,NSLOPE(3))
      TEMP(6)=
     * -BF(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BF(ZZ*TH2,NSLOPE(3))
      TEMP(7)=
     *  BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH3,NSLOPE(3))
      TEMP(8)=
     *  BG(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH4,NSLOPE(3))
      GOTO 1000
C
C   X>0  Y<0  Z>0
600   TEMP(1)=
     *  BG(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BG(ZZ*TH1,NSLOPE(3))
      TEMP(2)=
     *  BF(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BG(ZZ*TH2,NSLOPE(3))
      TEMP(3)=
     * -BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BG(ZZ*TH3,NSLOPE(3))
      TEMP(4)=
     * -BG(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BG(ZZ*TH4,NSLOPE(3))
      TEMP(5)=
     *  BG(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BF(ZZ*TH1,NSLOPE(3))
      TEMP(6)=
     *  BF(XX,NSLOPE(1))*BH(YY,NSLOPE(2))*BF(ZZ*TH2,NSLOPE(3))
      TEMP(7)=
     * -BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH3,NSLOPE(3))
      TEMP(8)=
     * -BG(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH4,NSLOPE(3))
      GOTO 1000
C
C   X,Y>0  Z<0
700   TEMP(1)=
     *  BG(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BH(ZZ*TH1,NSLOPE(3))
      TEMP(2)=
     *  BF(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BH(ZZ*TH2,NSLOPE(3))
      TEMP(3)=
     *  BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BH(ZZ*TH3,NSLOPE(3))
      TEMP(4)=
     *  BG(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BH(ZZ*TH4,NSLOPE(3))
      TEMP(5)=
     * -BG(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BF(ZZ*TH1,NSLOPE(3))
      TEMP(6)=
     * -BF(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BF(ZZ*TH2,NSLOPE(3))
      TEMP(7)=
     * -BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH3,NSLOPE(3))
      TEMP(8)=
     * -BG(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH4,NSLOPE(3))
      GOTO 1000
C
C   X,Y,Z>0
800   TEMP(1)=
     *  BG(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BG(ZZ*TH1,NSLOPE(3))
      TEMP(2)=
     *  BF(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BG(ZZ*TH2,NSLOPE(3))
      TEMP(3)=
     *  BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BG(ZZ*TH3,NSLOPE(3))
      TEMP(4)=
     *  BG(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BG(ZZ*TH4,NSLOPE(3))
      TEMP(5)=
     *  BG(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BF(ZZ*TH1,NSLOPE(3))
      TEMP(6)=
     *  BF(XX,NSLOPE(1))*BG(YY,NSLOPE(2))*BF(ZZ*TH2,NSLOPE(3))
      TEMP(7)=
     *  BF(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH3,NSLOPE(3))
      TEMP(8)=
     *  BG(XX,NSLOPE(1))*BF(YY,NSLOPE(2))*BF(ZZ*TH4,NSLOPE(3))
      GOTO 1000
C
C  DISTRIBUTE EDGE WEIGHTS
C  DO THIS IF ININD=1, INTERPOLATION IS BETWEEN NODES OF GRID
C
1000  CONTINUE
      CALL EDGWGHT(TEMP,LBNDY,NTFACE,NODESS,NSCOL,NSROW,NSLAY,IDIM)
C
C   DETERMINE ACTIVE NEIGHBORING CELLS
C
      NNZER=0
      NNAC=8
C   CHECK FOR ACTIVE NEIGHBORS
      DO 65 N=1,8
        IF ((NEIGHB(N,2).NE.0).AND.(TEMP(N).NE.0.0)) THEN
            NNZER=NNZER+1
            NUMC(NNZER)=NEIGHB(N,1)
            CWGHT(NNZER)=TEMP(N)
        ELSE
            CWGHT(NNAC)=TEMP(N)
            NNAC=NNAC-1
        ENDIF
65    CONTINUE
C**********************************************************************
C   DISTRIBUTE WEIGHTS NNZER+1 TO 8 INTO 1 TO NNZER
C
C   IF ALL NODES ARE ACTIVE, GOTO CONCENTRATION CALCULATION
      IF (NNZER.EQ.8) GOTO 7000
C
C   DISTRIBUTE WEIGHT ON INACTIVE NODES PROPORTIONALLY AMONG ACTIVE
      SUMA=0.
      qs=0.
C
      DO 35 N=1,NNZER
        SUMA=SUMA+CWGHT(N)
35    CONTINUE
C
C   IF ALL WEIGHT IS ON INACTIVE NODES,
C   POINT IS ON SUBGRID EDGE
      IF (SUMA.EQ.0) GOTO 10
C
C   FIND FRACTION OF TOTAL ACTIVE VALUE IS CWGHT(N)
      SINV=1/SUMA
      DO 45 N=1,NNZER-1
         TEMP(N)=CWGHT(N)*SINV
         qs=qs+TEMP(N)
45    CONTINUE
C
c******************************************************************
c  debug- delete above refs to qs also
      temp(nnzer)=1-qs
C   FIND TOTAL VALUE OF WEIGHT FOR INACTIVE CELLS
      SUMI=0
      DO 47 N=NNZER+1,8
        SUMI=SUMI+CWGHT(N)
47    CONTINUE
      if (abs(suma+sumi-1).gt.precno) then
          print *,'binterp sum wgt ne 1',
     *                     suma+sumi-1,neighb(1,1),xhat,yhat,zhat
          stop
      endif
      val=0.
      do 4 m=1,nnzer
4     val=val+sumi*temp(m)
      if (abs(val-sumi).gt.precno) 
     *          print *,'binterp distr-actual inact',val-sumi
c******************************************************************
C   ADD FRACTION OF INACTIVE TOTAL TO ACTIVE VALUES
      VAL=0.
      SUMI = 1. - SUMA
      DO 55 N=1,NNZER-1
        CWGHT(N)=CWGHT(N)+SUMI*TEMP(N)
        VAL=VAL+CWGHT(N)
55    CONTINUE
      CWGHT(NNZER)=1-VAL
C*************************************************************************
C
C  CONCENTRATION IS WEIGHTED AVERAGE OF CONCENTRATIONS AT SUUROUNDING
C  ACTIVE NODES
C  NUMC HOLDS ACTIVE NODE NUMBERS
C  CWGHT HOLDS ASSOCIATED WEIGHTS
C  FOR INTERIOR NODES, CONCENTRATION STORED IN CNOLD
C  FOR BOUNDARY NODES, CONCENTRATION STORED IN CBNDY
C
7000  CONTINUE
      CVAL=0.D0
      DO 7010 N=1,NNZER
      IF (NUMC(N).LE.NODESS) THEN
            CVAL=CVAL+CWGHT(N)*CNOLD(NUMC(N))
      ELSE
            CVAL=CVAL+CWGHT(N)*CBNDY(NUMC(N)-NODESS)
      ENDIF
7010  CONTINUE
      RETURN
C
C  INTERPOLATE FROM CONCENTRATIONS STORED IN CVERT
C  HERE, ACTIVE/INACTIVE HAVE ALREADY BEEN USED TO FIND CONCENTRATIONS
C  AT OCTANT CORNERS AND STORE THEM IN CVERT
C  DO THIS IF ININD=2, INTERPOLATION BETWEEN CVERT VALUES
C
4000  CONTINUE
C
      GOTO (101,201,301,401,501,601,701,801),NOCTANT
C
C   X,Y,Z<0
101   TEMP(1)=
     *  BH(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(2)=
     * -BF(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(3)=
     *  BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(4)=
     * -BH(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(5)=
     * -BH(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(6)=
     *  BF(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(7)=
     * -BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(8)=
     *  BH(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      GOTO 2000
C
C   X,Y<0  Z>0
201   TEMP(1)=
     *  BH(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(2)=
     * -BF(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(3)=
     *  BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(4)=
     * -BH(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(5)=
     *  BH(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(6)=
     * -BF(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(7)=
     *  BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(8)=
     * -BH(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      GOTO 2000
C
C   X<0  Y>0  Z<0
301   TEMP(1)=
     *  BH(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(2)=
     * -BF(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(3)=
     * -BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(4)=
     *  BH(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(5)=
     * -BH(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(6)=
     *  BF(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(7)=
     *  BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(8)=
     * -BH(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      GOTO 2000
C
C   X<0  Y,Z>0
401   TEMP(1)=
     *  BH(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(2)=
     * -BF(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(3)=
     * -BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(4)=
     *  BH(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(5)=
     *  BH(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(6)=
     * -BF(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(7)=
     * -BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(8)=
     *  BH(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      GOTO 2000
C
C   X>0  Y,Z<0
501   TEMP(1)=
     *  BG(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(2)=
     *  BF(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(3)=
     * -BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(4)=
     * -BG(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(5)=
     * -BG(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(6)=
     * -BF(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(7)=
     *  BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(8)=
     *  BG(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      GOTO 2000
C
C   X>0  Y<0  Z>0
601   TEMP(1)=
     *  BG(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(2)=
     *  BF(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(3)=
     * -BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(4)=
     * -BG(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(5)=
     *  BG(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(6)=
     *  BF(XHAT,NSLOPE(1))*BH(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(7)=
     * -BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(8)=
     * -BG(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      GOTO 2000
C
C   X,Y>0  Z<0
701   TEMP(1)=
     *  BG(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(2)=
     *  BF(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(3)=
     *  BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(4)=
     *  BG(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BH(ZHAT,NSLOPE(3))
      TEMP(5)=
     * -BG(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(6)=
     * -BF(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(7)=
     * -BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(8)=
     * -BG(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      GOTO 2000
C
C   X,Y,Z>0
801   TEMP(1)=
     *  BG(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(2)=
     *  BF(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(3)=
     *  BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(4)=
     *  BG(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BG(ZHAT,NSLOPE(3))
      TEMP(5)=
     *  BG(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(6)=
     *  BF(XHAT,NSLOPE(1))*BG(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(7)=
     *  BF(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      TEMP(8)=
     *  BG(XHAT,NSLOPE(1))*BF(YHAT,NSLOPE(2))*BF(ZHAT,NSLOPE(3))
      GOTO 2000
C
2000  CVAL=0.D0
      DO 2010 N=1,8
      CVAL=CVAL+TEMP(N)*CVERT(N)
2010  CONTINUE
      RETURN
C
10    print *,'binterp error all nodes inactive','  noct',
     *      noctant,'  xyzhat',xhat,yhat,zhat
C
      END
C*************************************************************************
C      BASIS FUNCTIONS
C
C   BASIS FUNCTIONS USED FOR BINTERP INTERPOLATION
C
      FUNCTION BF(V,NSLOPE)
           BF=NSLOPE*V
      END
C
      FUNCTION BG(V,NSLOPE)
           BG=1-NSLOPE*V
      END
C
      FUNCTION BH(V,NSLOPE)
           BH=1+NSLOPE*V
      END
C
C**********************************************************************
      SUBROUTINE BUILDNEI(NOCTANT,JS,IS,KS,NODE,NODESS,
     *              J,I,K,IBOUND,NCOL,NROW,NLAY,
     *              NSCOL,NSROW,NSLAY)
C**********************************************************************
C
C  BUILD NEIGHBOR AND SLOPE TABLES FOR OCTANT=NOCTANT OF
C  CELL=NODE=(JS,IS,KS)=(J,I,K)
C
C  NEIGHB(N,M) IS TABLE GIVING NODE NUMBER, N,
C               AND ACTIVE/INACTIVE STATUS, M,
C  OF NODES NEIGHBORING CURRENT NODE, OCTANT WHERE
C
C  NODE NUMBER=SUBGRID NODE NUMBER (=DISPLACEMENT INTO CONC, CNOLD),
C                                IF NODE IS IN TRANSPORT SUBGRID
C             =BOUNDARY NODE NUMBER (=NODESS+DISPLACEMENT INTO CBNDY,
C                                      LBNDY),
C                                IF NODE IS ON SUBGRID BOUNDARY FACE
C             = -1               IF NO CONCENTRATION NODE EXISTS,
C                        BECAUSE OCTANT IS ON SUBGRID EDGE
C
C  ACTIVE=0 IF NODE IS INACTIVE (IBOUND=0 FOR NODE IN FLOW DOMAIN OR
C                                NODE ON BNDY FACE OF INACTIVE CELL OR
C                     NODE IS ON TRANSPORT SUBGRID EDGE)
C        =1 IF NODE IS ACTIVE (IBOUND <>0 OR
C                  BOUNDARY FACE NODE ON ACTIVE SUBGRID CELL)
C
C  FOR CUBE WITH CENTER (0,0,0), NOCTANT SIGNIFIES OCTANT WITH X,Y,Z
C  AS FOLLOWS;
C     NOCTANT=1 - - -
C              =2 - - +
C            =3 - + -
C            =4 - + +
C            =5 + - -
C            =6 + - +
C            =7 + + -
C            =8 + + +
C
C  FOR INTERIOR OCTANT OF CELL NUMBER, NODE, AND TRANSPORT COORDINATES
C  JS,IS,KS,
C  NEIGHBORING TRANSPORT CELL NODE NUMBERS ARE CALCULATED FOR CELLS
C  HAVING COORDINATES:
C     NEIGHB(1,M)=(JS,IS,KS)
C     NEIGHB(2,M)=(JS+-1,IS,KS)
C     NEIGHB(3,M)=(JS+-1,IS+-1,KS)
C     NEIGHB(4,M)=(JS,IS+-1,KS)
C     NEIGHB(5,M)=(JS,IS,KS+-1)
C     NEIGHB(6,M)=(JS+-1,IS,KS+-1)
C     NEIGHB(7,M)=(JS+-1,IS+-1,KS+-1)
C     NEIGHB(8,M)=(JS,IS+-1,KS+-1)
C
C  NSLOPE=1   IF OCTANT IS IN INTERIOR OF TRANSPORT SUBGRID
C        =2   IF OCTANT IS ON SUBGRID BOUNDARY
C  THIS VALUE IS USED TO DETERMINE SLOPE OF INTERPOLATION
C  WEIGHTING FUNCTIONS
C
C********************************************************
C
      DIMENSION IBOUND(NCOL,NROW,NLAY)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C
C  FIRST,ASSUME OCTANT IS IN INTERIOR OF SUBGRID,
C  THEN FIX TABLE IF IT'S NOT
C
C  ASSUMING NODE IS INTERIOR,
C  FIND NEIGHBOR WITH DIFFERENT X VALUE
C                   DIFFERENT X,Y VALUES
C                DIFFERENT Y VALUE
C  THEN ADJUST LAYER AND DO THE SAME.
C
C  JB=J-1 FOR OCTANTS 1-4   
C  JB=J+1 FOR OCTANTS 5-8
C  IB=I-1 FOR OCTANTS 1,2,5,6
C  IB=I+1 FOR OCTANTS 3,4,7,8
C  KB=K-1 FOR OCTANTS 1,3,5,7
C  KB=K+1 FOR OCTANTS 2,4,6,8
C
C
C  FIRST NODE ALWAYS CURRENT NODE, ACTIVE
      NEIGHB(1,1)=NODE
      NEIGHB(1,2)=1
C
C  USE NODAL COORDINATES AND GRID DIMENSIONS TO CALCULATE NEIGHBOR
C  NUMBERS
C
      DO 15 N=2,8
      NEIGHB(N,1)=NODE
15    CONTINUE
      JB=J+1
      INCRE=1
      IF (NOCTANT.LE.4) THEN
            INCRE=-1
            JB=J-1
      ENDIF
      JC=JB-J
      NEIGHB(2,1)=NEIGHB(2,1)+INCRE
      NEIGHB(3,1)=NEIGHB(3,1)+INCRE
      NEIGHB(6,1)=NEIGHB(6,1)+INCRE
      NEIGHB(7,1)=NEIGHB(7,1)+INCRE
      IB=I+1
      INCRE=NSCOL
      IF ((NOCTANT.LE.2).OR.(NOCTANT.EQ.5).OR.(NOCTANT.EQ.6)) THEN
            INCRE=-INCRE
            IB=I-1
      ENDIF
      IC=IB-I
      NEIGHB(3,1)=NEIGHB(3,1)+INCRE
      NEIGHB(4,1)=NEIGHB(4,1)+INCRE
      NEIGHB(7,1)=NEIGHB(7,1)+INCRE
      NEIGHB(8,1)=NEIGHB(8,1)+INCRE
      KB=K+1
      INCRE=NSCOL*NSROW
      IF (REAL(NOCTANT)/2.NE.NOCTANT/2) THEN
            INCRE=-INCRE
            KB=K-1
      ENDIF
      KC=KB-K
      NEIGHB(5,1)=NEIGHB(5,1)+INCRE
      NEIGHB(6,1)=NEIGHB(6,1)+INCRE
      NEIGHB(7,1)=NEIGHB(7,1)+INCRE
      NEIGHB(8,1)=NEIGHB(8,1)+INCRE
C
C   INTERIOR OCTANT
C
      NSLOPE(1)=1
      NSLOPE(2)=1
      NSLOPE(3)=1
      IF (((ISCOL1.LE.JB).AND.(JB.LE.ISCOL2)).AND.
     *      ((ISROW1.LE.IB).AND.(IB.LE.ISROW2)).AND.
     *      ((ISLAY1.LE.KB).AND.(KB.LE.ISLAY2))) GOTO 1000
C
C   IF OCTANT IS NOT INTERIOR, DETERMINE IF ON SUBGRID BOUNDARY
C   CORNER, EDGE OR FACE
C 
      M1=-1
      IF (JB.LT.ISCOL1) M1=1
      IF (JB.GT.ISCOL2) M1=0
      M2=-1
      IF (IB.LT.ISROW1) M2=1
      IF (IB.GT.ISROW2) M2=0
      M3=-1
      IF (KB.LT.ISLAY1) M3=1
      IF (KB.GT.ISLAY2) M3=0
C
C   IF OCTANT IS ON COLUMN BOUNDARY,
C   ADJUST NEIGHBORING COLUMN NODES
C
      IF (M1.NE.-1) THEN
         ISB=IS+IC
         KSB=KS+KC
         NEIGHB(2,1)=NODESS+NBJ(M1,IS,KS,NSROW)
         NEIGHB(3,1)=NODESS+NBJ(M1,ISB,KS,NSROW)
         NEIGHB(6,1)=NODESS+NBJ(M1,IS,KSB,NSROW)
         NEIGHB(7,1)=NODESS+NBJ(M1,ISB,KSB,NSROW)
         NSLOPE(1)=2
      ENDIF
C
C   IF OCTANT IS ON ROW BOUNDARY,
C   ADJUST NEIGHBORING ROW NODES.
C   FUNCTIONS NBJ, NBI, NBK RETURN BOUNDARY FACE NUMBERS IN
C   COL, ROW, LAY DIRECTIONS RESPECTIVELY
C   NEIGHBOR NUMBER FOR BOUNDARY FACE IS NODESS+ FACE NUMBER
C   AND NEIGHBOR IS RECOGNIZED AS BOUNDARY BY HAVE NUMBER GREATER
C   THAN NODESS
C
      IF (M2.NE.-1) THEN
         JSB=JS+JC
         KSB=KS+KC
         NEIGHB(3,1)=NODESS+NBI(M2,JSB,KS,NSCOL,NSROW,NSLAY)
         NEIGHB(4,1)=NODESS+NBI(M2,JS,KS,NSCOL,NSROW,NSLAY)
         NEIGHB(7,1)=NODESS+NBI(M2,JSB,KSB,NSCOL,NSROW,NSLAY)
         NEIGHB(8,1)=NODESS+NBI(M2,JS,KSB,NSCOL,NSROW,NSLAY)
         NSLOPE(2)=2
      ENDIF
C
C   IF OCTANT IS ON LAYER BOUNDARY,
C   ADJUST NEIGHBORING LAYER NODES
C
      IF (M3.NE.-1) THEN
         JSB=JS+JC
         ISB=IS+IC
         NEIGHB(5,1)=NODESS+NBK(M3,JS,IS,NSCOL,NSROW,NSLAY)
         NEIGHB(6,1)=NODESS+NBK(M3,JSB,IS,NSCOL,NSROW,NSLAY)
         NEIGHB(7,1)=NODESS+NBK(M3,JSB,ISB,NSCOL,NSROW,NSLAY)
         NEIGHB(8,1)=NODESS+NBK(M3,JS,ISB,NSCOL,NSROW,NSLAY)
         NSLOPE(3)=2
      ENDIF
C
C   IF OCTANT IS ON MORE THAN ONE BOUNDARY,
C   IT'S AN EDGE OR A CORNER
C
C   Z EDGE
      IF ((M1.NE.-1).AND.(M2.NE.-1)) THEN
         NEIGHB(3,1)=-1
         NEIGHB(7,1)=-1
C   CORNER
         IF (M3.NE.-1) THEN
            NEIGHB(6,1)=-1
            NEIGHB(8,1)=-1
            GOTO 1000
         ENDIF
      ENDIF
C   Y EDGE
      IF (M3.NE.-1) THEN
         IF (M1.NE.-1) THEN
            NEIGHB(6,1)=-1
            NEIGHB(7,1)=-1
            GOTO 1000
         ENDIF
C   X EDGE
         IF (M2.NE.-1) THEN
            NEIGHB(7,1)=-1
            NEIGHB(8,1)=-1
         ENDIF
      ENDIF
C****************************************************************
C   DETERMINE ACTIVE NEIGHBORING CELLS:
C   FIRST, GET IBOUND VALUES,
C   ASSUMING ALL NEIGHBORS ARE IN INTERIOR OF FLOW DOMAIN.
C   THIS SHOULD BE A LEGITIMATE PROCEDURE, SINCE STORAGE IS NOT 
C   ACCESSED OUTSIDE OF X ARRAY, BUT IF CODE HAS BEEN COMPILED WITH 
C   SUBSCRIPT CHECKING, IT WILL BLOW UP HERE.
C
c
1000  if (jb.gt.0 .and. jb.le.ncol) NEIGHB(2,2)=IBOUND(JB,I,K)
      if (jb.gt.0 .and. jb.le.ncol .and. ib.gt.0 
     *    .and. ib.le.nrow) NEIGHB(3,2)=IBOUND(JB,IB,K)
      if (ib.gt.0 .and. ib.le.nrow) NEIGHB(4,2)=IBOUND(J,IB,K)
      if (kb.gt.0 .and. kb.le.nlay) NEIGHB(5,2)=IBOUND(J,I,KB)
      if (jb.gt.0 .and. jb.le.ncol .and. kb.gt.0 .and. kb.le.nlay)
     *        NEIGHB(6,2)=IBOUND(JB,I,KB)
      if (jb.gt.0 .and. jb.le.ncol .and. ib.gt.0 
     *    .and. ib.le.nrow .and. kb.gt.0 .and. kb.le.nlay)
     *         NEIGHB(7,2)=IBOUND(JB,IB,KB)
      if (ib.gt.0 .and. ib.le.nrow.and. kb.gt.0 .and. kb.le.nlay)
     *       NEIGHB(8,2)=IBOUND(J,IB,KB)
c
      DO N=2,8
      IF (NEIGHB(N,2).NE.0) NEIGHB(N,2)=1
      ENDDO
C
      DO 1050 N=2,8
C
C   IF NEIGHBOR IS ON BOUNDARY EDGE, SET INACTIVE
      IF (NEIGHB(N,1).EQ.-1) NEIGHB(N,2)=0
C
C   IF NEIGHBOR IS INTERIOR NODE, IBOUND CHECK IS SUFFICIENT
      IF (NEIGHB(N,1).LE.NODESS) GOTO 1050
C
C   IF NEIGHBOR IS ON BOUNDARY FACE OF ACTIVE CELL, SET ACTIVE
C
      IF ((N.EQ.2).OR.(N.EQ.4).OR.(N.EQ.5)) THEN
C   FACE OF CURRENT NODE IS ALWAYS ACTIVE
         NEIGHB(N,2)=1
         GOTO 1050
      ENDIF
C
C   IF NEIGHBOR 3, MUST BE FACE OF 2 OR 4
      IF (N.EQ.3) THEN
         NEIGHB(3,2)=1
         IF (NEIGHB(2,1).LE.NODESS) THEN
C   IF 2 IS INTERIOR, THEN FACE FOR 2
            IF (NEIGHB(2,2).EQ.0) THEN
C   IF 2 IS INACTIVE, SET BOUNDARY NODE INACTIVE
               NEIGHB(3,2)=0
               GOTO 1050
            ENDIF
         ELSE
C   MUST BE FACE OF 4
C   SEE IF INACTIVE
            IF (NEIGHB(4,2).EQ.0) THEN
               NEIGHB(3,2)=0
               GOTO 1050
            ENDIF
         ENDIF
         GOTO 1050
      ENDIF
C
C   IF NEIGHBOR 6, MUST BE FACE FOR 2 OR 5
      IF (N.EQ.6) THEN
         NEIGHB(6,2)=1
         IF (NEIGHB(2,1).LE.NODESS) THEN
            IF (NEIGHB(2,2).EQ.0) THEN
               NEIGHB(6,2)=0
               GOTO 1050
            ENDIF
         ELSE
            IF (NEIGHB(5,2).EQ.0) THEN
               NEIGHB(6,2)=0
               GOTO 1050
            ENDIF
         ENDIF
         GOTO 1050
      ENDIF
C
C   IF NEIGHBOR 7, MUST BE FACE FOR 3 OR 6 OR 8
      IF (N.EQ.7) THEN
         NEIGHB(7,2)=1
         IF (NEIGHB(3,1).LE.NODESS) THEN
            IF (NEIGHB(3,2).EQ.0) THEN
               NEIGHB(7,2)=0
               GOTO 1050
            ENDIF
         ELSE
            IF (NEIGHB(6,1).LE.NODESS) THEN 
               IF (NEIGHB(6,2).EQ.0) THEN
                  NEIGHB(7,2)=0
                  GOTO 1050
               ENDIF
            ELSE
               IF (NEIGHB(8,2).EQ.0) THEN
                  NEIGHB(7,2)=0
                  GOTO 1050
               ENDIF                                                             
            ENDIF
         ENDIF
         GOTO 1050
      ENDIF
C
C   MUST BE NEIGHBOR 8, AND MUST BE FACE FOR 4 OR 5
         NEIGHB(8,2)=1
         IF (NEIGHB(4,1).LE.NODESS) THEN
            IF (NEIGHB(4,2).EQ.0) THEN
               NEIGHB(8,2)=0
               GOTO 1050
            ENDIF
         ELSE
            IF (NEIGHB(5,2).EQ.0) THEN
               NEIGHB(8,2)=0
               GOTO 1050
            ENDIF
         ENDIF
1050      CONTINUE
C
      RETURN
      END
C
C**********************************************************************
C
      FUNCTION NBJ(M,N1,N2,NSROW)
C  FIND BOUNDARY FACE NUMBER IN J DIRECTION
                NBJ=2*NSROW*(N2-1)+2*N1-M
      END
C
      FUNCTION NBI(M,N1,N2,NSCOL,NSROW,NSLAY)
C  FIND BOUNDARY FACE NUMBER IN I DIRECTION
                NBI=2*NSROW*NSLAY+2*NSCOL*(N2-1)+2*N1-M
      END
C
      FUNCTION NBK(M,N1,N2,NSCOL,NSROW,NSLAY)
C  FIND BOUNDARY FACE NUMBER IN K DIRECTION
                NBK=2*(NSLAY*(NSROW+NSCOL)+NSCOL*(N2-1)+N1)-M
      END
C
      SUBROUTINE ELLOUT(CBNDY,DIAGO,RHSO,NONU,SAV,IDBNDY,RHS,RF,ibound,
     *          NSCOL,NSROW,NSLAY,NTFACE,NODESS,JRF,NFACES,POR,cnold,
     *          NCOL,NROW,NLAY,NRFLG)
C*************************************************************************
C  ELLOUT SOLVE FOR NEW CONCENTRATION ON OUTFLOW BOUNDARY
C         MOVE INFLOW/OUTFLOW BNDY MASS FROM NEW TIME INTEGRATION TO RHS
C         ACCUMULATE MASS REPRESENTED BY IN/OUT BNDY NODE FOR MASS BALANCE
C
C  ELLOUT READS IDBNDY TO DETERMINE OUTFLOW FACES, AND FOR EACH OUTFLOW
C  FACE SOLVES FOR CONCENTRATION=RHSO/DIAGO.
C***********************************************************************
C
      PARAMETER (PRECNO=5.D-7)
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION CBNDY(NTFACE),DIAGO(NTFACE),RHSO(NTFACE),
     *       RF(NSCOL,NSROW,NSLAY),IBOUND(NCOL,NROW,NLAY),
     *       NONU(2,32*NFACES),SAV(32*NFACES),RHS(NODESS),POR(NODESS),
     *       IDBNDY(NFACES),cnold(nodess)
C
C  DIAGO HOLDS DIAGONAL ENTRIES OF DIAGONAL MATRIX ON LHS OF OUTFLOW
C  EQUATION; RHSO HOLDS RHS OF OUTFLOW.
C
C  CBNDY CONTAINS CONCENTRATION AT EACH BOUNDARY FACE.
C
C  IDBNDY HAS ENTRY CORRESPONDING TO EACH CTCFLO ENTRY.
C  FOR EACH CTCFLO ENTRY,
C      IDBNDY(CTCFLO ID)= -FACE NBR       IF INFLOW
C                       =  FACE NBR       IF OUTFLOW
C                       =  0              IF NOFLOW
C  NONU IS 2 X NCOEF ARRAY HOLDING
C  NONU(1,N)=-NODE   ENTRY PERTAINS TO INFLOW FACE
C           = NODE   ENTRY PERTAINS TO OUTFLOW FACE, WHERE NODE IS THE 
C  EQUATION NUMBER ASSOCIATED WITH NONU ENTRY;
C  NONU(2,N)=BOUNDARY FACE NUMBER (INDEX INTO CBNDY) ASSOCIATED WITH 
C  NONU ENTRY.
C  EACH NONU ROW CORRESPONDS TO AN ENTRY IN THE VECTOR SAV, WHICH IS
C  CWGHT*VOLUME TO BE MULTIPLIED BY CONCENTRATION TO FORM A NEW TIME
C  LEVEL CONTRIBUTION TO THE RHS OF INTERIOR EQUATION NUMBER NODE.
C
C  BDYCL AND ELLCL BUILD NONU AND SAV EACH FIRST TRANSPORT TIME STEP
C  (IMOV=1) AND STORE THE NUMBER OF ENTRIES IN NCOEF. 
C
C  OUTFLOW BOUNDARY CONCENTRATIONS CAN CHANGE EACH TRANSPORT TIME STEP,
C  SO ELLOUT MUST ALWAYS BE CALLED, AFTER ALL MASS TRACKING FOR THE 
C  TIME STEP HAS BEEN COMPLETED (AFTER BDYINT AND ELLLHI CALLED FROM
C  MAIN).  
C
C  INFLOW BOUNDARY CONCENTRATIONS ARE OBTAINED FROM CBNDY.  INFLOW
C  CONCENTRATIONS ARE INITIALIZED TO CONCENTRATIONS AT CELL CENTER
C  (MOC5), THEN UPDATED TO THE (CONSTANT OVER FLOW TIME STEP) CINFL/RF
C  VALUES BY ELIUPD.  FOR MASS BALANCE TO WORK PROPERLY, THIS 
C  SUBROUTINE MUST BE CALLED BEFORE ELIUPD AT THE FIRST TRANSPORT TIME
C  STEP, SO THAT CBNDY STILL HAS INITIAL (OLD TIME LEVEL) VALUES FOR
C  INFLOW CONCENTRATION.
C**********************************************************************
C
       DO N=1,NFACES
          IF (IDBNDY(N).GT.0)
     *        CBNDY(IDBNDY(N))=RHSO(IDBNDY(N))/DIAGO(IDBNDY(N))
c                  
          if (IDBNDY(N).GT.0) then
           if (DIAGO(IDBNDY(N)).le.0.0)
     *     print *,'ellout divide by zero',
     *     RHSO(IDBNDY(N)),'/',DIAGO(IDBNDY(N)),n,IDBNDY(N)
          endif
c
       ENDDO
C
      IF (NRFLG.EQ.1) RETURN
C
      DO 200 N=1,NCOEF
      NODE=NONU(1,N)
C      
C   EACH ENTRY IS FOR INFLOW OR FOR OUTFLOW
C   IF ENTRY IS FOR INFLOW, NODE IS STORED AS NEGATIVE
C
c******************************************************************      
c  this is old, and replaced with next two lines. delete this.
c
c      IF (NODE) 10,10,20
C
C   INFLOW MASS
C
c10    NODE=-NODE
c      BMAS=CBNDY(NONU(2,N))*SAV(N)
c      GOTO 30
C
C   OUTFLOW MASS
C
c20    BMAS=CBNDY(NONU(2,N))*SAV(N)
C
c30    CONTINUE
c*******************************************************************
      NODE=ABS(NODE)
cgzh add ibound check (need to convert j from js etc, might need MOC common block)
      BMAS=CBNDY(NONU(2,N))*SAV(N)
      RHS(NODE)=RHS(NODE)-BMAS
C       
C   ACCUMULATE MASS REPRESENTED BY BNDY NODE FOR MASS BALANCE
C
      CBE = BMAS*POR(NODE)
      STMASS = STMASS + CBE
      IF (JRF.EQ.1) THEN
         JS = MOD(NODE-1,NSCOL)+1
         KS = (NODE -1)/(NSCOL*NSROW) + 1
         IS = (NODE-JS)/NSCOL-(KS-1)*NSROW+1
         ADMASS = ADMASS + CBE*RF(JS,IS,KS) - CBE
      ENDIF
C      
200   CONTINUE
C
      RETURN
      END
C
C*************************************************************************
C
      SUBROUTINE ELNUPD(CBNDY,LBNDY,
     *    CONC,NODESS,NTFACE,NFACES,NSCOL,NSROW,NSLAY)
C
C**********************************************************************
C  MOVE NOFLOW BOUNDARY CONCENTRATIONS TO SOLUTION VECTOR
C
C  ELNUPD USES LBNDY TABLE TO DETERMINE WHICH BOUNDARY FACES ARE 
C  NOFLOW, AND USES THE ASSOCIATED CELL CENTER NODE NUMBER STORED IN
C  LBNDY FOR NOFLOW FACES TO UPDATE THE CBNDY ENTRY WITH CURRENT
C  CONCENTRATION AT INTERIOR NODE.
C**********************************************************************
      DIMENSION CBNDY(NTFACE),LBNDY(NTFACE),CONC(NODESS)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
C**********************************************************************
C   FOR EACH BOUNDARY FACE,
C      LBNDY(FACE NBR)= -1       IF INFLOW            (CTCFLO>0)
C                     =  0       IF OUTFLOW           (CTCFLO<0)
C                     =CELL CENTER NODE NBR    IF NOFLOW
C                                        (CTCFLO=0, OR NO CTCFLO ENTRY)
C                     = -2       IF FACE OF INACTIVE CELL
C**********************************************************************
C
      DO 100 N=1,NTFACE
        IF (LBNDY(N).GT.0) CBNDY(N)=CONC(LBNDY(N))
100   CONTINUE
      RETURN 
      END
C
C**********************************************************************
C     ELIUPD
C**********************************************************************
C
      SUBROUTINE ELIUPD(CBNDY,IDBNDY,CTCFLO,LOCBDY,CINFL,NCINFL,RF,
     * IABOVE,IBELOW,CONC,NODESS,NTFACE,NFACES,NSCOL,NSROW,NSLAY,
     * NCOL,NROW,
     * CINFLA,CINFLB,CINXY)
C
C***********************************************************************
C   MOVE INFLOW BOUNDARY CONCENTRATIONS TO SOLUTION VECTOR
C
C   AT THE FIRST TRANSPORT TIME STEP, ELIUPD UPDATES INFLOW FACE 
C   ENTRIES IN CBNDY WITH INFLOW CONCENTRATIONS FROM CINFL.
C   ELIUPD MUST BE CALLED BEFORE ELLOUT FOR MASS BALANCE TO WORK
C   PROPERLY.
C***********************************************************************
C
cgzh cbdy
      DIMENSION CINFLA(NSCOL,NSROW),CINFLB(NSCOL,NSROW),
     *  CINXY(NSCOL,NSROW,NSLAY)
      DIMENSION CBNDY(NTFACE),IDBNDY(NFACES),CTCFLO(NFACES),
     *          LOCBDY(3,NFACES),CINFL(NCINFL),RF(NSCOL,NSROW,NSLAY),
     *          CONC(NODESS)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C
C
      DO 200 ID=1,NFACES
        IF (IDBNDY(ID).LT.0) THEN
          J=LOCBDY(1,ID)
          I=LOCBDY(2,ID)
          K=LOCBDY(3,ID)
            JS=J-ISCOL1+1
            IS=I-ISROW1+1
            KS=K-ISLAY1+1
C   DISOLVED SOLUTE CONCENTRATION ON BNDY IS CINFL/RF
C   IDTOP STORED IN ELLAM.INC BY SMOC5BY
          IF (ID.LT.IDTOP) THEN
            KS=K-ISLAY1+1
            CPRIME=CINXY(JS,IS,KS)
	ELSE
cgzh cbdy
            CPRIME=0.0
            IF (MOD(ID,2).EQ.0) THEN
              CPRIME=CINFLB(JS,IS)  
            ELSE
              CPRIME=CINFLA(JS,IS)  
            END IF
	ENDIF
          CBNDY(-IDBNDY(ID))=CPRIME
        ENDIF
200   CONTINUE        
C
C*************************************************************************
C
      RETURN
      END
C
C
C     ELLBDY BUILD BOUNDARY INTEGRALS 
C*************************************************************************
C
      SUBROUTINE ELLBDY(NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,
     *                 CINFL,RHS,RHSO,NODESS,IABOVE,IBELOW,NCINFL,
     *                 IDBNDY,CTCFLO,LOCBDY,LBNDY,DIAGO,NFACES,NTFACE,
     *                 VC,VR,VL,RF,
     *                 THCK,POR,IBOUND,
     *                 IOUTS,TIMV,TSTEP2,VCMAX,VRMAX,VLMAX,
     *                 DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *                 CINFLA,CINFLB,CINXY,
     *                 AGER8,SAGE)
C
C*************************************************************************
C
C  1.  BUILD LBNDY TABLE.  FOR EACH BOUNDARY FACE,
C      LBNDY(FACE NBR)= -1       IF INFLOW            (CTCFLO>0)
C                     =  0       IF OUTFLOW           (CTCFLO<0)
C                     =CELL CENTER NODE NBR    IF NOFLOW 
C                                             (CTCFLO=0, OR NO CTCFLO ENTRY)
C                     = -2       IF FACE OF INACTIVE CELL
C
C  2.  FOR EACH OUTFLOW BOUNDARY FACE, FIND VOL ACROSS FACE DURING TIME STEP:
C       DIAGO(FACE NBR)=-CTCFLO(ID)*TIMV
C
C  3.  FOR EACH INFLOW BOUNDARY FACE,
C      SPATIALLY DISCRETIZE FACE
C      FORWARD TRACK INTEGRATION POINT TO NEW TIME LEVEL
C      ADD INFLOW MASS TO RHS OF EQN FOR DESTINATION CELL OF FORW TRACKED POINT:
C      RHS(DEST NODE)=CINFL*CTCFLO/(POR*RF)*FRAC IN CELL*EXP(-DT*DECAY),
C                     INTEGRATED USING REFERENCE AREA AND TIME
C                     USING TRAP INTEGRATION RULE
C                    =MASS IN/POROSITY
C      RHSO          =MASS IN
C                     (DON'T DIVIDE OUT POROSITY)
C
C  4.  BUILD IDBNDY TABLE.  FOR EACH CTCFLO ENTRY,
C      IDBNDY(CTCFLO ID)= -FACE NBR       IF INFLOW
C                       =  FACE NBR       IF OUTFLOW
C                       =  0              IF NOFLOW
C
C*************************************************************************
C
C  BUILD LBNDY TABLE.  ENTRY FOR EACH BOUNDARY FACE.  FACE NUMBERING IS 
C  IDENTICAL TO CTCFLO ID NUMBERING FOR CASE WHERE TRANSPORT DOMAIN IS
C  STRICTLY WITHIN FLOW DOMAIN ON ALL SIDES: NUMBERING IS
C   XFACES, YFACES, ZFACES,
C   X IS LEFT, RIGHT ACROSS ROW THEN LAYER
C   Y IS BACK, FRONT ACROSS COL THEN LAYER
C   Z IS TOP, BOTTOM ACROSS COL THEN ROW
C
C  ID=INDEX INTO CTCFLO TABLE CONTAINING FLOW RATES FOR FACES
C        -  NOT ON BOUNDARY OF FLOW GRID
C        -  NOT IN OMITTED DIMENSION OF 1-DIM OR 2-DIM PROBLEM
C
C  LBNDY IS CONSTRUCTED FOR ALL CELL FACES, ONE DIRECTION AT A TIME
C
C  IDBNDY IS CONSTRUCTED FOR ALL CTCFLO ENTRIES, AS LBNDY IS BUILT
C
C  ISTRT=STARTING INDEX INTO LBNDY ARRAY FOR DIRECTION
C  IEND=ENDING INDEX INTO LBNDY ARRAY FOR DIRECTION
C  IPTR1,2=CELL CENTER NODE NUMBER FOR BOUNDARY CELL
C  IDEL=CELL CENTER NODE NBR INCREMENT BETWEEN BOUNDARY FACES
C  INCRE=NBR OF CELL FACES THIS DIRECTION 
C  NBRANCH=BRANCH ADDRESS POINTER FOR PROCESSING A DIRECTION 
C          FOR INFLOW MASS
C  LBRANCH=BRANCH ADDRESS FOR RETURN AFTER IN,OUT,NOFLOW EXECUTION
C************************************************************************
C
      DOUBLE PRECISION DECAY
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      dimension rhs(nodess),ctcflo(nfaces),cinfl(ncinfl)
cgzh cbdy
      DIMENSION CINFLA(NSCOL,NSROW),CINFLB(NSCOL,NSROW),
     * CINXY(NSCOL,NSROW,NSLAY)
C
      NSCR=NSCOL*NSROW
C
C  BUILD TABLES FOR EACH PARALLEL PAIR OF FACES
C
C  X FACES:
      ID=0
      ISTRT=1
      IEND=NSROW*NSLAY*2
      NBRANCH=1
      IDEL=NSCOL
      IPTR1=1
      IPTR2=NSCOL
      LIM1=ISCOL1
      LIM2=ISCOL2
      MAX=NCOL
      CALL BDYENT(ISTRT,IEND,LIM1,LIM2,ID,IPTR1,IPTR2,IDEL,
     *           MAX,NBRANCH,CTCFLO,LOCBDY,
     *           IDBNDY,NFACES,LBNDY,NTFACE,IABOVE,IBELOW,
     *           DIAGO,CINFL,NCINFL,CONCPR,NSCOL,NSROW,NSLAY,
     *           VC,VR,VL,RF,THCK,POR,IBOUND,NCOL,NROW,NLAY,
     *           IOUTS,TIMV,VCMAX,VRMAX,VLMAX,NODESS,RHS,RHSO,
     *           DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *           CINFLA,CINFLB,CINXY,
     *           AGER8,SAGE)
C
C  Y FACES
      DO 20 M=1,NSLAY
        ISTRT=IEND+1
        IEND=IEND+NSCOL*2
        NBRANCH=2
        IDEL=1
        IPTR1=1+NSCR*(M-1)
        IPTR2=NSCR*M-NSCOL+1
        LIM1=ISROW1
        LIM2=ISROW2
        MAX=NROW
        CALL BDYENT(ISTRT,IEND,LIM1,LIM2,ID,IPTR1,IPTR2,IDEL,
     *           MAX,NBRANCH,CTCFLO,LOCBDY,
     *           IDBNDY,NFACES,LBNDY,NTFACE,IABOVE,IBELOW,
     *           DIAGO,CINFL,NCINFL,CONCPR,NSCOL,NSROW,NSLAY,
     *           VC,VR,VL,RF,THCK,POR,IBOUND,NCOL,NROW,NLAY,
     *           IOUTS,TIMV,VCMAX,VRMAX,VLMAX,NODESS,RHS,RHSO,
     *           DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *           CINFLA,CINFLB,CINXY,
     *           AGER8,SAGE)
C
20    CONTINUE
C
C  Z FACES
      ISTRT=IEND+1
      IEND=IEND+NSCR*2
      NBRANCH=3
      IDEL=1
      IPTR1=1
      IPTR2=NSCR*(NSLAY-1)+1
      LIM1=ISLAY1
      LIM2=ISLAY2
      MAX=NLAY
      CALL BDYENT(ISTRT,IEND,LIM1,LIM2,ID,IPTR1,IPTR2,IDEL,
     *           MAX,NBRANCH,CTCFLO,LOCBDY,
     *           IDBNDY,NFACES,LBNDY,NTFACE,IABOVE,IBELOW,
     *           DIAGO,CINFL,NCINFL,CONCPR,NSCOL,NSROW,NSLAY,
     *           VC,VR,VL,RF,THCK,POR,IBOUND,NCOL,NROW,NLAY,
     *           IOUTS,TIMV,VCMAX,VRMAX,VLMAX,NODESS,RHS,RHSO,
     *           DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *           CINFLA,CINFLB,CINXY,
     *           AGER8,SAGE)
C
C
      RETURN
      END
C
C*******************************************************************************
*
C
      SUBROUTINE BDYENT(ISTRT,IEND,LIM1,LIM2,ID,IPTR1,IPTR2,IDEL,
     *           MAX,NBRANCH,CTCFLO,LOCBDY,
     *           IDBNDY,NFACES,LBNDY,NTFACE,IABOVE,IBELOW,
     *           DIAGO,CINFL,NCINFL,CONCPR,NSCOL,NSROW,NSLAY,
     *           VC,VR,VL,RF,THCK,POR,IBOUND,NCOL,NROW,NLAY,
     *           IOUTS,TIMV,VCMAX,VRMAX,VLMAX,NODESS,RHS,RHSO,
     *           DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *           CINFLA,CINFLB,CINXY,
     *           AGER8,SAGE)
C
C  UPDATES BOUNDARY ARRAYS LBNDY AND IDBNDY
C  CALCULATES DIAGO ENTRY FOR OUTFLOW FACES 
C  ENTRY IS WITH POINTERS SET
C  FOR X, Y, OR Z FACES
C*******************************************************************************
*
      DOUBLE PRECISION DECAY
cgzh cbdy
      DIMENSION CINFLA(NSCOL,NSROW),CINFLB(NSCOL,NSROW),
     * CINXY(NSCOL,NSROW,NSLAY)
      DIMENSION CTCFLO(NFACES),LBNDY(NTFACE),IDBNDY(NFACES),
     *         LOCBDY(3,NFACES),CINFL(NCINFL),DIAGO(NTFACE),
     *         IBOUND(NCOL,NROW,NLAY),RF(NSCOL,NSROW,NSLAY)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C
      DO 100 N1=ISTRT,IEND,2
        ASSIGN 15 TO LBRANCH
        N=N1
        IF (LIM1.GT.1) THEN
C
C  CTFLO ENTRY EXISTS, PROCESS OUT-, NO- OR INFLOW
          ID=ID+1
          IF (CTCFLO(ID)) 300,400,500
        ELSE 
C
C  FACES FOR WHICH NO CTCFLO ENTRY EXIST
C  (TRANSPORT SUBGRID ALIGNED WITH FLOW GRID BOUNDARY)
C  ARE NOFLOW FACES
          LBNDY(N)=IPTR1
C
C  IF CELL IS INACTIVE, INDICATE IN LBNDY
          JS=MOD(IPTR1-1,NSCOL)+1
          J=ISCOL1+JS-1
          KS=(IPTR1-1)/(NSCOL*NSROW)+1
          K=ISLAY1+KS-1
          IS=(IPTR1-JS)/NSCOL-(KS-1)*NSROW+1
          I=ISROW1+IS-1
          IF (IBOUND(J,I,K).EQ.0) LBNDY(N)=-2
        ENDIF
C
15    IPTR1=IPTR1+IDEL
      ASSIGN 25 TO LBRANCH
      N=N1+1 
C
      IF (LIM2.LT.MAX) THEN
        ID=ID+1
        IF (CTCFLO(ID)) 300,400,500
      ELSE
        LBNDY(N)=IPTR2
        JS=MOD(IPTR2-1,NSCOL)+1
        J=ISCOL1+JS-1
        KS=(IPTR2-1)/(NSCOL*NSROW)+1
        K=ISLAY1+KS-1
        IS=(IPTR2-JS)/NSCOL-(KS-1)*NSROW+1
        I=ISROW1+IS-1
        IF (IBOUND(J,I,K).EQ.0) LBNDY(N)=-2
      ENDIF
C
25      IPTR2=IPTR2+IDEL
      GOTO 100
C
C  FACES WITH CTCFLO ENTRY
C
C  OUTFLOW
C
300   LBNDY(N)=0
      IDBNDY(ID)=N
      DIAGO(N)=-CTCFLO(ID)*TIMV
      GOTO 200
C
C  NO FLOW
C
400   LBNDY(N)=(LOCBDY(3,ID)-ISLAY1)*NSROW*NSCOL
     *           +(LOCBDY(2,ID)-ISROW1)*NSCOL
     *           +LOCBDY(1,ID)-ISCOL1+1
C
C  IF CELL IS INACTIVE, INDICATE IN LBNDY
          JS=MOD(LBNDY(N)-1,NSCOL)+1
          J=ISCOL1+JS-1
          KS=(LBNDY(N)-1)/(NSCOL*NSROW)+1
          K=ISLAY1+KS-1
          IS=(LBNDY(N)-JS)/NSCOL-(KS-1)*NSROW+1
          I=ISROW1+IS-1
          IF (IBOUND(J,I,K).EQ.0) LBNDY(N)=-2
C
      IDBNDY(ID)=0
      GOTO 200
C
C  INFLOW
C
500   J=LOCBDY(1,ID)
      I=LOCBDY(2,ID)
      K=LOCBDY(3,ID)
C      
C   DISOLVED SOLUTE CONCENTRATION ON BNDY IS CINFL/RF
C   IDTOP IS PLACED IN ELLAM.INC BY SMOC5BY
C
      JS=J-ISCOL1+1
      IS=I-ISROW1+1
      KS=K-ISLAY1+1
      IF (ID.LT.IDTOP) THEN
         CPRIME=CINXY(JS,IS,KS)/RF(JS,IS,KS)
      ELSE
cgzh cbdy
            CPRIME=0.0
            IF (MOD(ID,2).EQ.0) THEN
              CPRIME=CINFLB(JS,IS)/RF(JS,IS,KS)  
            ELSE
              CPRIME=CINFLA(JS,IS)/RF(JS,IS,KS)  
            END IF
         END IF
cea
      AGEVOL=CTCFLO(ID)
      CONCPR=CPRIME*CTCFLO(ID)
      LBNDY(N)=-1
      IDBNDY(ID)=-N
C
cea IF (CONCPR.NE.0.0) GOTO(510,520,530),NBRANCH
      IF (AGEVOL.NE.0.0) GOTO(510,520,530),NBRANCH
cea
      GOTO 200
C
C X FACE
510   AREA=RINV*BINV
      XHAT=-.5
      ZHAT=-.5-HBINV
      DO 700 NXL=1,NSL
        ZHAT=ZHAT+BINV
C
C
        YHAT=-.5-HRINV
        DO 700 NXR=1,NSR
          YHAT =YHAT+RINV
C
C
          CALL BDYRHS(VC,VR,VL,RF,
     *           THCK,POR,IBOUND,
     *           NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *           IOUTS,TIMV,VCMAX,VRMAX,VLMAX,
     *           NODESS,LBNDY,NTFACE,CONCPR,AREA,
     *           J,I,K,XHAT,YHAT,ZHAT,RHS,RHSO,
     *           DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *           AGER8,AGEVOL,SAGE)
C
700    CONTINUE
      GOTO 200
C
C Y FACE
520   AREA=CINV*BINV
      YHAT=-.5
      ZHAT=-.5-HBINV
      DO 800 NYL=1,NSL
        ZHAT=ZHAT+BINV
C
C
        XHAT=-.5-HCINV
        DO 800 NYC=1,NSC
          XHAT=XHAT+CINV
C
          CALL BDYRHS(VC,VR,VL,RF,
     *           THCK,POR,IBOUND,
     *           NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *           IOUTS,TIMV,VCMAX,VRMAX,VLMAX,
     *           NODESS,LBNDY,NTFACE,CONCPR,AREA,
     *           J,I,K,XHAT,YHAT,ZHAT,RHS,RHSO,
     *           DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *           AGER8,AGEVOL,SAGE)
C
800   CONTINUE
      GOTO 200
C
C Z FACE
530   AREA=CINV*RINV
      ZHAT=-.5
      YHAT=-.5-HRINV
      DO 900 NZR=1,NSR
        YHAT=YHAT+RINV
C
C
        XHAT=-.5-HCINV
        DO 900 NZC=1,NSC
          XHAT=XHAT+CINV
C
C
          CALL BDYRHS(VC,VR,VL,RF,
     *           THCK,POR,IBOUND,
     *           NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *           IOUTS,TIMV,VCMAX,VRMAX,VLMAX,
     *           NODESS,LBNDY,NTFACE,CONCPR,AREA,
     *           J,I,K,XHAT,YHAT,ZHAT,RHS,RHSO,
     *           DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *           AGER8,AGEVOL,SAGE) 
900   CONTINUE
200   GOTO LBRANCH
C
100   CONTINUE
      RETURN
      END
C
C**************************************************************************
C
      SUBROUTINE BDYRHS(VC,VR,VL,RF,
     *           THCK,POR,IBOUND,
     *           NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *           IOUTS,TIMV,VCMAX,VRMAX,VLMAX,
     *           NODESS,LBNDY,NTFACE,CONCPR,AREA,
     *           J,I,K,XHAT,YHAT,ZHAT,RHS,RHSO,
     *           DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *           AGER8,AGEVOL,SAGE)
C**************************************************************************
C      FOR EACH INFLOW BOUNDARY FACE,
C      SPATIALLY DISCRETIZE FACE
C      FORWARD TRACK INTEGRATION POINT TO NEW TIME LEVEL
C      ADD INFLOW MASS TO RHS OF EQN FOR DESTINATION CELL OF FORW TRACKED POINT:
C      RHS(DEST NODE)=CINFL*CTCFLO/(POR*RF)*FRAC IN CELL*EXP(-DT*DECAY),
C                     INTEGRATED USING REFERENCE AREA AND TIME
C                     USING TRAP INTEGRATION RULE
C                    =MASS IN/POROSITY
C      RHSO          =MASS IN
C                     (DON'T DIVIDE OUT POROSITY)
C**************************************************************************      
C
      DOUBLE PRECISION FACT,DECAY
      DIMENSION TFVAL(8),NUMTF(8),NSCOORD(3,8)
      DIMENSION RHS(NODESS),RHSO(NTFACE),POR(NODESS),RF(NODESS)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      dimension thck(nodess)
C
      NSCR=NSCOL*NSROW
cea      PROD=CONCPR*AREA
      PC=J+XHAT
      PR=I+YHAT
      PL=K+ZHAT
C
C  FIND PARTIAL TIME INCREMENT, OVER WHICH TO TRACK, DECAY MASS 
      TINC=TIMV/NT
C
      DT=TIMV-tinc/2
      DO 100 N=1,NT
C
      PCMV=PC
      PRMV=PR
      PLMV=PL
      CALL ELMOVE(PCMV,PRMV,PLMV,VC,VR,VL,RF,
     *           THCK,POR,IBOUND,
     *           NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *           IOUTS,DT,TSTEP2,VCMAX,VRMAX,VLMAX,
     *           JSMV,ISMV,KSMV,JMV,IMV,KMV,NLOC,DELCOL,DELROW)
C
C   EVALUATE ALL NONZERO TEST FUNCTIONS AT FORWARD TRACKED POINT
C   AT NEW TIME LEVEL
C
c      noda=(ksmv-1)*nscol*nsrow+(ismv-1)*nscol+jsmv
      IF (NLOC.EQ.0) THEN
                CALL EVALTF(PCMV,PRMV,PLMV,TFVAL,IBOUND,
     *           NUMTF,JSMV,ISMV,KSMV,JMV,IMV,KMV,NCOL,NROW,NLAY,
     *           NSCOL,NSROW,NSLAY,NNZER,NSCOORD,THCK,XFOR,XBAC,
     *           YFOR,YBAC)
      ELSE
                CALL BNDYTF(PCMV,PRMV,PLMV,TFVAL,IBOUND,
     *           NUMTF,JSMV,ISMV,KSMV,JMV,IMV,KMV,NCOL,NROW,NLAY,
     *           NSCOL,NSROW,NSLAY,NODESS,NNZER,LBNDY,NTFACE,THCK,
     *           XFOR,XBAC,YFOR,YBAC)
      ENDIF
C
c      nnzer=1
c      tfval(1)=1d0
c      numtf(1)=noda
C
      TPROD=TINC*CONCPR*AREA
cea      TPROD=TINC*PROD
c      IF (N.EQ.1) TPROD=.5*TINC*PROD
C
C   IF DECAY IS NONZERO, THE FOLLOWING WILL YIELD DECAY FACTOR(<>1)
C   AND ACCUMULATE DECAYED MASS FOR MASS BALANCE
C
      FACT=DEXP(-DT*DECAY)
      SRCDCY=SRCDCY+(FACT*TPROD-TPROD)
cea
      SAGE=SAGE+AGER8*DT*AGEVOL*AREA/NT
C
C   IF AGER8 IS NONZERO, THE FOLLOWING WILL YIELD AGE CONSTANT
C   INDICATING HOW MUCH INFLOW AGES IN PARTIAL TIME INCREMENT
C      
      TMASS=FACT*TPROD + AGER8*DT*AGEVOL*AREA/NT

      DO 600 M=1,NNZER
C
      IF (NUMTF(M).LE.NODESS) THEN
         PRINV=1.D0/POR(NUMTF(M))
cea         RHS(NUMTF(M))=RHS(NUMTF(M))+FACT*TFVAL(M)*TPROD*PRINV

         RHS(NUMTF(M))=RHS(NUMTF(M))+TFVAL(M)*PRINV*TMASS
      ELSE
         RHSO(NUMTF(M)-NODESS)=RHSO(NUMTF(M)-NODESS)
cea     *                           +FACT*TFVAL(M)*TPROD

     *                           +TFVAL(M)*TMASS 

C
      ENDIF
600   CONTINUE
C
      DT=DT-TINC
100   CONTINUE
C
C  NOW DO SPATIAL POINTS WHICH ENTER SUBGRID AT TIME=NEW TIME,
C  AND THUS DON'T MOVE DURING THIS TIME STEP
c      JS=J-ISCOL1+1
c      IS=I-ISROW1+1
c      KS=K-ISLAY1+1
c      CALL EVALTF(PC,PR,PL,TFVAL,IBOUND,
c     *           NUMTF,JS,IS,KS,J,I,K,NCOL,NROW,NLAY,
c     *           NSCOL,NSROW,NSLAY,NNZER,NSCOORD,THCK,
c     *           XFOR,XBAC,YFOR,YBAC)
c      TPROD=.5*TINC*PROD
c      DO 601 M=1,NNZER
c      PRINV=1.D0/POR(NUMTF(M))
c      RHS(NUMTF(M))=RHS(NUMTF(M))+TFVAL(M)*TPROD*PRINV
c      if (NUMTF(M).eq.18) print *,'ellbdy inflo at 18'
601   CONTINUE
      RETURN
      END
