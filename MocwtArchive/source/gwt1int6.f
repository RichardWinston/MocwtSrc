C
      SUBROUTINE ELLLHI(IMOV,NSCOL,NSROW,NSLAY,
     *   NODESS,NCOL,NROW,NLAY,IBOUND,CNOLD,DIAGST,XFOR,
     *   YFOR,THCK,IACT,CFOR,RFOR,TFOR,CONLAY,VOL,DELCOL,DELROW,
     *   RHS,RHSO,LBNDY,NZIN,
     *                NTFACE,VC,VR,VL,RF,POR,TIMV,
     *                VCMAX,VRMAX,VLMAX,IOUTS,
     *                XBAC,YBAC,DECAY,NRFLG,DAGE)
C*****************************************************************
C  ELLLHI WORKS THROUGH INTERIOR OF TRANSPORT DOMAIN,
C  BUILDING RHS CONCENTRATION INTEGRALS FOR OLD TIME LEVEL
C  AND, IF FIRST TRANSPORT TIME STEP (IMOV=1),
C  BUILDING LHS STORAGE MATRIX.
C  (SEE DESCRIPTION OF RHS INTEGRATION IN BDYCR, AND STORAGE
C  MATRIX AND LHS INTEGRATION IN BDYCL)
C  STORAGE INTEGRALS AT OLD AND NEW TIME LEVELS ARE BOTH DONE
C  USING COMPOUND TRAPEZOIDAL RULE.  THIS RULE USES CONCENTRATION
C  VALUES AT OCTANT CORNERS, WHICH ARE DETERMINED FROM NODAL VALUES
C  USING TRILINEAR INPERPOLATION.  WEIGHTS FOR NODAL CONCENTRATIONS
C  ARE IDENTICAL FOR RHS AND LHS INTEGRAL, AND THUS ARE CALCULATED 
C  ONCE AND USED FOR BOTH PURPOSES.
C
C  THESE SUBROUTINES GO ONCE THROUGH THE INTERIOR OF THE TRANSPORT 
C  DOMAIN, TREATING EACH OCTANT CORNER ONE TIME ONLY, NOT AS A CORNER
C  OF EVERY NEIGHBORING CELL (AS BOUNDARY PROCESSING DOES).
C
C  PROCESSING IS DONE BY LAYER, AND WORKS ARRAYS ARE BUILT AS NEEDED
C  FOR A LAYER ONLY.  ALL COEFFICIENTS ARE CALCULATED FOR ONE LAYER
C  OF NODES, THE NEXT, AND THEN THE INTERMEDIATE DOMAIN.  THIS IS
C  BECAUSE WEIGHTS FOR OCTANT CORNERS IN HORIZONTAL PLANE WITH GRID 
C  NODES ARE CALCULATED DIFFERENTLY THAN FOR OCTANT CORNERS BETWEEN
C  NODES, AND THE NODAL PLANE INFORMATION IS NEEDED FOR THE 
C  INTERMEDIATE CALCULATIONS.
C
C  WORK ARRAYS ARE DESCRIBED IN THE SUBROUTINES WHICH BUILD THEM.
C***********************************************************************
C
      DOUBLE PRECISION DECAY
      DIMENSION NOCT(2,2,2)
      DIMENSION IBOUND(NCOL,NROW,NLAY),IACT(NSCOL,NSROW,2),
     *  CNOLD(NSCOL,NSROW,NSLAY),DIAGST(27,NSCOL,NSROW,NSLAY),
     *  CONLAY(2*NSCOL-1,2*NSROW-1,3),CFOR(NSCOL-1,NSROW,2),XFOR(NSCOL),
     *  VOL(NSCOL,NSROW,2),DELCOL(NCOL),DELROW(NROW),
     *  THCK(NSCOL,NSROW,NSLAY),NZIN(NODESS),RFOR(NSCOL,NSROW-1,2),
     *  YFOR(NSROW),TFOR(NSCOL,NSROW),RHS(NODESS),RHSO(NTFACE),
     *  POR(NODESS),LBNDY(NTFACE)

      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C      
C   INITIALIZE POINTERS FOR CONLAY, CFOR, RFORI, IACT ARRAYS
C   CONLAY ARRAY IS THREE DEEP, AND CURRENT INDEX TOGGLES BETWEEN
C   1 AND 3
C   CFOR, RFOR, VOL AND IACT ARRAYS ARE 2 DEEP, AND CURRENT INDEX TOGGLES 
C   BETWEEN 1 AND 2
C
      KCCUR=1
      KCLAS=3
      KFCUR=1
      KFLAS=2
C
C   PROCESS FIRST LAYER
      CALL CLAYER(IMOV,1,ISLAY1,NSCOL,NSROW,NSLAY,
     *   NCOL,NROW,NLAY,IBOUND,IACT,CNOLD,DIAGST,XFOR,CFOR,
     *   KCCUR,KFCUR,CONLAY,YFOR,RFOR,VOL,DELROW,DELCOL,THCK)
C
C   IF TRANSPORT DOMAIN HAS ONLY ONE LAYER, DONE
      IF (NSLAY.EQ.1) GOTO 100
      K=ISLAY1
      DO KS=2,NSLAY
         K =K+1
C
C   EXCHANGE POINTERS TO TOP AND BOTTOM OF CONLAY ARRAY
         KSAV =KCCUR
         KCCUR=KCLAS
         KCLAS=KSAV
C
C   EXCHANGE POINTERS TO TOP AND BOTTOM OF CFOR,RFOR ARRAYS
         KSAV =KFCUR
         KFCUR=KFLAS
         KFLAS=KSAV
C
C   PROCESS NEXT LAYER
         CALL CLAYER(IMOV,KS,K,NSCOL,NSROW,NSLAY,
     *   NCOL,NROW,NLAY,IBOUND,IACT,CNOLD,DIAGST,XFOR,CFOR,
     *   KCCUR,KFCUR,CONLAY,YFOR,RFOR,VOL,DELROW,DELCOL,THCK)
C
C   PROCESS INTERMEDIATE LAYER
         CALL BLAYER(IMOV,KS,NSCOL,NSROW,NSLAY,CONLAY,IACT,DIAGST,
     *    CFOR,RFOR,TFOR,THCK,CNOLD,XFOR,YFOR,
     *    KCCUR,KFCUR,KFLAS,VOL)
C
C   CONSTRUCT RHS INTEGRAL FOR LAYER BETWEEN KS AND KS+1
C
         IF(NRFLG.EQ.0) CALL ELLRHI(IACT,IBOUND,RHS,RHSO,CONLAY,
     *                  LBNDY,NZIN,KCCUR,KCLAS,KFCUR,KFLAS,KS,
     *                  NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *                  VC,VR,VL,RF,THCK,POR,TIMV,
     *                  VCMAX,VRMAX,VLMAX,IOUTS,NCOL,NROW,NLAY,VOL,
     *                  DELCOL,DELROW,XFOR,
     *                  XBAC,YFOR,YBAC,ICUR,DECAY,imov,DAGE)
C
      ENDDO
C
100   CONTINUE
      RETURN
      END
C
C******************************************************************
C
      SUBROUTINE CLAYER(IMOV,KS,K,NSCOL,NSROW,NSLAY,
     *   NCOL,NROW,NLAY,IBOUND,IACT,CNOLD,DIAGST,XFOR,CFOR,
     *   KCCUR,KFCUR,CONLAY,YFOR,RFOR,VOL,DELROW,DELCOL,THCK)
C**********************************************************************
C   CLAYER DIRECTS PROCESSING OF LAYER CONTAINING NODES.
C   ALL COEFFICIENTS ARE CALCULATED FOR ONE ROW OF NODES, THE NEXT, AND
C   THEN THE INTERMEDIATE DOMAIN.  THIS IS BECAUSE WEIGHTS FOR OCTANT 
C   CORNERS IN ROW WITH GRID NODES ARE CALCULATED DIFFERENTLY THAN FOR 
C   OCTANT CORNERS BETWEEN NODES, AND THE NODAL ROW INFORMATION IS 
C   NEEDED FOR THE INTERMEDIATE CALCULATIONS.
C
      DIMENSION IBOUND(NCOL,NROW,NLAY),IACT(NSCOL,NSROW,2),
     *  CNOLD(NSCOL,NSROW,NSLAY),DIAGST(27,NSCOL,NSROW,NSLAY),
     *  CONLAY(2*NSCOL-1,2*NSROW-1,3),CFOR(NSCOL-1,NSROW,2),XFOR(NSCOL),
     *  VOL(NSCOL,NSROW,2),DELCOL(NCOL),DELROW(NROW),
     *  THCK(NSCOL,NSROW,NSLAY),RFOR(NSCOL,NSROW-1,2),
     *  YFOR(NSROW)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
C
C   PROCESS FIRST ROW
      CALL CROW(IMOV,1,KS,ISROW1,K,NSCOL,NSROW,NSLAY,
     *   NCOL,NROW,NLAY,IBOUND,IACT,CNOLD,DIAGST,XFOR,CFOR,
     *   CONLAY,KCCUR,KFCUR,VOL,DELROW,DELCOL,THCK)
C
C   IF TRANSPORT DOMAIN HAS ONLY ONE ROW, DONE
      IF (NSROW.EQ.1) GOTO 100
      I=ISROW1
      DO IS=2,NSROW
         I=I+1
C
C   PROCESS NEXT ROW
         CALL CROW(IMOV,IS,KS,I,K,NSCOL,NSROW,NSLAY,
     *   NCOL,NROW,NLAY,IBOUND,IACT,CNOLD,DIAGST,XFOR,CFOR,
     *   CONLAY,KCCUR,KFCUR,VOL,DELROW,DELCOL,THCK)
C
C   PROCESS INTERMEDIATE ROW
         CALL HFACED(IMOV,IS,KS,NSCOL,NSROW,NSLAY,CONLAY,IACT,
     *    DIAGST,YFOR,
     *    CFOR,RFOR,CNOLD,XFOR,
     *    KCCUR,KFCUR,VOL)
C
      ENDDO
C
100   RETURN
      END
C
C**********************************************************************
C
      SUBROUTINE CROW(IMOV,IS,KS,I,K,NSCOL,NSROW,NSLAY,
     *   NCOL,NROW,NLAY,IBOUND,IACT,CNOLD,DIAGST,XFOR,CFOR,
     *   CONLAY,KCCUR,KFCUR,VOL,DELROW,DELCOL,THCK)
C**********************************************************************
C  PROCESS ROW BY TREATING NODE, NEXT ONE, THEN OCTANT CORNER ON CELL 
C  FACE BETWEEN NODES.  IACT, CFOR AND VOL ENTRIES ARE CALCULATED FOR 
C  USE BY THIS OTHER SUBROUTINES.  
C  CONCENTRATION VALUES AT OCTANT CORNERS AT NODES AND INTERMEDIATE
C  CELLS FACES ARE CALCULATED, AND STORED IN CONLAY.
C  LSH STORAGE COEFFICIENTS ALONG CENTER TRIDIAGONAL ARE CALCULATED
C  AND STORED IN DIAGST.
C**********************************************************************
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION IBOUND(NCOL,NROW,NLAY),IACT(NSCOL,NSROW,2),
     *  CNOLD(NSCOL,NSROW,NSLAY),DIAGST(27,NSCOL,NSROW,NSLAY),
     *  CONLAY(2*NSCOL-1,2*NSROW-1,3),CFOR(NSCOL-1,NSROW,2),XFOR(NSCOL),
     *  VOL(NSCOL,NSROW,2),DELCOL(NCOL),DELROW(NROW),
     *  THCK(NSCOL,NSROW,NSLAY)
C***********************************************************************
C  IACT HOLDS ACTIVE VALUE FOR EACH NODE IN TWO NODAL LAYERS
C  IACT=1  FOR ACTIVE CELL
C      =0  FOR INACTIVE CELL
C  IT IS INDEXED BY COL AND ROW COORDS OF NODE, AND CURRENT LAYER
C  POINTER.
C  IACT IS BUILT FROM IBOUND FOR THE PUROSE OF HAVE ACTIVE VALUES FOR 
C  COMPUTATION, THUS AVOIDING LOTS AND LOTS OF IF STATEMENTS
C
C  CONLAY HOLDS OLD TIME LEVEL CONCENTRATIONS FOR EACH OCTANT CORNER
C  IN NODAL LAYER, NEXT NODAL LAYER AND INTERMEDIATE DOMAIN.  
C  IT IS INDEXED BY OCTANT NUMBER IN COL DIRECTION, OCTANT NUMBER IN 
C  ROW DIRECTION, AND MIDDLE OR CURRENT LAYER POINTER.
C  CONLAY IS BUILT FROM WEIGHTS CALCULATED FOR LFS/RHS TRILINEAR
C  INTERPOLATION OF CONCENTRATION AT OCTANT CORNERS, AND OLD TIME
C  LEVEL CONCENTRATION VALUES IN CNOLD.
C  CONLAY IS USED TO SUPPLY OCTANT CORNER CONCENTRATION VALUES TO
C  ROUTINE FINDING INTERPOLATED VALUES OF CONCENTRATION AT INTEGRATION
C  POINTS FOR RHS STORAGE CALCULATIONS.
C
C  CFOR HOLDS PRODUCT OF COL SCALING RATIO IN FORWARD DIRECTION AND
C  ACTIVE STATUS FOR CELLS IN NODAL LAYER AND NEXT NODAL LAYER.
C  IT IS INDEXED BY COL, ROW AND CURRENT LAYER POINTER.
C  IT IT USED FOR SCALING IN CASE OF NONUNIFORM GRID, AND COMBINES
C  INFORMATION FROM XFOR AND IBOUND TO AVOID ACCESS OF TWO ARRAYS
C  AND LOGICAL DELIBERATION EACH TIME THAT INFORMATION IS NEEDED.  
C
C  VOL HOLDS VOLUME OF SUBCELL FOR EACH CELL IN NODAL LAYER AND NEXT
C  NODAL LAYER.
C  VOL= (1/8)*COL WIDTH*ROW WIDTH*THICKNESS   FOR ACTIVE CELL
C     = 0                                     FOR INACTIVE CELL
C  IT IS INDEXED BY COL AND ROW COORDINATES, AND CURRENT LAYER POINTER. 
C  (NOTE, THIS IS SUBCELL VOL. RHS VOLS CALCULATED
C  FROM THIS USING NSC, NSR AND NSL.  LHS VOLS ALSO ADJUSTED AS NEEDED)
C**********************************************************************
C
C
C  TRANSPORT ACTIVE ARRAY ENTRY FOR FIRST NODE IN ROW
      IACT(1, IS,KFCUR)=1
      IF (IBOUND(ISCOL1,I,K).EQ.0) IACT(1, IS,KFCUR)=0
C
C   ROW NUMBER FOR CONLAY ARRAY
      IROW=2*IS-1
C
C   FIRST NODE
      CONLAY(1,IROW,KCCUR)=CNOLD(1, IS, KS)
      VOL(1, IS,KFCUR)   =DELCOL(ISCOL1)* DELROW(I)* THCK(1, IS, KS)*
     *                    IACT(1, IS,KFCUR)* 0.125D0 
      IF (IMOV.EQ.1) DIAGST(14,1, IS, KS) =DIAGST(14,1, IS, KS)
     *                   +VOL(1, IS,KFCUR)
C
C   FIND CONLAY AND DIAGST FOR NODES AND FACES ALONG ROW
C
      IF (NSCOL.EQ.1) GOTO 100
      DO JS=1,NSCOL-1
         JJS=JS+1
         JSTIM2=2*JS
C
C   BUILD TRANSPORT ACTIVE ARRAY
         IACT(JJS, IS,KFCUR)=1
         IF (IBOUND(JS+ISCOL1,I,K).EQ.0) IACT(JJS, IS,KFCUR)=0
C
C   NODES
         CONLAY(JSTIM2+1,IROW,KCCUR)=CNOLD(JJS, IS, KS)
         VOL(JJS, IS,KFCUR)=DELCOL(ISCOL1+JS)* DELROW(I)* 
     *                      THCK(JJS, IS, KS)* IACT(JJS, IS,KFCUR)*
     *                      0.125D0 
         IF (IMOV.EQ.1) DIAGST(14,JJS, IS, KS)=
     *                  DIAGST(14,JJS, IS, KS)+ VOL(JJS, IS,KFCUR)
C
C   FACES
C
C   FORWARD WGHT IN COL DIRECTION FOR NODE AT JS,IS,KS
C   IF NODES ARE 
C   ACTIVE,ACTIVE     WEIGHT USING XFOR
C   ACTIVE,INACTIVE   ALL WEIGHT ON FIRST
C   INACTIVE, ACTIVE  ALL WEIGHT ON SECOND  
C   INACTIVE,INACTIVE NO WEIGHT ON EITHER
C        CFOR=             C1=
C   AA        XFOR            1-XFOR
C   AI        0               1
C   IA        1               0
C   II        0               0
C
         CFOR(JS, IS,KFCUR)=IACT(JJS, IS,KFCUR)*MAX(XFOR(JS),
     *                       REAL(1-IACT(JS, IS,KFCUR)))
C
         C1=IACT(JS, IS,KFCUR)*(1-CFOR(JS, IS,KFCUR))
         CONLAY(JSTIM2,IROW,KCCUR)=CFOR(JS, IS,KFCUR)*CNOLD(JJS, IS, KS)
     *                           +C1*CNOLD(JS, IS, KS)
C
         IF (IMOV.EQ.1) THEN
            VOLL=VOL( JS, IS,KFCUR)*0.5D0
            VOLC=VOL(JJS, IS,KFCUR)*0.5D0
C
C   NODE (JS,IS,KS)  IS CURR LAY, CURR ROW, CURR COL
C   NODE (JJS,IS,KS) IS CURR LAY, CURR ROW, NEXT COL
C   FOR EQN (JS,IS,KS)                                 
C
            DIAGST(14, JS, IS, KS)=DIAGST(14, JS, IS, KS)+C1*VOLL               
            DIAGST(15, JS, IS, KS)=DIAGST(15, JS, IS, KS)
     *                            +CFOR(JS, IS,KFCUR)*VOLL               
C
C   NODE (JS,IS,KS)  IS CURR LAY, CURR ROW, PREV COL
C   NODE (JJS,IS,KS) IS CURR LAY, CURR ROW, CURR COL
C   FOR EQN (JJS,IS,KS)
C
            DIAGST(13,JJS, IS, KS)=DIAGST(13,JJS, IS, KS)+C1*VOLC                
            DIAGST(14,JJS, IS, KS)=DIAGST(14,JJS, IS, KS)
     *                            +CFOR(JS, IS,KFCUR)*VOLC
         ENDIF
C
      ENDDO
C
100   RETURN
      END
C
C**********************************************************************
C
      SUBROUTINE HFACED(IMOV,IS,KS,NSCOL,NSROW,NSLAY,
     *    CONLAY,IACT,DIAGST,YFOR,
     *    CFOR,RFOR,CNOLD,XFOR,
     *    KCCUR,KFCUR,VOL)
C**********************************************************************
C  PROCESS ROW BY TREATING THE OCTANT CORNER ON THE FACE BETWEEN NODES,
C  IN ADJACENT ROWS, THE NEXT ONE, THEN OCTANT CORNER ON VERTICAL CELL 
C  EDGES BETWEEN FACES. IACT, CFOR, RFOR AND VOL ENTRIES ARE CALCULATED 
C  FOR USE BY THIS OTHER SUBROUTINES.
C  CONCENTRATION VALUES AT OCTANT CORNERS AT X FACES AND INTERMEDIATE
C  CELL VERTICAL EDGES ARE CALCULATED, AND STORED IN CONLAY.
C  LSH STORAGE COEFFICIENTS ALONG CENTER THREE TRIDIAGONALS ARE 
C  CALULATED, AND STORED IN DIAGST.
C**********************************************************************
C
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION CONLAY(2*NSCOL-1,2*NSROW-1,3),IACT(NSCOL,NSROW,2),
     *     DIAGST(27,NSCOL,NSROW,NSLAY),RFOR(NSCOL,NSROW-1,2),
     *     YFOR(NSROW),
     *     CFOR(NSCOL-1,NSROW,2),CNOLD(NSCOL,NSROW,NSLAY),
     *     VOL(NSCOL,NSROW,2),XFOR(NSCOL)
C**********************************************************************
C  ALL ARRAYS DESCRIBED PREVIOUSLY EXCEPT RFOR.
C  RFOR IS ROW DIRECTION ANALOG OF CFOR.
C**********************************************************************
C
C  INITIALIZE INDICES
      IIS=IS-1
      IISTIM2=2*IIS
C
C   FIRST FACE
C
C   FORWARD WGHT IN ROW DIRECTION FOR NODE AT JS,IS,KS
C   IF NODES ARE
C   ACTIVE,ACTIVE     WEIGHT USING YFOR
C   ACTIVE,INACTIVE   ALL WEIGHT ON FIRST
C   INACTIVE, ACTIVE  ALL WEIGHT ON SECOND
C   INACTIVE,INACTIVE NO WEIGHT ON EITHER
C        RFOR=             R1=
C   AA        YFOR            1-YFOR
C   AI        0               1
C   IA        1               0
C   II        0               0
C
      RFOR(1,IIS,KFCUR)=IACT(1, IS,KFCUR)*MAX(YFOR(IIS),
     *              REAL(1-IACT(1,IIS,KFCUR)))
      R1=IACT(1,IIS,KFCUR)*(1-RFOR(1,IIS,KFCUR))
      CONLAY(1,IISTIM2,KCCUR)=RFOR(1,IIS,KFCUR)*CNOLD(1, IS, KS)
     *                      +R1*CNOLD(1,IIS, KS)
C
      IF (IMOV.EQ.1) THEN
       VOLL=VOL(  1,IIS,KFCUR)*0.5D0
       VOLC=VOL(  1, IS,KFCUR)*0.5D0
C
C  NODE (1,IIS,KS) IS CURR LAY,CURR ROW,CURR COL
C  NODE (1, IS,KS) IS CURR LAY,NEXT ROW,CURR COL
C  FOR EQN (1,IIS,KS)
       DIAGST(14,1,IIS, KS)=DIAGST(14,1,IIS, KS)+ R1               *VOLL
       DIAGST(17,1,IIS, KS)=DIAGST(17,1,IIS, KS)+ RFOR(1,IIS,KFCUR)*VOLL
C
C  NODE (1,IIS,KS) IS CURR LAY,PREV ROW,CURR COL
C  NODE (1, IS,KS) IS CURR LAY,CURR ROW,CURR COL
C  FOR EQN (1, IS,KS)
       DIAGST(11,1, IS, KS)=DIAGST(11,1, IS, KS)+ R1               *VOLC
       DIAGST(14,1, IS, KS)=DIAGST(14,1, IS, KS)+ RFOR(1,IIS,KFCUR)*VOLC
      ENDIF
C
      IF (NSCOL.EQ.1) GOTO 100
      DO JS=1,NSCOL-1
         JJS=JS+1
         JSTIM2=2*JS
C
C   FORWARD WGHT IN ROW DIRECTION FOR NODE AT JS,IS,KS
C   IF NODES ARE
C   ACTIVE,ACTIVE     WEIGHT USING YFOR
C   ACTIVE,INACTIVE   ALL WEIGHT ON FIRST
C   INACTIVE, ACTIVE  ALL WEIGHT ON SECOND
C   INACTIVE,INACTIVE NO WEIGHT ON EITHER
C        RFOR=            RR1=
C   AA        YFOR            1-YFOR
C   AI        0               1
C   IA        1               0
C   II        0               0
C
         RFOR(JJS,IIS,KFCUR)=IACT(JJS, IS,KFCUR)*MAX(YFOR(IIS),
     *                  REAL(1-IACT(JJS,IIS,KFCUR)))
C
C   FACES
C
         RR1=IACT(JJS,IIS,KFCUR)*(1-RFOR(JJS,IIS,KFCUR))
         CONLAY(JSTIM2+1,IISTIM2,KCCUR)=RFOR(JJS,IIS,KFCUR)*
     *                                 CNOLD(JJS, IS, KS)
     *                                +RR1*CNOLD(JJS,IIS, KS)
C
C   EDGES AND FACES  
C   AT EDGES, INTERPOLATE BETWEEN ACTIVE AMONG 4 NODES 
C
C   CALCULATE WEIGHTS, ASSUMING ALL CELLS ACTIVE
      P1  = (1.D0-YFOR(IIS)) * (1.D0-XFOR(JS))
      P2  = (1.D0-YFOR(IIS)) *       XFOR(JS)
      P3  =       YFOR(IIS)  * (1.D0-XFOR(JS))
      P4  =       YFOR(IIS)  *       XFOR(JS)
C
      IA  = IACT( JS,IIS,KFCUR) * IACT(JJS,IIS,KFCUR) *
     *      IACT( JS, IS,KFCUR) * IACT(JJS, IS,KFCUR)
C
C  IF NO CELLS INACTIVE, SKIP THE NEXT
      IF (IA) 250,250,300
C
C   AT LEAST ONE INACTIVE CELL
250   CONTINUE
C
C  FIND TOTAL ACTIVE WEIGHT
      SUMA = IACT( JS,IIS,KFCUR)*P1 + IACT(JJS,IIS,KFCUR)*P2
     *     + IACT( JS, IS,KFCUR)*P3 + IACT(JJS, IS,KFCUR)*P4
C
C   IF ALL CELLS INACTIVE, GOTO NEXT
      IF (SUMA.EQ.0.D0) GOTO 350
C
C  DISTRUBUTE INACTIVE WEIGHT PROPORTIONALLY AMONG ACTIVE NODES
      SUMI = 1.D0 - SUMA
      FACT = 1/SUMA
      P1   = IACT( JS,IIS,KFCUR) * P1 * FACT
      P2   = IACT(JJS,IIS,KFCUR) * P2 * FACT
      P3   = IACT( JS, IS,KFCUR) * P3 * FACT
      P4   = IACT(JJS, IS,KFCUR) * P4 * FACT
C
C   NO CELLS INACTIVE OR ALREADY ADJUSTED WEIGHTS FOR INACTIVE
300   CONTINUE
         CONLAY(JSTIM2,IISTIM2,KCCUR)= P1*CNOLD( JS,IIS, KS)
     *                                +P2*CNOLD(JJS,IIS, KS)
     *                                +P3*CNOLD( JS, IS, KS)
     *                                +P4*CNOLD(JJS, IS, KS)
C        
      IF (IMOV.EQ.1) THEN
         RR12=2*RR1
         RFOR2=2*RFOR(JJS,IIS,KFCUR)
         VOL1=VOL( JS,IIS,KFCUR)*0.25D0
         VOL2=VOL(JJS,IIS,KFCUR)*0.25D0
         VOL3=VOL( JS, IS,KFCUR)*0.25D0
         VOL4=VOL(JJS, IS,KFCUR)*0.25D0
         DIAGST(14, JS,IIS, KS)= DIAGST(14, JS,IIS, KS)+ P1*VOL1
         DIAGST(15, JS,IIS, KS)= DIAGST(15, JS,IIS, KS)+ P2*VOL1
         DIAGST(17, JS,IIS, KS)= DIAGST(17, JS,IIS, KS)+ P3*VOL1
         DIAGST(18, JS,IIS, KS)= DIAGST(18, JS,IIS, KS)+ P4*VOL1
C        
         DIAGST(13,JJS,IIS, KS)= DIAGST(13,JJS,IIS, KS)+  P1       *VOL2
         DIAGST(14,JJS,IIS, KS)= DIAGST(14,JJS,IIS, KS)+ (P2+RR12) *VOL2
         DIAGST(16,JJS,IIS, KS)= DIAGST(16,JJS,IIS, KS)+  P3       *VOL2
         DIAGST(17,JJS,IIS, KS)= DIAGST(17,JJS,IIS, KS)+ (P4+RFOR2)*VOL2
C         
         DIAGST(11, JS, IS, KS)= DIAGST(11, JS, IS, KS)+ P1*VOL3
         DIAGST(12, JS, IS, KS)= DIAGST(12, JS, IS, KS)+ P2*VOL3
         DIAGST(14, JS, IS, KS)= DIAGST(14, JS, IS, KS)+ P3*VOL3
         DIAGST(15, JS, IS, KS)= DIAGST(15, JS, IS, KS)+ P4*VOL3
C
         DIAGST(10,JJS, IS, KS)= DIAGST(10,JJS, IS, KS)+  P1       *VOL4
         DIAGST(11,JJS, IS, KS)= DIAGST(11,JJS, IS, KS)+ (P2+RR12) *VOL4
         DIAGST(13,JJS, IS, KS)= DIAGST(13,JJS, IS, KS)+  P3       *VOL4
         DIAGST(14,JJS, IS, KS)= DIAGST(14,JJS, IS, KS)+ (P4+RFOR2)*VOL4
      ENDIF
C        
350      CONTINUE
         R1=RR1
      ENDDO
C
100   RETURN
      END
C
C*********************************************************************
C
      SUBROUTINE BLAYER(IMOV,KS,NSCOL,NSROW,NSLAY,CONLAY,IACT,DIAGST,
     *    CFOR,RFOR,TFOR,THCK,CNOLD,XFOR,YFOR,
     *    KCCUR,KFCUR,KFLAS,VOL)
C**********************************************************************
C  BLAYER DIRECTS CALCULATIONS FOR OCTANT CORNERS IN PLANE BETWEEN TWO
C  NODAL LAYERS
C**********************************************************************
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION IACT(NSCOL,NSROW,2),
     *  CNOLD(NSCOL,NSROW,NSLAY),DIAGST(27,NSCOL,NSROW,NSLAY),
     *  CONLAY(2*NSCOL-1,2*NSROW-1,3),CFOR(NSCOL-1,NSROW,2),XFOR(NSCOL),
     *  VOL(NSCOL,NSROW,2),YFOR(NSROW),
     *  THCK(NSCOL,NSROW,NSLAY)
      DIMENSION RFOR(NSCOL,NSROW-1,2),TFOR(NSCOL,NSROW)
C
C   FIRST ROW
C   OCTANT CORNERS ON FACES AND EDGES
      CALL VFACED(IMOV,1,KS,NSCOL,NSROW,NSLAY,CONLAY,IACT,DIAGST,
     *    XFOR,CFOR,RFOR,TFOR,THCK,CNOLD,
     *    KCCUR,KFCUR,KFLAS,VOL)
C
      IF (NSROW.EQ.1) GOTO 100
      I=ISROW1
      DO IS=2,NSROW
         I=I+1
C
C   FACE-EDGE ROW
         CALL VFACED(IMOV,IS,KS,NSCOL,NSROW,NSLAY,CONLAY,IACT,DIAGST,
     *    XFOR,CFOR,RFOR,TFOR,THCK,CNOLD,
     *    KCCUR,KFCUR,KFLAS,VOL)
C
C   EDGE-CORNER ROW
         CALL EDGCOR(IMOV,IS,KS,NSCOL,NSROW,NSLAY,CONLAY,IACT,DIAGST,
     *                  CFOR,RFOR,TFOR,CNOLD,YFOR,XFOR,THCK,
     *                  KFLAS,KFCUR,VOL)
C
      ENDDO
C
100   RETURN
      END
C
C**********************************************************************
C
      SUBROUTINE VFACED(IMOV,IS,KS,NSCOL,NSROW,NSLAY,CONLAY,IACT,DIAGST,
     *   XFOR,CFOR,RFOR,TFOR,THCK,CNOLD,
     *    KCCUR,KFCUR,KFLAS,VOL)
C**********************************************************************
C  VFACED PERFORMS CALCULATIONS FOR OCTANT CORNERS IN PLANE BETWEEN TWO
C  NODAL LAYERS, WHERE CORNERS LIE ALONG ROW OF ALTERNATING 
C  (HORIZONTAL) CELL FACES AND Y EDGES.  THIS ROUTINE IS LIKE HFACED,
C  EXCEPT, HERE, FACE OCTANT CORNERS ARE INTERPOLATED FROM NODES ABOVE
C  AND BELOW, AND EDGE WEIGHTS ARE INERPOLATED FROM NODES LYING IN A 
C  VERTICAL PLANE.  WEIGHTING IS EVEN TRICKIER THAN IN HORIZONTAL 
C  PLANE, SINCE EACH CELL MAY HAVE A DIFFERENT THICKNESS.  
C  INTERPOLATION BETWEEN TWO NODES ON A VERTICAL AXIS IS DONE IN THE 
C  USUAL WAY.  INTERPOLATION AT AN EDGE BETWEEN FOUR CELLS IS DONE BY
C  INTERPOLATING VERTICALLY AT EACH FACE, THEN ASSUMING FACE POINTS LIE
C  IN A HORIZONTAL PLANE, AND INTERPOLATING HORIZONTALLY BETWEEN THEM.
C**********************************************************************
C
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION CONLAY(2*NSCOL-1,2*NSROW-1,3),IACT(NSCOL,NSROW,2),
     *     DIAGST(27,NSCOL,NSROW,NSLAY),RFOR(NSCOL,NSROW-1,2),
     *     CNOLD(NSCOL,NSROW,NSLAY),
     *     CFOR(NSCOL-1,NSROW,2),THCK(NSCOL,NSROW,NSLAY),
     *     TFOR(NSCOL,NSROW),VOL(NSCOL,NSROW,2),XFOR(NSCOL)
C**********************************************************************
C   TFOR HOLDS IACT AND FORWARD WEIGHTING RATIO IN LAY DIRECTION FOR
C   LAYER.
C   IT IS INDEXED BY COL AND ROW COORDINATES.
C********************************************************************** 
      ISTIM2=2*IS
      IIS=IS-1
      KKS=KS-1
C
C   FIRST FACE
C
C   FORWARD WGHT IN LAY DIRECTION FOR NODE AT JS,IS,KS
C   IF NODES ARE
C   ACTIVE,ACTIVE     WEIGHT USING YFOR
C   ACTIVE,INACTIVE   ALL WEIGHT ON FIRST
C   INACTIVE, ACTIVE  ALL WEIGHT ON SECOND
C   INACTIVE,INACTIVE NO WEIGHT ON EITHER
C        TFOR=             T1=
C   AA        TH              1-TH  
C   AI        0               1
C   IA        1               0
C   II        0               0
C
C  USE TH TO GET FORWARD RATIO IN LAY DIRECTION.  EACH CELL MAY HAVE 
C  DIFFERENT THICKNESS, SO THERE ARE TOO MANY TO STORE.
      TK=TH(0,0,1,1, IS,KKS,THCK,NSCOL,NSROW,NSLAY)
      TFOR(1, IS)=IACT(1, IS,KFCUR)*
     *   MAX(TK, REAL(1-IACT(1, IS,KFLAS)))
      T1=IACT(1, IS,KFLAS)*(1-TFOR(1, IS))
      CONLAY(1, ISTIM2-1,2)=TFOR(1, IS)*CNOLD(1, IS, KS)
     *                    +T1*CNOLD(1, IS,KKS)
C
      IF (IMOV.EQ.1) THEN
         VOLL=VOL(  1, IS,KFLAS)*0.5D0
         VOLC=VOL(  1, IS,KFCUR)*0.5D0
         DIAGST(14,1, IS,KKS)=DIAGST(14,1, IS,KKS)+ T1         *VOLL
         DIAGST(23,1, IS,KKS)=DIAGST(23,1, IS,KKS)+ TFOR(1, IS)*VOLL
         DIAGST( 5,1, IS, KS)=DIAGST( 5,1, IS, KS)+ T1         *VOLC
         DIAGST(14,1, IS, KS)=DIAGST(14,1, IS, KS)+ TFOR(1, IS)*VOLC
      ENDIF
C
      IF (NSCOL.EQ.1) GOTO 100
      DO JS=1,NSCOL-1
         JJS=JS+1
         JSTIM2=2*JS
         TTK   =TH(0,0,1,JJS, IS,KKS,THCK,NSCOL,NSROW,NSLAY)
         TFOR(JJS, IS)=IACT(JJS, IS,KFCUR)*
     *                MAX(TTK, REAL(1-IACT(JJS, IS,KFLAS)))
C
C   FACES
C
         TT1=IACT(JJS, IS,KFLAS)*(1-TFOR(JJS, IS))
         CONLAY(JSTIM2+1,ISTIM2-1,2)=TFOR(JJS, IS)*CNOLD(JJS, IS, KS)
     *                             +TT1*CNOLD(JJS, IS,KKS)
C
C   EDGES AND FACES
C
260   CONTINUE
C   CALCULATE WEIGHTS, ASSUMING ALL CELL ACTIVE
      P1  = (1D0- TK)* (1D0-XFOR(JS))
      P2  = (1D0-TTK)*      XFOR(JS) 
      P3  =       TK * (1D0-XFOR(JS))
      P4  =      TTK *      XFOR(JS) 
C
      IA  = IACT( JS, IS,KFLAS) * IACT(JJS, IS,KFLAS) *
     *      IACT( JS, IS,KFCUR) * IACT(JJS, IS,KFCUR)
C
C  SKIP THE NEXT IF ALL CELL ACTIVE
      IF (IA) 250,250,300
C
C   AT LEAST ONE INACTIVE CELL
250   CONTINUE
C  FIND ACTIVE WEIGHT
      SUMA = IACT( JS, IS,KFLAS)*P1 + IACT(JJS, IS,KFLAS)*P2
     *     + IACT( JS, IS,KFCUR)*P3 + IACT(JJS, IS,KFCUR)*P4
C
C   IF ALL CELLS INACTIVE, GOTO NEXT
      IF (SUMA.EQ.0.D0) GOTO 350
C
C  DISTRIBUTE INACTIVE WEIGHT PROPORTIONALLY AMONG ACTIVE CELLS
      SUMI = 1.D0 - SUMA
      FACT = 1/SUMA
      P1   = IACT( JS, IS,KFLAS) * P1 * FACT
      P2   = IACT(JJS, IS,KFLAS) * P2 * FACT
      P3   = IACT( JS, IS,KFCUR) * P3 * FACT
      P4   = IACT(JJS, IS,KFCUR) * P4 * FACT
C
C   NO CELLS INACTIVE OR INACTIVE ALREADY HANDLED
300   CONTINUE
      CONLAY(JSTIM2,ISTIM2-1,2)= P1* CNOLD( JS, IS,KKS)
     *                          +P2* CNOLD(JJS, IS,KKS)
     *                          +P3* CNOLD( JS, IS, KS)
     *                          +P4* CNOLD(JJS, IS, KS)
C
      IF (IMOV.EQ.1) THEN
      TT12=2*TT1
      TFOR2=2*TFOR(JJS, IS)
      VOL1=VOL( JS, IS,KFLAS)*0.25D0
      VOL2=VOL(JJS, IS,KFLAS)*0.25D0
      VOL3=VOL( JS, IS,KFCUR)*0.25D0
      VOL4=VOL(JJS, IS,KFCUR)*0.25D0
      DIAGST(14, JS, IS,KKS)= DIAGST(14, JS, IS,KKS)+ P1*VOL1
      DIAGST(15, JS, IS,KKS)= DIAGST(15, JS, IS,KKS)+ P2*VOL1
      DIAGST(23, JS, IS,KKS)= DIAGST(23, JS, IS,KKS)+ P3*VOL1
      DIAGST(24, JS, IS,KKS)= DIAGST(24, JS, IS,KKS)+ P4*VOL1
C
      DIAGST(13,JJS, IS,KKS)= DIAGST(13,JJS, IS,KKS)+  P1         *VOL2
      DIAGST(14,JJS, IS,KKS)= DIAGST(14,JJS, IS,KKS)+ (P2 + TT12) *VOL2
      DIAGST(22,JJS, IS,KKS)= DIAGST(22,JJS, IS,KKS)+  P3         *VOL2
      DIAGST(23,JJS, IS,KKS)= DIAGST(23,JJS, IS,KKS)+ (P4 + TFOR2)*VOL2
C
      DIAGST( 5, JS, IS, KS)= DIAGST( 5, JS, IS, KS)+ P1*VOL3
      DIAGST( 6, JS, IS, KS)= DIAGST( 6, JS, IS, KS)+ P2*VOL3
      DIAGST(14, JS, IS, KS)= DIAGST(14, JS, IS, KS)+ P3*VOL3
      DIAGST(15, JS, IS, KS)= DIAGST(15, JS, IS, KS)+ P4*VOL3
C
      DIAGST( 4,JJS, IS, KS)= DIAGST( 4,JJS, IS, KS)+  P1         *VOL4
      DIAGST( 5,JJS, IS, KS)= DIAGST( 5,JJS, IS, KS)+ (P2 + TT12) *VOL4
      DIAGST(13,JJS, IS, KS)= DIAGST(13,JJS, IS, KS)+  P3         *VOL4
      DIAGST(14,JJS, IS, KS)= DIAGST(14,JJS, IS, KS)+ (P4 + TFOR2)*VOL4
      ENDIF
C
350   CONTINUE
      TK =TTK
      ENDDO
C
100   RETURN
      END
C
C*********************************************************************
C
      SUBROUTINE EDGCOR(IMOV,IS,KS,NSCOL,NSROW,NSLAY,CONLAY,IACT,DIAGST,
     *                  CFOR,RFOR,TFOR,CNOLD,YFOR,XFOR,THCK,
     *                  KFLAS,KFCUR,VOL)
C**********************************************************************
C  EDGCOR PERFORMS CALCULATIONS FOR OCTANT CORNERS IN PLANE BETWEEN TWO
C  NODAL LAYERS, WHERE CORNERS LIE ALONG ROW OF ALTERNATING X EDGES AND
C  CELL CORNER.  OCTANT CORNERS ON EDGES ARE INTERPOLATED FROM 4 NODAL
C  VALUES IN A VERTICAL PLANE, AND OCTANT CORNERS ON CELL CORNERS ARE 
C  INTERPOLATED FROM EIGHT NODAL VALUES.  WEIGHTING IS DONE IN 
C  CONSIDERATION THAT EACH CELL MAY HAVE A DIFFERENT THICKNESS.  (SEE
C  DISCUSSION IS VFACED.)
C**********************************************************************
C
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION CONLAY(2*NSCOL-1,2*NSROW-1,3),IACT(NSCOL,NSROW,2),
     *     DIAGST(27,NSCOL,NSROW,NSLAY),RFOR(NSCOL,NSROW-1,2),
     *     CNOLD(NSCOL,NSROW,NSLAY),YFOR(NSROW),XFOR(NSCOL),
     *     CFOR(NSCOL-1,NSROW,2),TFOR(NSCOL,NSROW),VOL(NSCOL,NSROW,2),
     *     THCK(NSCOL,NSROW,NSLAY)
C**********************************************************************
      IIS=IS-1
      IISTIM2=2*IIS
      KKS=KS-1
C
C   FIRST EDGE
C   CALCULATE WEIGHTS, ASSUMING ALL NODES ACTIVE
C
      TK  = TH(0,0,1,1,IIS,KKS,THCK,NSCOL,NSROW,NSLAY)
      TTK = TH(0,0,1,1, IS,KKS,THCK,NSCOL,NSROW,NSLAY)
      T1  = (1D0- TK)* (1D0-YFOR(IIS))
      T2  = (1D0-TTK)*      YFOR(IIS)
      T3  =       TK * (1D0-YFOR(IIS))
      T4  =      TTK *      YFOR(IIS)
C
      IA  = IACT(  1,IIS,KFLAS) * IACT(  1, IS,KFLAS) *
     *      IACT(  1,IIS,KFCUR) * IACT(  1, IS,KFCUR)
C
C  PROCESS INACTIVE CELLS
      IF (IA.LE.0) THEN
C      
C   AT LEAST ONE INACTIVE CELL
C   TOTAL WEIGHT ON INACTIVE CELLS
         SUMA = IACT(  1,IIS,KFLAS)*T1 + IACT(  1, IS,KFLAS)*T2
     *        + IACT(  1,IIS,KFCUR)*T3 + IACT(  1, IS,KFCUR)*T4
C
C   IF ALL CELLS INACTIVE, GOTO NEXT
         IF (SUMA.EQ.0.D0) GOTO 350
C
C   DISTRIBUTE INACTIVE WEIGHT PROPORTIONALL TO ACTIVE NODES
         SUMI = 1.D0 - SUMA
         FACT = 1/SUMA
         P1   = IACT(  1,IIS,KFLAS) * T1 * FACT
         P2   = IACT(  1, IS,KFLAS) * T2 * FACT
         P3   = IACT(  1,IIS,KFCUR) * T3 * FACT
         P4   = IACT(  1, IS,KFCUR) * T4 * FACT
C
C   NO CELLS INACTIVE
      ELSE
         P1   = T1
         P2   = T2
         P3   = T3
         P4   = T4
      ENDIF
C
      CONLAY(1,IISTIM2,2)=CNOLD( 1,IIS,KKS)*P1
     *                    +CNOLD( 1, IS,KKS)*P2
     *                    +CNOLD( 1,IIS, KS)*P3
     *                    +CNOLD( 1, IS, KS)*P4
C
      IF (IMOV.EQ.1) THEN
      VOL1=VOL(  1,IIS,KFLAS)*0.25D0
      VOL2=VOL(  1, IS,KFLAS)*0.25D0
      VOL3=VOL(  1,IIS,KFCUR)*0.25D0
      VOL4=VOL(  1, IS,KFCUR)*0.25D0
      DIAGST(14, 1,IIS,KKS)=DIAGST(14, 1,IIS,KKS)+ P1*VOL1
      DIAGST(17, 1,IIS,KKS)=DIAGST(17, 1,IIS,KKS)+ P2*VOL1
      DIAGST(23, 1,IIS,KKS)=DIAGST(23, 1,IIS,KKS)+ P3*VOL1
      DIAGST(26, 1,IIS,KKS)=DIAGST(26, 1,IIS,KKS)+ P4*VOL1
C
      DIAGST(11, 1, IS,KKS)=DIAGST(11, 1, IS,KKS)+ P1*VOL2
      DIAGST(14, 1, IS,KKS)=DIAGST(14, 1, IS,KKS)+ P2*VOL2
      DIAGST(20, 1, IS,KKS)=DIAGST(20, 1, IS,KKS)+ P3*VOL2
      DIAGST(23, 1, IS,KKS)=DIAGST(23, 1, IS,KKS)+ P4*VOL2
C
      DIAGST( 5, 1,IIS, KS)=DIAGST( 5, 1,IIS, KS)+ P1*VOL3
      DIAGST( 8, 1,IIS, KS)=DIAGST( 8, 1,IIS, KS)+ P2*VOL3
      DIAGST(14, 1,IIS, KS)=DIAGST(14, 1,IIS, KS)+ P3*VOL3
      DIAGST(17, 1,IIS, KS)=DIAGST(17, 1,IIS, KS)+ P4*VOL3
C
      DIAGST( 2, 1, IS, KS)=DIAGST( 2, 1, IS, KS)+ P1*VOL4
      DIAGST( 5, 1, IS, KS)=DIAGST( 5, 1, IS, KS)+ P2*VOL4
      DIAGST(11, 1, IS, KS)=DIAGST(11, 1, IS, KS)+ P3*VOL4
      DIAGST(14, 1, IS, KS)=DIAGST(14, 1, IS, KS)+ P4*VOL4
      ENDIF
C
350   CONTINUE
C
      IF (NSCOL.EQ.1) GOTO 100
      DO JS=1,NSCOL-1
         JJS=JS+1
         JSTIM2=2*JS
C
C   EDGES
C
      TK  = TH(0,0,1,JJS,IIS,KKS,THCK,NSCOL,NSROW,NSLAY)
      TTK = TH(0,0,1,JJS, IS,KKS,THCK,NSCOL,NSROW,NSLAY)
      TT1  = (1D0- TK)* (1D0-YFOR(IIS))
      TT2  = (1D0-TTK)*      YFOR(IIS)
      TT3  =       TK * (1D0-YFOR(IIS))
      TT4  =      TTK *      YFOR(IIS)
C
      IA  = IACT(JJS,IIS,KFLAS) * IACT(JJS, IS,KFLAS) *
     *      IACT(JJS,IIS,KFCUR) * IACT(JJS, IS,KFCUR)
C
      IF (IA.LE.0) THEN  
C
C   AT LEAST ONE INACTIVE CELL
         SUMA = IACT(JJS,IIS,KFLAS)*TT1 + IACT(JJS, IS,KFLAS)*TT2
     *        + IACT(JJS,IIS,KFCUR)*TT3 + IACT(JJS, IS,KFCUR)*TT4
C
C   IF ALL CELLS INACTIVE, GOTO NEXT
         IF (SUMA.EQ.0.D0) GOTO 375
C
         SUMI = 1.D0 - SUMA
         FACT = 1/SUMA
         PP1   = IACT(JJS,IIS,KFLAS) * TT1 * FACT
         PP2   = IACT(JJS, IS,KFLAS) * TT2 * FACT
         PP3   = IACT(JJS,IIS,KFCUR) * TT3 * FACT
         PP4   = IACT(JJS, IS,KFCUR) * TT4 * FACT
      ELSE
C
C   NO CELLS INACTIVE
C
         PP1   = TT1
         PP2   = TT2
         PP3   = TT3
         PP4   = TT4
      ENDIF
C
      CONLAY(JSTIM2+1,IISTIM2,2)=CNOLD(JJS,IIS,KKS)*PP1
     *                         +CNOLD(JJS, IS,KKS)*PP2
     *                         +CNOLD(JJS,IIS, KS)*PP3
     *                         +CNOLD(JJS, IS, KS)*PP4
C
c      IF (IMOV.EQ.1) THEN
c      VOL1=VOL(JJS,IIS,KFLAS)*0.25D0
c      VOL2=VOL(JJS, IS,KFLAS)*0.25D0
c      VOL3=VOL(JJS,IIS,KFCUR)*0.25D0
c      VOL4=VOL(JJS, IS,KFCUR)*0.25D0
c
c      DIAGST(14,JJS,IIS,KKS)=DIAGST(14,JJS,IIS,KKS)+ PP1*VOL1
c      DIAGST(17,JJS,IIS,KKS)=DIAGST(17,JJS,IIS,KKS)+ PP2*VOL1
c      DIAGST(23,JJS,IIS,KKS)=DIAGST(23,JJS,IIS,KKS)+ PP3*VOL1
c      DIAGST(26,JJS,IIS,KKS)=DIAGST(26,JJS,IIS,KKS)+ PP4*VOL1
C
c      DIAGST(11,JJS, IS,KKS)=DIAGST(11,JJS, IS,KKS)+ PP1*VOL2
c      DIAGST(14,JJS, IS,KKS)=DIAGST(14,JJS, IS,KKS)+ PP2*VOL2
c      DIAGST(20,JJS, IS,KKS)=DIAGST(20,JJS, IS,KKS)+ PP3*VOL2
c      DIAGST(23,JJS, IS,KKS)=DIAGST(23,JJS, IS,KKS)+ PP4*VOL2
C
c      DIAGST( 5,JJS,IIS, KS)=DIAGST( 5,JJS,IIS, KS)+ PP1*VOL3
c      DIAGST( 8,JJS,IIS, KS)=DIAGST( 8,JJS,IIS, KS)+ PP2*VOL3
c      DIAGST(14,JJS,IIS, KS)=DIAGST(14,JJS,IIS, KS)+ PP3*VOL3
c      DIAGST(17,JJS,IIS, KS)=DIAGST(17,JJS,IIS, KS)+ PP4*VOL3
C
c      DIAGST( 2,JJS, IS, KS)=DIAGST( 2,JJS, IS, KS)+ PP1*VOL4
c      DIAGST( 5,JJS, IS, KS)=DIAGST( 5,JJS, IS, KS)+ PP2*VOL4
c      DIAGST(11,JJS, IS, KS)=DIAGST(11,JJS, IS, KS)+ PP3*VOL4
c      DIAGST(14,JJS, IS, KS)=DIAGST(14,JJS, IS, KS)+ PP4*VOL4
c      ENDIF
C
375   CONTINUE
C
C   CORNERS 
C
         P1=  (1-XFOR( JS)) *  T1
         P2=     XFOR( JS)  * TT1
         P3=  (1-XFOR( JS)) *  T2
         P4=     XFOR( JS)  * TT2
         P5=  (1-XFOR( JS)) *  T3
         P6=     XFOR( JS)  * TT3
         P7=  (1-XFOR( JS)) *  T4
         P8=     XFOR( JS)  * TT4
C
      IA  = IACT( JS,IIS,KFLAS) * IACT(JJS,IIS,KFLAS) *
     *      IACT( JS, IS,KFLAS) * IACT(JJS, IS,KFLAS) *
     *      IACT( JS,IIS,KFCUR) * IACT(JJS,IIS,KFCUR) *
     *      IACT( JS, IS,KFCUR) * IACT(JJS, IS,KFCUR)
      IF (IA) 280,280,330
C
C   AT LEAST ONE INACTIVE CELL
280   CONTINUE
      SUMA = IACT( JS,IIS,KFLAS)* P1 + IACT(JJS,IIS,KFLAS)* P2
     *     + IACT( JS, IS,KFLAS)* P3 + IACT(JJS, IS,KFLAS)* P4
     *     + IACT( JS,IIS,KFCUR)* P5 + IACT(JJS,IIS,KFCUR)* P6
     *     + IACT( JS, IS,KFCUR)* P7 + IACT(JJS, IS,KFCUR)* P8
C
C   IF ALL CELLS INACTIVE, GOTO NEXT
      IF (SUMA.EQ.0.D0) GOTO 380
C
      SUMI = 1.D0 - SUMA
      FACT = 1/SUMA
      P1   = IACT( JS,IIS,KFLAS) * P1 * FACT
      P2   = IACT(JJS,IIS,KFLAS) * P2 * FACT
      P3   = IACT( JS, IS,KFLAS) * P3 * FACT
      P4   = IACT(JJS, IS,KFLAS) * P4 * FACT
      P5   = IACT( JS,IIS,KFCUR) * P5 * FACT
      P6   = IACT(JJS,IIS,KFCUR) * P6 * FACT
      P7   = IACT( JS, IS,KFCUR) * P7 * FACT
      P8   = IACT(JJS, IS,KFCUR) * P8 * FACT
C   NO CELLS INACTIVE
330   CONTINUE
C
         CONLAY(JSTIM2,IISTIM2,2)=  P1*CNOLD( JS,IIS,KKS)
     *                            +P2*CNOLD(JJS,IIS,KKS)
     *                            +P3*CNOLD( JS, IS,KKS)
     *                                  +P4*CNOLD(JJS, IS,KKS)
     *                                  +P5*CNOLD( JS,IIS, KS)
     *                                  +P6*CNOLD(JJS,IIS, KS)
     *                                  +P7*CNOLD( JS, IS, KS)
     *                                  +P8*CNOLD(JJS, IS, KS)
C
      IF (IMOV.EQ.1) THEN
         PP12=2*PP1
         PP22=2*PP2
         PP32=2*PP3
         PP42=2*PP4
         VOL1=VOL( JS,IIS,KFLAS)*0.125D0
         VOL2=VOL(JJS,IIS,KFLAS)*0.125D0
         VOL3=VOL( JS, IS,KFLAS)*0.125D0
         VOL4=VOL(JJS, IS,KFLAS)*0.125D0
         VOL5=VOL( JS,IIS,KFCUR)*0.125D0
         VOL6=VOL(JJS,IIS,KFCUR)*0.125D0
         VOL7=VOL( JS, IS,KFCUR)*0.125D0
         VOL8=VOL(JJS, IS,KFCUR)*0.125D0
         DIAGST(14, JS,IIS,KKS)= DIAGST(14, JS,IIS,KKS)+ P1*VOL1
         DIAGST(15, JS,IIS,KKS)= DIAGST(15, JS,IIS,KKS)+ P2*VOL1
         DIAGST(17, JS,IIS,KKS)= DIAGST(17, JS,IIS,KKS)+ P3*VOL1
         DIAGST(18, JS,IIS,KKS)= DIAGST(18, JS,IIS,KKS)+ P4*VOL1
         DIAGST(23, JS,IIS,KKS)= DIAGST(23, JS,IIS,KKS)+ P5*VOL1
         DIAGST(24, JS,IIS,KKS)= DIAGST(24, JS,IIS,KKS)+ P6*VOL1
         DIAGST(26, JS,IIS,KKS)= DIAGST(26, JS,IIS,KKS)+ P7*VOL1
         DIAGST(27, JS,IIS,KKS)= DIAGST(27, JS,IIS,KKS)+ P8*VOL1
C         
         DIAGST(13,JJS,IIS,KKS)= DIAGST(13,JJS,IIS,KKS)+       P1 *VOL2
         DIAGST(14,JJS,IIS,KKS)= DIAGST(14,JJS,IIS,KKS)+ (PP12+P2)*VOL2
         DIAGST(16,JJS,IIS,KKS)= DIAGST(16,JJS,IIS,KKS)+       P3 *VOL2
         DIAGST(17,JJS,IIS,KKS)= DIAGST(17,JJS,IIS,KKS)+ (PP22+P4)*VOL2
         DIAGST(22,JJS,IIS,KKS)= DIAGST(22,JJS,IIS,KKS)+       P5 *VOL2
         DIAGST(23,JJS,IIS,KKS)= DIAGST(23,JJS,IIS,KKS)+ (PP32+P6)*VOL2
         DIAGST(25,JJS,IIS,KKS)= DIAGST(25,JJS,IIS,KKS)+       P7 *VOL2
         DIAGST(26,JJS,IIS,KKS)= DIAGST(26,JJS,IIS,KKS)+ (PP42+P8)*VOL2
C         
         DIAGST(11, JS, IS,KKS)= DIAGST(11, JS, IS,KKS)+ P1*VOL3
         DIAGST(12, JS, IS,KKS)= DIAGST(12, JS, IS,KKS)+ P2*VOL3
         DIAGST(14, JS, IS,KKS)= DIAGST(14, JS, IS,KKS)+ P3*VOL3
         DIAGST(15, JS, IS,KKS)= DIAGST(15, JS, IS,KKS)+ P4*VOL3
         DIAGST(20, JS, IS,KKS)= DIAGST(20, JS, IS,KKS)+ P5*VOL3
         DIAGST(21, JS, IS,KKS)= DIAGST(21, JS, IS,KKS)+ P6*VOL3
         DIAGST(23, JS, IS,KKS)= DIAGST(23, JS, IS,KKS)+ P7*VOL3
         DIAGST(24, JS, IS,KKS)= DIAGST(24, JS, IS,KKS)+ P8*VOL3
C         
         DIAGST(10,JJS, IS,KKS)= DIAGST(10,JJS, IS,KKS)+       P1 *VOL4
         DIAGST(11,JJS, IS,KKS)= DIAGST(11,JJS, IS,KKS)+ (PP12+P2)*VOL4
         DIAGST(13,JJS, IS,KKS)= DIAGST(13,JJS, IS,KKS)+       P3 *VOL4
         DIAGST(14,JJS, IS,KKS)= DIAGST(14,JJS, IS,KKS)+ (PP22+P4)*VOL4
         DIAGST(19,JJS, IS,KKS)= DIAGST(19,JJS, IS,KKS)+       P5 *VOL4
         DIAGST(20,JJS, IS,KKS)= DIAGST(20,JJS, IS,KKS)+ (PP32+P6)*VOL4
         DIAGST(22,JJS, IS,KKS)= DIAGST(22,JJS, IS,KKS)+       P7 *VOL4
         DIAGST(23,JJS, IS,KKS)= DIAGST(23,JJS, IS,KKS)+ (PP42+P8)*VOL4
C        
         DIAGST( 5, JS,IIS, KS)= DIAGST( 5, JS,IIS, KS)+ P1*VOL5
         DIAGST( 6, JS,IIS, KS)= DIAGST( 6, JS,IIS, KS)+ P2*VOL5
         DIAGST( 8, JS,IIS, KS)= DIAGST( 8, JS,IIS, KS)+ P3*VOL5
         DIAGST( 9, JS,IIS, KS)= DIAGST( 9, JS,IIS, KS)+ P4*VOL5
         DIAGST(14, JS,IIS, KS)= DIAGST(14, JS,IIS, KS)+ P5*VOL5
         DIAGST(15, JS,IIS, KS)= DIAGST(15, JS,IIS, KS)+ P6*VOL5
         DIAGST(17, JS,IIS, KS)= DIAGST(17, JS,IIS, KS)+ P7*VOL5
         DIAGST(18, JS,IIS, KS)= DIAGST(18, JS,IIS, KS)+ P8*VOL5
C         
         DIAGST( 4,JJS,IIS, KS)= DIAGST( 4,JJS,IIS, KS)+       P1 *VOL6
         DIAGST( 5,JJS,IIS, KS)= DIAGST( 5,JJS,IIS, KS)+ (PP12+P2)*VOL6
         DIAGST( 7,JJS,IIS, KS)= DIAGST( 7,JJS,IIS, KS)+       P3 *VOL6
         DIAGST( 8,JJS,IIS, KS)= DIAGST( 8,JJS,IIS, KS)+ (PP22+P4)*VOL6
         DIAGST(13,JJS,IIS, KS)= DIAGST(13,JJS,IIS, KS)+       P5 *VOL6
         DIAGST(14,JJS,IIS, KS)= DIAGST(14,JJS,IIS, KS)+ (PP32+P6)*VOL6
         DIAGST(16,JJS,IIS, KS)= DIAGST(16,JJS,IIS, KS)+       P7 *VOL6
         DIAGST(17,JJS,IIS, KS)= DIAGST(17,JJS,IIS, KS)+ (PP42+P8)*VOL6
C         
         DIAGST( 2, JS, IS, KS)= DIAGST( 2, JS, IS, KS)+ P1*VOL7
         DIAGST( 3, JS, IS, KS)= DIAGST( 3, JS, IS, KS)+ P2*VOL7
         DIAGST( 5, JS, IS, KS)= DIAGST( 5, JS, IS, KS)+ P3*VOL7
         DIAGST( 6, JS, IS, KS)= DIAGST( 6, JS, IS, KS)+ P4*VOL7
         DIAGST(11, JS, IS, KS)= DIAGST(11, JS, IS, KS)+ P5*VOL7
         DIAGST(12, JS, IS, KS)= DIAGST(12, JS, IS, KS)+ P6*VOL7
         DIAGST(14, JS, IS, KS)= DIAGST(14, JS, IS, KS)+ P7*VOL7
         DIAGST(15, JS, IS, KS)= DIAGST(15, JS, IS, KS)+ P8*VOL7
C         
         DIAGST( 1,JJS, IS, KS)= DIAGST( 1,JJS, IS, KS)+       P1 *VOL8
         DIAGST( 2,JJS, IS, KS)= DIAGST( 2,JJS, IS, KS)+ (PP12+P2)*VOL8
         DIAGST( 4,JJS, IS, KS)= DIAGST( 4,JJS, IS, KS)+       P3 *VOL8
         DIAGST( 5,JJS, IS, KS)= DIAGST( 5,JJS, IS, KS)+ (PP22+P4)*VOL8
         DIAGST(10,JJS, IS, KS)= DIAGST(10,JJS, IS, KS)+       P5 *VOL8
         DIAGST(11,JJS, IS, KS)= DIAGST(11,JJS, IS, KS)+ (PP32+P6)*VOL8
         DIAGST(13,JJS, IS, KS)= DIAGST(13,JJS, IS, KS)+       P7 *VOL8
         DIAGST(14,JJS, IS, KS)= DIAGST(14,JJS, IS, KS)+ (PP42+P8)*VOL8
      ENDIF
C
380   CONTINUE
      T1=TT1
      T2=TT2
      T3=TT3
      T4=TT4
C
      ENDDO
C
100   RETURN
      END
C     
C****************************************************************
C
      SUBROUTINE ELLRHI(IACT,IBOUND,RHS,RHSO,CONLAY,
     *                  LBNDY,NZIN,KCCUR,KCLAS,KFCUR,KFLAS,KS,
     *                  NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *                  VC,VR,VL,RF,THCK,POR,TIMV,
     *                  VCMAX,VRMAX,VLMAX,IOUTS,NCOL,NROW,NLAY,VOL,
     *                  DELCOL,DELROW,XFOR,
     *                  XBAC,YFOR,YBAC,ICUR,DECAY,imov,DAGE) 
C
C**********************************************************************
C  ELLLHI CALLS ELLRHI TO HANDLE RHS INTEGRATION FOR DOMAIN BETWEEN
C  NODAL LEVELS KS AND KS+1.  ELLRHI PRODUCES CELL NUMBER, OCTANT AND
C  SUBCELL VOLUME INFORMATION, AND CALLS ELLCR TO INTEGRATE OVER EACH
C  OCTANT, USING CONCENTRATIONS AT OCTANT CORNERS PASSED BY ELLLHI.
C**********************************************************************
      DOUBLE PRECISION DECAY
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION VOL(NSCOL,NSROW,2),NOCT(2,2,2),POR(NODESS)
      DIMENSION IACT(NSCOL,NSROW,2),CONLAY(2*NSCOL-1,2*NSROW-1,3),
     *          RHS(NODESS),RHSO(NTFACE),NZIN(NODESS),
     * IBOUND(NCOL,NROW,NLAY),DELCOL(NCOL),DELROW(NROW),
     *  THCK(NSCOL,NSROW,NSLAY),XFOR(NSCOL),YFOR(NSROW),
     *  LBNDY(NTFACE)
      DATA NOCT/          8,      4,
     *                         6,      2,
     *                        7,      3,
     *                   5,      1/
C   SCALE VOLUME FOR ELLCR
      FACT  = 8 *CINV *RINV *BINV
C   INTERPOLATE USING CONLAY ARRAY
      KX    = 0
      KFP1  = KFCUR
      KFP2  = KFLAS
      KCP1  = KCCUR
      KCP2  = KCLAS
      DO KLAY=KS-1,KS
         KX = KX+1
         KSAV  = KFP1
         KFP1  = KFP2
         KFP2  = KSAV
         KSAV  = KCP1
         KCP1  = KCP2
         KCP2  = KSAV
         DO IS=1,NSROW-1
            IX   = 0
            DO IROW=IS,IS+1
               IX = IX+1
               DO JS= 1,NSCOL-1
                  JJS = JS+1
                  NOCTANT = NOCT(1,IX,KX)
                  VOLN    = FACT *VOL( JS,IROW,KFP1)
                  CALL ELLCR(IACT,IBOUND,RHS,RHSO,CONLAY,
     *                  LBNDY,NZIN,KCP1,KCP2,JS,IROW,KLAY,
     *                  NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *                  VC,VR,VL,RF,THCK,POR,TIMV,
     *                  VCMAX,VRMAX,VLMAX,IOUTS,NCOL,NROW,NLAY,VOLN,
     *                  NOCTANT,DELCOL,DELROW,XFOR,
     *                  XBAC,YFOR,YBAC,KFP1,DECAY,imov,DAGE)
                  NOCTANT = NOCT(2,IX,KX)
                  VOLN    = FACT *VOL(JJS,IROW,KFP1)
                  CALL ELLCR(IACT,IBOUND,RHS,RHSO,CONLAY,
     *                  LBNDY,NZIN,KCP1,KCP2,JJS,IROW,KLAY,
     *                  NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *                  VC,VR,VL,RF,THCK,POR,TIMV,
     *                  VCMAX,VRMAX,VLMAX,IOUTS,NCOL,NROW,NLAY,VOLN,
     *                  NOCTANT,DELCOL,DELROW,XFOR,
     *                  XBAC,YFOR,YBAC,KFP1,DECAY,imov,DAGE)
100               CONTINUE
                  ENDDO
               ENDDO
            ENDDO   
         ENDDO
      END
C
C     ELLCR BUILD RHS CONCENTRATION INTEGRAL 
C*****************************************************************
C
      SUBROUTINE ELLCR(IACT,IBOUND,RHS,RHSO,CONLAY,
     *                  LBNDY,NZIN,KCCUR,KCLAS,JS,IS,KS,
     *                  NSCOL,NSROW,NSLAY,NODESS,NTFACE,
     *                  VC,VR,VL,RF,THCK,POR,TIMV,
     *                  VCMAX,VRMAX,VLMAX,IOUTS,NCOL,NROW,NLAY,VOLN,
     *                  NOCTANT,DELCOL,DELROW,XFOR,
     *                  XBAC,YFOR,YBAC,KFCUR,DECAY,imov,DAGE)
C
C**********************************************************************
C  
C  IF CELL HOLDS MASS AT OLD TIME LEVEL,
C  ELLCR
C  - DETERMINES POSITIONS OF INTEGRATION POINTS AT CENTERS OF
C  SUBCELLS OF DIMENSION 1/NSC X 1/NSR X 1/NSL IN BOUNDARY OCTANT
C  - INTERPOLATES CONCENTRATION AT INTEGRATION POINT AT OLD TIME
C  LEVEL, USING CINTERP
C  - TRACKS MOVEMENT UNDER ADVECTION OF INTEGRATION POINT OVER TIME
C  STEP, USING MOVE
C  - DISTRIBUTES MASS ASSOCIATED WITH INTEGRATION POINT AMONG CELLS
C  OR BOUNDARY FACES AT NEW TIME LEVEL, USING EVALTF OR BNDYTF
C  - ACCUMULATES MASS INTO RHS OF INTERIOR EQUATIONS OR BOUNDARY
C  EQUATIONS, DEPENDING ON DESTINATION OF TRACKED INTEGRATION POINT
C  AND TEST FUNCTION EVALUATION.
C
C  ELLCR IS ANALOG FOR DOMAIN INTERIOR PROCESSING OF BDYCR, WHICH 
C  TREATS THE BOUNDARY.  THE FUNCTIONS ARE IDENTICAL, EXCEPT THERE IS
C  NO PROVISION IN ELLCR TO INTERPOLATE BETWEEN NODES AND DIFFERENT
C  INTERPOLATION SUBROUTINES ARE USED.  INTERIOR INTERPOLATION IS DONE
C  BY CINTERP FROM CONCENTRATIONS AT OCTANT CORNERS, STORED IN CONLAY.
C**********************************************************************
C
C      PARAMETER(SNEG=-.5,NPOS=0)
      DOUBLE PRECISION DECAY
      DIMENSION IACT(NSCOL,NSROW,2),NZIN(NODESS),
     *          RHS(NODESS),RHSO(NTFACE)
      DIMENSION TFVAL(8),NUMTF(8),NSCOORD(3,8),POR(NODESS)
      DIMENSION START(3,8),CONLAY(2*NSCOL-1,2*NSROW-1,3),
     * IBOUND(NCOL,NROW,NLAY),THCK(NSCOL,NSROW,NSLAY),
     * DELCOL(NCOL),DELROW(NROW),XFOR(NSCOL),YFOR(NSROW),
     * LBNDY(NTFACE)
      COMMON /SUBGRD/ ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,
     *  ISLAY2,ISUBGD
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DATA START/        -0.5D0,        -0.5D0,        -0.5D0,
     *                        -0.5D0,        -0.5D0,           0D0,
     *                        -0.5D0,           0D0,        -0.5D0,
     *                        -0.5D0,    0D0,    0D0,
     *                           0D0,        -0.5D0,        -0.5D0,
     *                           0D0,        -0.5D0,           0D0,
     *                           0D0,           0D0,        -0.5D0,
     *                           0D0,           0D0,           0D0/
C
      IF (IACT(JS,IS,KFCUR).EQ.0) RETURN
      NODE=(KS-1)*NSCOL*NSROW + (IS-1)*NSCOL + JS
cea IF (NZIN(NODE).EQ.0 .AND. IMOV.NE.1) RETURN
      POROS=POR(NODE)
      FACT=EXP(-TIMV*DECAY)
C
C   DETERMINE INTEGRATION POINTS, FOR OCTANT OF CELL.
C   START WITH MINIMUM VALUES OF XHAT, YHAT AND ZHAT FOR EACH OCTANT,
C   AND DETERMINE INTEGRATION POINTS AT CENTERS OF EACH
C   1/NSC X 1/NSR X 1/NSL SUBCELL
C
C   INTERPOLATION ON NONUNIFORM GRID IS ACCOMPLISHED BY SCALING
C   COORDINATES OF INTEGRATION POINTS IN REFERENCE GRID.
C
C   HBINV=0.5*BINV=1/(2*NSL)
C   HRINV=0.5*RINV=1/(2*NSR)
C   HCINV=0.5*CINV=1/(2*NSC)
C
      ZHAT=START(3,NOCTANT)-HBINV
      DO 900 NL=1,NSLH
      ZHAT=ZHAT+BINV
      PL=KS+ISLAY1-1+ZHAT
C
      YHAT=START(2,NOCTANT)-HRINV
      DO 900 NR=1,NSRH
      YHAT=YHAT+RINV
      PR=IS+ISROW1-1+YHAT
C
      XHAT=START(1,NOCTANT)-HCINV
      DO 900 NC=1,NSCH
      XHAT=XHAT+CINV
      PC=JS+ISCOL1-1+XHAT
C
C   FIND CONCENTRATION AT INTEGRATION POINT (XX,YY,ZZ) USING TRILINEAR
C   INTERPOLATION
      CALL CINTERP(JS,IS,KCCUR,KCLAS,NOCTANT,NODESS,
     *       XHAT,YHAT,ZHAT,CVAL,NSCOL,NSROW,NSLAY,
     *       CONLAY)
C
C   DON'T TRACK POINT ASSOCIATED WITH ZERO MASS
C
cea IF (CVAL.EQ.0.D0) GOTO 900
c        if (abs(cval).lt.azero) goto 900
C      
C   FORWARD TRACK INTEGRATION POINT TO NEW TIME LEVEL
C
      PCMV=PC
      PRMV=PR
      PLMV=PL
C
      CALL ELMOVE(PCMV,PRMV,PLMV,VC,VR,VL,RF,
     *       THCK,POR,IBOUND,
     *       NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *       IOUTS,TIMV,TSTEP2,VCMAX,VRMAX,VLMAX,
     *       JSMV,ISMV,KSMV,JMV,IMV,KMV,NLOC,DELCOL,DELROW)
C
C   EVALUATE ALL NONZERO TEST FUNCTIONS AT FORWARD TRACKED POINT
C   AT NEW TIME LEVEL
C
C   NLOC=0 INDICATES INTEGRATION POINT IS TRACKED TO WITHIN TRANSPORT
C   DOMAIN.
C   NLOC=1 INDICATES INTEGRATION POINT LEAVES OUTFLOW BOUNDARY
C   DURING TIME STEP.
C
c        noda=(KSmv-1)*NSCOL*NSROW + (ISmv-1)*NSCOL + JSmv
C
      IF (NLOC.EQ.0) THEN
            CALL EVALTF(PCMV,PRMV,PLMV,TFVAL,IBOUND,
     *           NUMTF,JSMV,ISMV,KSMV,JMV,IMV,KMV,NCOL,NROW,NLAY,
     *           NSCOL,NSROW,NSLAY,NNZER,NSCOORD,THCK,
     *           XFOR,XBAC,YFOR,YBAC)
      ELSE
            CALL BNDYTF(PCMV,PRMV,PLMV,TFVAL,IBOUND,
     *           NUMTF,JSMV,ISMV,KSMV,JMV,IMV,KMV,NCOL,NROW,NLAY,
     *           NSCOL,NSROW,NSLAY,NODESS,NNZER,LBNDY,NTFACE,THCK,
     *           XFOR,XBAC,YFOR,YBAC)
      ENDIF
C
c      if (imov.gt.1) then
c      nnzer=1
c      tfval(1)=1d0
c      numtf(1)=noda
c      endif
C
C   (DECAYED) MASS ACCUMULATED TO INTERIOR EQUATION OR OUTFLOW, DEPENDING ON
C   TEST FUNCTION EVALUATION.
C   ZERO ORDER CONSTANT FOR AGE RUN
C   AGE THROUGH ENTIRE TIME STEP
C   DAGE IS ZERO IF NOT AGE RUN
C
      TMASS=(FACT*CVAL + DAGE)*VOLN*POROS
cea      PROD=CVAL*VOLN
      DO 600 N=1,NNZER
      IF (NUMTF(N).LE.NODESS) THEN
C
         PRINV=1/POR(NUMTF(N))
         RHS(NUMTF(N))=RHS(NUMTF(N))+
cea     *                  FACT*TFVAL(N)*PROD*POROS/POR(NUMTF(N))
     *                  TFVAL(N)*TMASS*PRINV
      ELSE
         RHSO(NUMTF(N)-NODESS)=RHSO(NUMTF(N)-NODESS)
cea     *                           +FACT*TFVAL(N)*PROD*POROS
     *                  +TFVAL(N)*TMASS
      ENDIF
600   CONTINUE     
900   CONTINUE
C
      RETURN
      END
C
C**********************************************************************
      SUBROUTINE CINTERP(JS,IS,KCCUR,KCLAS,NOCTANT,NODESS,
     *     XHAT,YHAT,ZHAT,CVAL,NSCOL,NSROW,NSLAY,
     *     CONLAY)
C**********************************************************************
C
C   GIVEN A POINT IN OCTANT=NOCTANT OF CELL=(JS,IS,KCCUR)
C   USE TRILINEAR INTERPOLATION TO FIND CONCENTRATION AT THAT POINT
C   AT TIME=OLD TIME LEVEL,
C   USING NODAL CONCENTRATION VALUES STORED IN CONLAY.
C   LINEAR BASIS FUNCTIONS IN EACH OF X, Y, AND Z DIRECTIONS ARE
C   USED TO ACCOMPLISH INTERPOLATION.
C
C***********************************************************************
      PARAMETER(precno=5.d-7,SMALL=1.D-4)
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      DIMENSION CONLAY(2*NSCOL-1,2*NSROW-1,3),CWGHT(8)
C
      GOTO (100,200,300,400,500,600,700,800),NOCTANT
C
C   X,Y,Z<0
100   CWGHT(1)= H(XHAT)*H(YHAT)*H(ZHAT)
      CWGHT(2)=-F(XHAT)*H(YHAT)*H(ZHAT)
      CWGHT(3)= F(XHAT)*F(YHAT)*H(ZHAT)
      CWGHT(4)=-H(XHAT)*F(YHAT)*H(ZHAT)
      CWGHT(5)=-H(XHAT)*H(YHAT)*F(ZHAT)
      CWGHT(6)= F(XHAT)*H(YHAT)*F(ZHAT)
      CWGHT(7)=-F(XHAT)*F(YHAT)*F(ZHAT)
      CWGHT(8)= H(XHAT)*F(YHAT)*F(ZHAT)
      JDISP  = -1
      IDISP  = -1
      GOTO 1000
C
C   X,Y<0  Z>0
200   CWGHT(1)= H(XHAT)*H(YHAT)*G(ZHAT)
      CWGHT(2)=-F(XHAT)*H(YHAT)*G(ZHAT)
      CWGHT(3)= F(XHAT)*F(YHAT)*G(ZHAT)
      CWGHT(4)=-H(XHAT)*F(YHAT)*G(ZHAT)
      CWGHT(5)= H(XHAT)*H(YHAT)*F(ZHAT)
      CWGHT(6)=-F(XHAT)*H(YHAT)*F(ZHAT)
      CWGHT(7)= F(XHAT)*F(YHAT)*F(ZHAT)
      CWGHT(8)=-H(XHAT)*F(YHAT)*F(ZHAT)
      JDISP  = -1
      IDISP  = -1
      GOTO 1000
C
C   X<0  Y>0  Z<0
300   CWGHT(1)= H(XHAT)*G(YHAT)*H(ZHAT)
      CWGHT(2)=-F(XHAT)*G(YHAT)*H(ZHAT)
      CWGHT(3)=-F(XHAT)*F(YHAT)*H(ZHAT)
      CWGHT(4)= H(XHAT)*F(YHAT)*H(ZHAT)
      CWGHT(5)=-H(XHAT)*G(YHAT)*F(ZHAT)
      CWGHT(6)= F(XHAT)*G(YHAT)*F(ZHAT)
      CWGHT(7)= F(XHAT)*F(YHAT)*F(ZHAT)
      CWGHT(8)=-H(XHAT)*F(YHAT)*F(ZHAT)
      JDISP  = -1
      IDISP  =  1
      GOTO 1000
C
C   X<0  Y,Z>0
400   CWGHT(1)= H(XHAT)*G(YHAT)*G(ZHAT)
      CWGHT(2)=-F(XHAT)*G(YHAT)*G(ZHAT)
      CWGHT(3)=-F(XHAT)*F(YHAT)*G(ZHAT)
      CWGHT(4)= H(XHAT)*F(YHAT)*G(ZHAT)
      CWGHT(5)= H(XHAT)*G(YHAT)*F(ZHAT)
      CWGHT(6)=-F(XHAT)*G(YHAT)*F(ZHAT)
      CWGHT(7)=-F(XHAT)*F(YHAT)*F(ZHAT)
      CWGHT(8)= H(XHAT)*F(YHAT)*F(ZHAT)
      JDISP  = -1
      IDISP  =  1
      GOTO 1000
C
C   X>0  Y,Z<0
500   CWGHT(1)= G(XHAT)*H(YHAT)*H(ZHAT)
      CWGHT(2)= F(XHAT)*H(YHAT)*H(ZHAT)
      CWGHT(3)=-F(XHAT)*F(YHAT)*H(ZHAT)
      CWGHT(4)=-G(XHAT)*F(YHAT)*H(ZHAT)
      CWGHT(5)=-G(XHAT)*H(YHAT)*F(ZHAT)
      CWGHT(6)=-F(XHAT)*H(YHAT)*F(ZHAT)
      CWGHT(7)= F(XHAT)*F(YHAT)*F(ZHAT)
      CWGHT(8)= G(XHAT)*F(YHAT)*F(ZHAT)
      JDISP  =  1
      IDISP  = -1
      GOTO 1000
C
C   X>0  Y<0  Z>0
600   CWGHT(1)= G(XHAT)*H(YHAT)*G(ZHAT)
      CWGHT(2)= F(XHAT)*H(YHAT)*G(ZHAT)
      CWGHT(3)=-F(XHAT)*F(YHAT)*G(ZHAT)
      CWGHT(4)=-G(XHAT)*F(YHAT)*G(ZHAT)
      CWGHT(5)= G(XHAT)*H(YHAT)*F(ZHAT)
      CWGHT(6)= F(XHAT)*H(YHAT)*F(ZHAT)
      CWGHT(7)=-F(XHAT)*F(YHAT)*F(ZHAT)
      CWGHT(8)=-G(XHAT)*F(YHAT)*F(ZHAT)
      JDISP  =  1
      IDISP  = -1
      GOTO 1000
C
C   X,Y>0  Z<0
700   CWGHT(1)= G(XHAT)*G(YHAT)*H(ZHAT)
      CWGHT(2)= F(XHAT)*G(YHAT)*H(ZHAT)
      CWGHT(3)= F(XHAT)*F(YHAT)*H(ZHAT)
      CWGHT(4)= G(XHAT)*F(YHAT)*H(ZHAT)
      CWGHT(5)=-G(XHAT)*G(YHAT)*F(ZHAT)
      CWGHT(6)=-F(XHAT)*G(YHAT)*F(ZHAT)
      CWGHT(7)=-F(XHAT)*F(YHAT)*F(ZHAT)
      CWGHT(8)=-G(XHAT)*F(YHAT)*F(ZHAT)
      JDISP  =  1
      IDISP  =  1
      GOTO 1000
C
C   X,Y,Z>0
800   CWGHT(1)= G(XHAT)*G(YHAT)*G(ZHAT)
      CWGHT(2)= F(XHAT)*G(YHAT)*G(ZHAT)
      CWGHT(3)= F(XHAT)*F(YHAT)*G(ZHAT)
      CWGHT(4)= G(XHAT)*F(YHAT)*G(ZHAT)
      CWGHT(5)= G(XHAT)*G(YHAT)*F(ZHAT)
      CWGHT(6)= F(XHAT)*G(YHAT)*F(ZHAT)
      CWGHT(7)= F(XHAT)*F(YHAT)*F(ZHAT)
      CWGHT(8)= G(XHAT)*F(YHAT)*F(ZHAT)
      JDISP  =  1
      IDISP  =  1
      GOTO 1000
C
C  INTERPOLATE FROM CONCENTRATIONS STORED IN CONLAY
C
1000  J2M = 2*JS-1
      I2M = 2*IS-1
      JA  = J2M + JDISP
      IA  = I2M + IDISP
      CVAL=CWGHT(1)*CONLAY(J2M,I2M,KCCUR)
     *    +CWGHT(2)*CONLAY( JA,I2M,KCCUR)
     *    +CWGHT(3)*CONLAY( JA, IA,KCCUR)
     *    +CWGHT(4)*CONLAY(J2M, IA,KCCUR)
     *    +CWGHT(5)*CONLAY(J2M,I2M,2)
     *    +CWGHT(6)*CONLAY( JA,I2M,2)
     *    +CWGHT(7)*CONLAY( JA, IA,2)
     *    +CWGHT(8)*CONLAY(J2M, IA,2)
C
      RETURN
C
      END
C*************************************************************************
C      BASIS FUNCTIONS
C
C   BASIS FUNCTIONS USED FOR CINTERP INTERPOLATION
C
      FUNCTION F(V)
            F=2*V
      END
C
      FUNCTION G(V)
            G=1-2*V
      END
C
      FUNCTION H(V)
            H=1+2*V
      END
