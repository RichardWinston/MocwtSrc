C  MAIN PROGRAM CONTROL FOR GWT (MOC3D) SUBROUTINES
C
C*************************************************************************
C  GWT1BAS6CKRP  READ AND PREPARE GWT,  CHECK CONSISTENCY
C*************************************************************************
C
      SUBROUTINE GWT1CKRP6(IBOUND,DELCOL,DELROW,
     *  CBNDY,NTFACE,LBNDY,
     *  XFOR,XBAC,YFOR,YBAC,
     *  SC1,SC2,RF,BOTM,NBOTM,
     *  CONC,CONINT,CFXHBC,CINFL,
     *  THCK,ALONG,ATRANH,ATRANV,
     *  POR,PNEWC,PNEWR,PNEWL,IGENPT,
     *  FDTMTH,EPSSLV,IDIREC,NCXIT,MAXIT,
     *  SBVL,NEWPTS,NSCOL,NSROW,NSLAY,NODESS,
     *  NCOL,NROW,NLAY,IOUTS,INMOC,
     *  iunit,lcwell,nwelvl,mxwell,lcdrai,ndrnvl,mxdrn,
     *  lcrivr,nrivvl,mxrivr,lcbnds,nghbvl,mxbnd,
     *  lcdrtf,ndrtvl,mxdrt,ICLAKE,
     *  lcievt,lsevtf,lscrch,lcirch,lcrech,
     *  LCHFB,lshfbl,lshfbd,LSCCBD,
     *  LCFLLC,LCBDFV,LCHDLC,LCBDHV,
     *  ICSTRT,JRF,NODISP,NPNTVL,NPNTCL,NPNTDL,NPNTPL,
     *  IVELFM,ICONFM,IDSPFM,IPRTFM,cnoflw,
     *  ICONLY,IFXHED,ISS,NCINFL,INTRPL,IDIM,NPTPND,MOCTYPE,
     *  CC,HY,
     *  IOBLST,NUMOBS,JUNIT,IOBSFL,
     *  SRCDCY,KKSTP,NSTP,KKPER,NPER,PERTIM,TOTIM,
     *  HNEW,SUMTCH,BUFF,
     *  DKZO,DKFO,DKZS,
     *  DKFS,IDKRF,IDKZO,IDKFO,IDKZS,IDKFS,
     *  DPCON,DPXRAT,DPPOR,
     *  DPZO,DPFO,
     *  IDPZO,IDPFO,IDPPS,IWDFLG,LCSEG,
     *  LCSTRM,ICSTRM,NSTRM,NSS,LCOTFLW,LCIVAR,ICSEG,LCOTSG,
     *  LWRT,LSLAKE,LSPPT,LSAUG,LSRNF,LSCGWL,LSSLAK,LSSWIN,
     *  LSCOUT,LSCONQ,LSCNRN,LSCNTB,LSCQIN,LSCGW,LSSLIN,
     *  LSSWOT,LSSPPT,LSCDRW,LSSRUN,LSGWIN,LSGWOT,LKACC7,LSOVOL,
     *  LSDONE,LSKLK,LSLKSM,LSFLOB,LSRTCO,LSALKI,LSALKO,
     *  LKNODE,
     *  LCCNDF,IMSUB,IMSUB1,LCWTDR,LKACC2,LCRNF,LSCLKO,LSCPPT,
     *  INTRB,INDV,ISTRIN,ISTROT,LCSFRQ,ISTGLD,ISTGNW,LAYHDT,NIUNIT,
cgage
     *  LKACC1,LKACC8,LKACC9,LKACC5,LKACC6,LKFLXI,LKCNN,
     *  LCSTAG,LKVI,LKCLKI,ISTGLD2,
cgzh varpt
     *  LSPCOR,LSPROR,LSPLOR,REMCRIT,GENCRIT,IRAND,ISRCFIX,
     *  ISEEDPT,ISEEDBD,
cgzh ssfix
     *  ISSFLG,MULTSS,
     *  BFCH,NCHNDS,NZERO,NSKIP,
cgzh cbdy
     *  CINFLA,CINFLB,CINXY,IABOVE,IBELOW,
cgzh mnw
     *  LCWEL2,NEVTOP,LCMNW2,LCMNWN,
cgzh zinn%
     *  CINIT,CTNMO,
cea
     *  SRCAGE,
csfr
     1  COUT,CONCQ,CONCRUN,CNTRIB,
     2  CQIN,CGW,CONCPPT,
	3  NSOL,NSEGDIM) 
C     ******************************************************************
C
CMOCWT
      INCLUDE 'ptwt.inc'
      INTEGER LAYHDT(999),BFCH
      DIMENSION BFCH(4,NCHNDS)
cgzh debug double sbvl
      DOUBLE PRECISION SBVL
      DOUBLE PRECISION HNEW,DUM
      DIMENSION SBVL(6,NIUNIT)
      DIMENSION IBOUND(NCOL,NROW,NLAY),DELCOL(NCOL),DELROW(NROW),
     *  SC1(NCOL,NROW,NLAY),SC2(NCOL,NROW,NLAY),
     *  BOTM(NCOL,NROW,0:NBOTM)
      DIMENSION RF(NODESS),
     *  CONC(NODESS),CONINT(NODESS),CINFL(NCINFL),
     *  CINXY(NSCOL,NSROW,NSLAY),
cgzh thck was nodess?? fix 12/9/04
     *  CFXHBC(NSCOL,NSROW,NSLAY),THCK(NSCOL,NSROW,NSLAY),
     *  ALONG(NSLAY),ATRANH(NSLAY),ATRANV(NSLAY),
     *  POR(NODESS),PNEWC(NEWPTS),PNEWR(NEWPTS),PNEWL(NEWPTS),
     *  IGENPT(NODESS),CC(NCOL,NROW,NLAY),HY(NCOL,NROW,NLAY)
      DIMENSION IOBLST(4,NUMOBS)
      DIMENSION IUNIT(NIUNIT)
      DIMENSION JUNIT(NIUNIT)
      DIMENSION HNEW(NCOL,NROW,NLAY),BUFF(2,NUMOBS)
      DIMENSION DKZO(NODESS),DKFO(NODESS),
     1   DKZS(NODESS),DKFS(NODESS)
      DIMENSION DPCON(NODESS),DPXRAT(NODESS),DPPOR(NODESS),
     1   DPZO(NODESS),DPFO(NODESS)
c sfr
      DIMENSION COUT(NSTRM,NSOL),CONCQ(NSEGDIM,NSOL),
     1          CONCRUN(NSS,NSOL),CNTRIB(NSS,NSOL),CQIN(NSOL),
     2          CGW(NSOL),CONCPPT(NSEGDIM,NSOL)
cgzh ssfix
      DIMENSION ISSFLG(NPER)
cgzh cbdy
      DIMENSION CINFLA(NSCOL,NSROW),CINFLB(NSCOL,NSROW)
cgzh zinn%
      DIMENSION CINIT(NODESS),CTNMO(NODESS)
cellam
      DIMENSION XFOR(NSCOL),XBAC(NSCOL),YFOR(NSROW),
     *  YBAC(NSROW),CBNDY(NTFACE),LBNDY(NTFACE)
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
cellam
      COMMON /DISCOM/LBOTM(999),LAYCBD(999)
C
      COMMON /GWT/ CDEL,RDEL,CNOFLO,CELDIS,FZERO,NZCRIT
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
C
      DUM=0.0
      SDUM=0.0
      NZERO=0
      NSKIP=0
CGWT  READ GWT DATA
      CALL GWT1BAS6RP(IBOUND,DELCOL,DELROW,
cellam
     *  CBNDY,NTFACE,LBNDY,
     *  XFOR,XBAC,YFOR,YBAC,
cellam
     *  RF,NCNFBD,NBOTM,BOTM,
     *  CONC,CONINT,CFXHBC,CINFL,
     *  THCK,ALONG,ATRANH,ATRANV,
     *  POR,PNEWC,PNEWR,PNEWL,IGENPT,
     *  FDTMTH,EPSSLV,IDIREC,NCXIT,MAXIT,
     *  SBVL,NEWPTS,NSCOL,NSROW,NSLAY,NODESS,
     *  NCOL,NROW,NLAY,IOUTS,INMOC,
     *  ICSTRT,JRF,NODISP,
     *  NPNTVL,NPNTCL,NPNTDL,NPNTPL,
     *  IVELFM,ICONFM,IDSPFM,IPRTFM,JUNIT(4),JUNIT(5),
     *  ICONLY,IFXHED,ISSFLG(1),NCINFL,INTRPL,IDIM,NPTPND,MOCTYPE,
     *  JUNIT(11),DKZO,DKFO,DKZS,DKFS,
     *  IDKRF,IDKZO,IDKFO,IDKZS,IDKFS,
     *  JUNIT(10),DPCON,DPXRAT,DPPOR,
     *  DPZO,DPFO,IDPZO,IDPFO,IUNIT(22),NIUNIT,SRCAGE,
cgzh varpt
     *  JUNIT(13),JUNIT(14),REMCRIT,GENCRIT,IRAND,ISRCFIX,
     *  ISEEDPT,ISEEDBD,
cgzh cbdy
     *  JUNIT(16),CINFLA,CINFLB,CINXY,IABOVE,IBELOW)
C
      cnoflw=cnoflo
C
CGWT----CHECK FOR CONSISTENCY BETWEEN MODFLOW AND GWT PARAMETERS
      CALL GWT1BAS6CK(THCK,POR,DELCOL,DELROW,
     *   IBOUND,CC,HY,SC1,SC2,IUNIT,ISSFLG,NPER,
     *   NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *   IOUTS,IWDFLG,LAYHDT,NIUNIT)
C
C     pointer & variable initialization for unused MODFLOW packages
      if (iunit(2).eq.0) then
         lcwell=1
         nwelvl=1
         mxwell=1
      end if
      if (iunit(3).eq.0) then
         lcdrai=1
         ndrnvl=1
         mxdrn=1
      end if
      if (iunit(4).eq.0) then
         lcrivr=1
         nrivvl=1
         mxrivr=1
      end if
      if (iunit(5).eq.0) then
         lcievt=1
         NEVTOP=1
      end if
      if (iunit(7).eq.0) then
         lcbnds=1
         nghbvl=1
         mxbnd=1
      end if
      if (iunit(8).eq.0) then
         lscrch=1
         lcirch=1
         lcrech=1
      end if
c bug fix (hfb to fhb)
	if (iunit(21).eq.0) then
	   LCHFB=1
	   LSHFB=1
	end if
	if (iunit(16).eq.0) then
	   LCFLLC=1
	   LCBDFV=1
	   LCHDLC=1
	   LCBDHV=1
	end if
	if (iunit(22).eq.0) then
         LWRT=1
         LSLAKE=1
         LSPPT=1
         LSAUG=1
         LSRNF=1
         LSCGWL=1
         LSSLAK=1
         LSSWIN=1
         LSSWOT=1
         LSSPPT=1
         LSCDRW=1
         LSSRUN=1
         LSGWIN=1
         LSGWOT=1
         LKACC7=1
         LSOVOL=1
         LSDONE=1
         LSKLK=1
         LSLKSM=1
         LSFLOB=1
         LSALKI=1
         LSALKO=1
         LKNODE=0
	   ICLAKE=1
	   LSRTCO=1
	   LCCNDF=1
	   IMSUB=1
	   IMSUB1=1
	   LCWTDR=1
	   LKACC2=1
	   LCRNF=1
	   LSCLKO=1
	   INTRB=1
	   INDV=1
	   ISTGLD=1
	   ISTGNW=1
cgage
         LKACC1=1
	   LKACC8=1
	   LKACC9=1
	   LKACC5=1
	   LKACC6=1
	   LKFLXI=1
	   LKCNN=1
         LCSTAG=1
	   LKVI=1
	   LKCLKI=1
         ISTGLD2=1
	end if
csfr
      IF (IUNIT(44).EQ.0) THEN
         NSTRM=0
         LCSTRM=1
         ICSTRM=1
         LCIVAR=1
         LCOTFLW=1
         LCOTSG=1
         ICSEG=1
         LCSEG=1
         LSCOUT=1
         LSCONQ=1
         LSCNRN=1
         LSCNTB=1
         LSSLIN=1
         LSCQIN=1
         LSCGW=1
	   LSCPPT=1
	   ISTRIN=1
	   ISTROT=1
         LCSFRQ=1
c  if sfr on, initialize arrays
      ELSE
        CALL SMOC5Z(COUT,NSTRM,NSOL,1,0.0)
        CALL SMOC5Z(CNTRIB,NSS,NSOL,1,0.0)
        CALL SMOC5Z(CQIN,NSOL,1,1,0.0)
        CALL SMOC5Z(CGW,NSOL,1,1,0.0)
      END IF
c drt
      if (iunit(40).eq.0) then
         lcdrtf=1
         ndrtvl=1
         mxdrt=1
      end if
c mnw
      if (iunit(50).eq.0) then
         LCWEL2=1
      end if
c mnw2
      if (iunit(57).eq.0) then
         LCMNW2=1
         LCMNWN=1
      end if
cgzh varpt
cgzh set these since could be undefined in MOVE routine
      IF(JUNIT(13).EQ.0.AND.JUNIT(14).EQ.0) THEN
	   LSPCOR=1
	   LSPROR=1
	   LSPLOR=1
      END IF
cgzh ccbd
      IF(JUNIT(25).EQ.0) THEN
	   LSCCBD=1
      END IF
      
C
C WRITE WARNINGS FOR UNSUPPORTED PACKAGES
C RESERVOIR (RES)
	if (iunit(17).gt.0) then
		WRITE(IOUTS,100) 'RES'
	end if
C STREAM (STR)
	if (iunit(18).gt.0) then
		WRITE(IOUTS,100) 'STR'
	    WRITE(IOUTS,'(/,60A,/)') 'TO REPRESENT STREAMS,',
     *      ' USE SFR PACKAGE WITH GWT'
	end if
C INTERBED STORAGE (IBS)
	if (iunit(19).gt.0) then
		WRITE(IOUTS,100) 'IBS'
	end if
C INTERBED STORAGE (SUB)
	if (iunit(54).gt.0) then
		WRITE(IOUTS,100) 'SUB'
	end if
C MULTI NODE WELL (MNW)
c	if (iunit(50).gt.0) then
c		WRITE(IOUTS,100) 'MNW'
c	end if
C DA FLOW (DAF)
	if (iunit(51).gt.0.or.iunit(52).gt.0) then
		WRITE(IOUTS,100) 'DAF'
	end if
C
 100  FORMAT(/,2X,'*** WARNING ***',/,2X,A3,' PACKAGE NOT SUPPORTED BY', 
     *  ' GWT PROCESS',/,2X,3A,' NODES WITHIN TRANSPORT',
     *  'SUBGRID MAY RESULT IN INCONSISTENT RESULTS',/)
C
cgzh ssfix
CMOCWT
C FOR WEIGHTED PARTICLE OPTION, CHECK TO SEE IF THERE ARE ANY STEADY-STATE
C   STRESS PERIODS AFTER THE 1st PERIOD.  IF SO, SET MULTSS=1 TO FLAG NEED
C   TO ONLY DO MASS BALANCE CALCULATION FOR INDIVIDUAL SPs and NOT ENTIRE
C   SIMULATION (CUMU BUDGET PRINTED SEPARATELY)
      IF(PTWTON.EQ.1) THEN
        MULTSS=0
        DO 88 KPER=2,NPER
          IF(ISSFLG(KPER).EQ.1) MULTSS=1
   88   CONTINUE
      END IF
c moved to LDAS, after flow sol'n
c also moved xd_mask initialization to that routine; needs to be after 
c flow call in case of dry cells
C.....Pointer initialization for iterative solver
c      IF(MOCTYPE.EQ.2)
c     X   CALL INIT(IBOUND,
c     X     CI,CIN,CIR,CIRH,CIRL,
c     X     IND,MRNO,MRNO0,
c     X     EPSSLV,MAXIT,IDIREC,NPCELL,
c     X     NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NBN,NRN)
C
CGWT----READ OBSERVATION LOCATIONS
      IF(JUNIT(8).GT.0)
     *   CALL GWT1OBS5RP(IOBLST,NUMOBS,
     *                  IOUTS,JUNIT(8),IOBSFL)
C
CGWT----READ BOUNDARY FLUX INFO FOR CONSTANT HEAD CELLS
      IF(JUNIT(15).GT.0.AND.NCHNDS.GT.0)
     *   CALL GWT1BFLX5RP(BFCH,NCHNDS,IOUTS,JUNIT(15),IBOUND,
     *     NCOL,NROW,NLAY)
C
C Initialize arrays for pct change and gamma output
      IF(JUNIT(19).GT.0.OR.JUNIT(20).GT.0.OR.
     &   JUNIT(21).GT.0.OR.JUNIT(22).GT.0) THEN
        CINIT=CONC
        CTNMO=CONC
      END IF
cgzh this calls moved to main, after the CCBD read call, in case CCBD changed init conc
CGWT----PRINT INITIAL CONCENTRATION DATA
c      CALL SMOC6C(CONC,THCK,SBVL,SRCDCY,
c     *    KKSTP,NSTP,KKPER,NPER,0,0,SDUM,
c     *    DELCOL,DELROW,NCOL,NROW,NLAY,
c     *    NSCOL,NSROW,NSLAY,IOUTS,JUNIT,PERTIM,TOTIM,SDUM,
c     *    NPNTCL,ICONFM,ICONLY,
c     * IDKZO,IDKFO,IDKZS,IDKFS,
c     * IDPZO,IDPFO,IUNIT(44),IUNIT(22),IUNIT(40),NIUNIT,
CMOCWT
c     * DUM,IUNIT,MULTSS,
cea
c     * SRCAGE,IUNIT(57))
C
CDP----PRINT INITIAL DOUBLE POROSITY CONCENTRATION DATA
c      IF(JUNIT(10).GT.0.AND.IDPPS.NE.0) CALL SDP6C(DPCON,
c     *    KKSTP,NSTP,KKPER,NPER,0,0,
c     *    NSCOL,NSROW,NSLAY,IOUTS,JUNIT,PERTIM,TOTIM,DUM,
c     *    NPNTCL,ICONFM,IDPPS,NIUNIT)
C
CGWT----WRITE INITIAL CONDITION TO OBSERVATION WELLS
cgzh debug zinn (had commented this out to get rid of HNEW print at init cond
c      IF (JUNIT(8).GT.0)
c     *CALL SOBS5O(HNEW,CONC,SUMTCH,IOBLST,0,
c     *                  NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,NUMOBS,IOBSFL,
c     * HNEW,HNEW)
	RETURN
      END
C
C
C*************************************************************************
C  GWT1BAS6INIT  INITIALIZE GWT TERMS BASED ON FLOW SOLUTION
C*************************************************************************
C
      SUBROUTINE GWT1BAS6INIT(IUNIT,
     *   HNEW,IBOUND,HOLD,BOTM,NBOTM,
     *   THCK,NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,
     *   IOUTS,ISS,CONC,RF,POR,SBVL,JRF,
     *   PC,PR,PL,PCONC,IPTID,NPCELL,
     *   PNEWC,PNEWR,PNEWL,LIMBO,
     *   NEWPTS,NPMAX,NLIMBO,NP,MOCTYPE,LAYHDT,NIUNIT,
cgzh debug ptwt to pt files
     *   JUNIT,KKPER,NPER,KKSTP,NSTP,IIMOV,NMOV,TIMV,NPNTPL,SUMTCH,PTWT,
cgzh varpt
     *   PCORIG,PRORIG,PLORIG,NPTLAYA,NPTROWA,NPTCOLA,IDIM,IPERGWT,
cgzh wtfac
     *   WTFAC,IPRTFM)
C     ******************************************************************
C
      INTEGER LAYHDT(999)
cgzh debug double sbvl
      DOUBLE PRECISION SBVL
      DOUBLE PRECISION HNEW
      DOUBLE PRECISION PTWT
      COMMON /GWT/ CDEL,RDEL,CNOFLO,CELDIS,FZERO,NZCRIT
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
      DIMENSION HNEW(NCOL,NROW,NLAY),
     *  IBOUND(NCOL,NROW,NLAY),
     *  HOLD(NCOL,NROW,NLAY),
     *  BOTM(NCOL,NROW,0:NBOTM),
     *  THCK(NSCOL,NSROW,NSLAY),
     *  CONC(NSCOL,NSROW,NSLAY),
     *  RF(NSCOL,NSROW,NSLAY),POR(NSCOL,NSROW,NSLAY),
     *  SBVL(6,NIUNIT),WTFAC(NSCOL,NSROW,NSLAY)
      DIMENSION PC(NPMAX),PR(NPMAX),PL(NPMAX),PCONC(NPMAX),
     *     IPTID(NPMAX),NPCELL(NSCOL,NSROW,NSLAY),
     *   PNEWC(NEWPTS),PNEWR(NEWPTS),PNEWL(NEWPTS),LIMBO(NLIMBO)
cgzh debug ptwt to pt files
      DIMENSION PTWT(NPMAX)
      DIMENSION IUNIT(NIUNIT)
      DIMENSION JUNIT(NIUNIT)
cgzh varpt
      DIMENSION PCORIG(NPMAX),PRORIG(NPMAX),PLORIG(NPMAX)
      DIMENSION NPTCOLA(NSCOL,NSROW,NSLAY),NPTROWA(NSCOL,NSROW,NSLAY),
     *          NPTLAYA(NSCOL,NSROW,NSLAY)
C
CGWT----CALCULATE INITIAL SOLUTE MASS STORED FOR CHEMICAL MASS BALANCE
c IF 1ST SP IS TRANSIENT, GET INIT MASS BEFORE THCK UPDATE
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
cgzh SSTR	  IF(KKPER.EQ.1.AND.ISS.EQ.0) THEN
	  IF(KKPER.EQ.IPERGWT.AND.ISS.EQ.0) THEN
          SUMTCH=0.0
          CALL SMOC6IM(IBOUND,CONC,THCK,RF,
     *     POR,SBVL,NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,IOUTS,JRF,NIUNIT)
C
        END IF
      END IF
C
C
CGWT----SET INITIAL SATURATED THICKNESS FOR WATER-TABLE CELLS
c set thck at beginning of simulation 
c   and at beginning of all subsequent SS stress periods 
      CALL SMOC6TK(HNEW,IBOUND,HOLD,BOTM,NBOTM,
     *     THCK,NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,
     *     IOUTS,ISS,LAYHDT)
C
C PRINT THICKNESS
      DO 1310 KS=1,NSLAY
          CALL ULAPRWC(THCK,NSCOL,NSROW,KS,IOUTS,1,
     &  'UPDATED SATURATED THICKNESS')
 1310 CONTINUE
C
CGWT----CALCULATE INITIAL SOLUTE MASS STORED FOR CHEMICAL MASS BALANCE
cellam (call to do mb init is within "move" loop)
c IF 1ST SP IS STEADY, GET INIT MASS AFTER THCK UPDATE
c below here only want to do at very beginning (only kkper=1) and not ellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
cgzh SSTR	  IF(KKPER.EQ.1.AND.ISS.EQ.1) THEN
	  IF(KKPER.EQ.IPERGWT.AND.ISS.EQ.1) THEN
          SUMTCH=0.0
          CALL SMOC6IM(IBOUND,CONC,THCK,RF,
     *     POR,SBVL,NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,IOUTS,JRF,NIUNIT)
        END IF
      END IF
C
CGWT----CALL SMOC5GP TO GENERATE INITIAL PARTICLES
cgzh SSTR      IF((KKPER.EQ.1).AND.(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2)) THEN
      IF((KKPER.EQ.IPERGWT).AND.
     *    (MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2)) THEN
cgzh initialize np
        np=0 
        IF(JUNIT(13).EQ.0.AND.JUNIT(14).EQ.0) THEN
          CALL SMOC5GP(PC,PR,PL,PCONC,CONC,
     *     IPTID,NPCELL,IBOUND,
     *     PNEWC,PNEWR,PNEWL,LIMBO,NCOL,NROW,NLAY,
     *     NSCOL,NSROW,NSLAY,NEWPTS,NPMAX,NLIMBO,
     *     IOUTS,NP,WTFAC)
        ELSE
CGWT----GENERATE PARTICLES--IPDL OR IPDA
cgzh varpt
cgzh  set ptwt=0 here; will be updated later from main
          CALL SMOC1IPD(PC,PR,PL,PCONC,CONC,NPCELL,IBOUND,
     *     PTWT,PCORIG,PRORIG,PLORIG,NPTLAYA,NPTROWA,NPTCOLA,IDIM,
     *     NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NPMAX,IOUTS,NP,LIMBO,NLIMBO,
     *     WTFAC)        
        END IF
CGWT----DUMP INITIAL PARTICLE LOCATIONS  (IIMOV=0)
cgzh debug ptwt to pt files
c         PTWT=0.0
         IF(JUNIT(4).GT.0)
     *      CALL SMOC5P(PC,PR,PL,PCONC,
     *                  JUNIT(4),KKPER,NPER,KKSTP,NSTP,0,NMOV,0.0,
     *                  NP,SUMTCH,NPNTPL,0,PTWT,
cgzh wtfac
     *                  NSCOL,NSROW,NSLAY,WTFAC,IPRTFM,IOUTS)
         IF(JUNIT(5).GT.0)
     *      CALL SMOC5P(PC,PR,PL,PCONC,
     *                  JUNIT(5),KKPER,NPER,KKSTP,NSTP,0,NMOV,0.0,
     *                  NP,SUMTCH,NPNTPL,1,PTWT,
cgzh wtfac
     *                  NSCOL,NSROW,NSLAY,WTFAC,IPRTFM,IOUTS)
C
CGWT----END INITIALIZE TRANSPORT TERMS
        ELSEIF (MOCTYPE.EQ.3) THEN
cellam
	      WRITE(IOUTS,'(/,80A,/)') 'PARTICLES NOT USED WITH ELLAM ',
     *        'METHOD; NO PARTICLE OUTPUT.'
	END IF
C
      RETURN
      END
C
C
C*************************************************************************
C  MOC5VELO  CALCULATE FLOWS ACROSS BOUNDARIES OF SUBGRID, 
C            CALCULATE VELOCITIES
C*************************************************************************
C
      SUBROUTINE GWT1VEL6(CTCFLO,BUFF,LOCBDY,
     *      IDIR,ID,NCOL,NROW,NLAY,IC1,IC2,IR1,IR2,IL1,
     *      IL2,NFACES,NCINFL,
     *      THCK,POR,RF,VC,VR,VL,
     *      IBOUND,NSCOL,NSROW,NSLAY,IOUTS,NTIMV,
     *      VCMAX,VRMAX,VLMAX,TLMIN,
     *      MAXVCJ,MAXVCI,MAXVCK,MAXVRJ,MAXVRI,MAXVRK,
     *      MAXVLJ,MAXVLI,MAXVLK,
     *      DELT,KKSTP,KKPER,NSTP,NPER,TIMV,TOTIM,ITCD,
     *      NPNTVL,IVELFM,JUNIT,SUMTCH,
     *      DKZO,DKFO,DKZS,
     *      DKFS,IDKZO,IDKFO,IDKZS,IDKFS,
cellam
     *      MOCTYPE,TCMIN,TRMIN,DELCOL,DELROW,NIUNIT,
cellam  
cgzh vlwt
     *      LAYHDT,HNEW,HOLD,BOTM,NBOTM,ISS)
C     ******************************************************************
C
      DIMENSION BUFF(NCOL,NROW,NLAY),CTCFLO(NFACES),LOCBDY(3,NFACES),
     *   THCK(NSCOL,NSROW,NSLAY),
     *   POR(NSCOL,NSROW,NSLAY),RF(NSCOL,NSROW,NSLAY),
     *   VC(NSCOL+1,NSROW,NSLAY),VR(NSCOL,NSROW+1,NSLAY),
     *   VL(NSCOL,NSROW,NSLAY+1),
     *   IBOUND(NCOL,NROW,NLAY)
      DIMENSION DKZO(NSCOL,NSROW,NSLAY),
     *  DKFO(NSCOL,NSROW,NSLAY),
     *   DKZS(NSCOL,NSROW,NSLAY),DKFS(NSCOL,NSROW,NSLAY)
      DIMENSION JUNIT(NIUNIT)
cellam
      DIMENSION DELCOL(NCOL),DELROW(NROW)
cgzh vlwt
      DOUBLE PRECISION HNEW
C
      DIMENSION HNEW(NCOL,NROW,NLAY),
     *  HOLD(NCOL,NROW,NLAY),LAYHDT(NLAY),
     *  BOTM(NCOL,NROW,0:NBOTM)
C
      COMMON /DISCOM/LBOTM(999),LAYCBD(999)
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
cellam
C
      COMMON /GWT/ CDEL,RDEL,CNOFLO,CELDIS,FZERO,NZCRIT
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
C
CGWT----CALCULATE FLOWS ACROSS BOUNDARIES OF SUBGRID
            IF(NCINFL.GT.0)
     *        CALL SMOC5BY(CTCFLO,BUFF,LOCBDY,
     *          IDIR,ID,NCOL,NROW,NLAY,IC1,IC2,IR1,IR2,IL1,
     *          IL2,NFACES)
C
CGWT----CALCULATE VELOCITIES
            CALL VELO(BUFF,VC,VR,VL,IBOUND,
     *         NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,IOUTS,
     *         IDIR,kkstp,
cgzh vlwt
     *         THCK,POR,
     *         LAYHDT,HNEW,HOLD,BOTM,NBOTM,DELT,ISS,DELCOL,DELROW)
C
C
CGWT----PRINT VELOCITIES
C  ---COMPUTE NEXT TIME STEP---
C MOVED TO BELOW STRESS PACKAGE ROUTINES DUE TO BOUNDARY FLUX OPTION
C
      RETURN
      END
C
C
C*************************************************************************
C  MOC5DISP   CALCULATE AND PRINT DISPERSION COEFFICIENTS
C*************************************************************************
C
      SUBROUTINE GWT1DSP6(DISPCC,
     *             DISPCR,DISPCL,DISPRR,DISPRC,DISPRL,DISPLL,
     *             DISPLC,DISPLR,THCK,ALONG,ATRANH,ATRANV,
     *             POR,RF,VC,VR,VL,IBOUND,moctype,
     *             DELT,NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *             IOUTS,NTIMD,TIMDC,NODISP,DIFFUS,TIMV,
     *             KKSTP,NSTP,KKPER,NPER,IDSPFM,NPNTDL,
     *             DELCOL,DELROW,
     *             IHFBUNIT,HFB,NHFB,MXHFB,DSPHFB,INCHFB)
C     ******************************************************************
C
      DIMENSION
     *  DISPCC(NSCOL,NSROW,NSLAY),DISPCR(NSCOL,NSROW,NSLAY),
     *  DISPCL(NSCOL,NSROW,NSLAY),DISPRR(NSCOL,NSROW,NSLAY),
     *  DISPRC(NSCOL,NSROW,NSLAY),DISPRL(NSCOL,NSROW,NSLAY),
     *  DISPLL(NSCOL,NSROW,NSLAY),DISPLC(NSCOL,NSROW,NSLAY),
     *  DISPLR(NSCOL,NSROW,NSLAY),THCK(NSCOL,NSROW,NSLAY),
     *  ALONG(NSLAY),ATRANH(NSLAY),ATRANV(NSLAY),
     *  POR(NSCOL,NSROW,NSLAY),RF(NSCOL,NSROW,NSLAY),
     *  VC(NSCOL+1,NSROW,NSLAY),VR(NSCOL,NSROW+1,NSLAY),
     *  VL(NSCOL,NSROW,NSLAY+1),IBOUND(NCOL,NROW,NLAY)
      DIMENSION HFB(7,MXHFB),DSPHFB(4,MXHFB)
cellam
      DIMENSION DELCOL(NCOL),DELROW(NROW)
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
cellam
C
      COMMON /GWT/ CDEL,RDEL,CNOFLO,CELDIS,FZERO,NZCRIT
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
C
CGWT----CALCULATE DISPERSION COEFFICIENTS
      CALL DSP6FM(
     *    DISPCC,DISPCR,DISPCL,DISPRR,DISPRC,DISPRL,
     *    DISPLL,DISPLC,DISPLR,THCK,ALONG,ATRANH,ATRANV,
     *    POR,RF,VC,VR,VL,IBOUND,moctype,
     *    DELT,NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *    IOUTS,NTIMD,TIMDC,NODISP,DIFFUS,
cellam
     *    DELCOL,DELROW)
c chfb
C correct dispersion coefficients for HFB package
      IF(IHFBUNIT.GT.0.AND.INCHFB.GT.0) CALL DSP6HFB(IBOUND,
     *    DISPCC,DISPCR,DISPRR,DISPRC,DISPCL,DISPRL,
     *    POR,THCK,VC,VR,VL,
     *    NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,IOUTS,    
     *    HFB,NHFB,MXHFB,DSPHFB,MOCTYPE,
     *    DELCOL,DELROW)
C
C
CGWT----PRINT DISPERSION COEFFICIENTS
      CALL SMOC5D(DISPCC,
     *    DISPCR,DISPCL,DISPRR,DISPRC,DISPRL,DISPLL,
     *    DISPLC,DISPLR,
     *    KKSTP,NSTP,KKPER,NPER,NSCOL,NSROW,NSLAY,
     *    IOUTS,NODISP,IDSPFM,NPNTDL)
C
      RETURN
      END
C
C
C     ****************************************************************
C
      SUBROUTINE GWT1LDAS6(
     *     IBOUND,NCOL,NROW,NLAY,
     *     DISPCC,DISPCR,DISPCL,DISPRR,DISPRC,DISPRL,
     *     DISPLL,DISPLC,DISPLR,
     *     NSCOL,NSROW,NSLAY,
     X     THCK,POR,RF,TIMV,
     *     VA,VAD,RHS,CIN,MRNO,FDTMTH,NRN,NODESS,NPCELL,
     X     CI,CIR,CIRH,CIRL,IND,EPSSLV,MAXIT,IDIREC,NBN,MRNO0,
     X     xd_mask,ISSIZH)
C
      DIMENSION
     *  DISPCC(NSCOL,NSROW,NSLAY),DISPCR(NSCOL,NSROW,NSLAY),
     *  DISPCL(NSCOL,NSROW,NSLAY),DISPRR(NSCOL,NSROW,NSLAY),
     *  DISPRC(NSCOL,NSROW,NSLAY),DISPRL(NSCOL,NSROW,NSLAY),
     *  DISPLL(NSCOL,NSROW,NSLAY),DISPLC(NSCOL,NSROW,NSLAY),
     *  DISPLR(NSCOL,NSROW,NSLAY),  THCK(NSCOL,NSROW,NSLAY),
     *     POR(NSCOL,NSROW,NSLAY),    RF(NSCOL,NSROW,NSLAY),
     *  IBOUND(NCOL,NROW,NLAY),NPCELL(NSCOL,NSROW,NSLAY)
      logical xd_mask
      dimension xd_mask(0:NSCOL+1,0:NSROW+1,0:NSLAY+1)
C
      INTEGER CIN,MRNO,CI,CIR,CIRH,CIRL,MRNO0,IND
      DIMENSION VA(6,ISSIZH),VAD(NODESS),RHS(0:NODESS),CIN(6,NODESS),
     X   MRNO(NODESS)
      DIMENSION CI(6,NODESS),CIR(19,ISSIZH),CIRH(10,ISSIZH),
     X   CIRL(10,ISSIZH),MRNO0(NODESS),IND(NODESS)
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
C
         NXY=NSCOL*NSROW
C.....Pointer initialization for iterative solver
c set mask for imp disp routine
      xd_mask=.FALSE.
      DO 10 KS=1,NSLAY  
	 K=KS+ISLAY1-1
	DO 10 IS=1,NSROW
	 I=IS+ISROW1-1
	DO 10 JS=1,NSCOL
	 J=JS+ISCOL1-1
	  IF(IBOUND(J,I,K).NE.0) xd_mask(JS,IS,KS)=.TRUE.
   10 CONTINUE
C
        CALL INIT(IBOUND,
     X     CI,CIN,CIR,CIRH,CIRL,
     X     IND,MRNO,MRNO0,
     X     EPSSLV,MAXIT,IDIREC,NPCELL,
     X     NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NBN,NRN,NODESS,ISSIZH)
        CALL LOADT(
     *     IBOUND,NCOL,NROW,NLAY,
     *     DISPCC,DISPCR,DISPCL,DISPRR,DISPRC,DISPRL,
     *     DISPLL,DISPLC,DISPLR,
     *     NSCOL,NSROW,NSLAY,
     *     THCK,POR,RF,TIMV)
        CALL ASEMBL(
     X     DISPCC,DISPRR,DISPLL,
     X     VA,VAD,RHS,CIN,IBOUND,MRNO,FDTMTH,
     X     NSCOL,NSROW,NSLAY,NXY,NODESS,NRN,
     X     NCOL,NROW,NLAY,
c dzz fix
     X     RF,POR,THCK,
     X     NPCELL)
C
      RETURN
      END
C
C
C*************************************************************************
C  MOC5MVOT PERFORM EACH MOVE, APPROXIMATE CHANGES IN CONCENTRATION,
C           COMPUTE CUMULATIVE SOLUTE MASS BALANCE,PRINT OUTPUT
C*************************************************************************
C
      SUBROUTINE GWT1MVOT6(SRCFLO,SNKFLO,RF,POR,THCK,
     *  VCMAX,VRMAX,VLMAX,TLMIN,TIMV,NTIMV,ITCD,ISS,
     *  MAXVCJ,MAXVCI,MAXVCK,MAXVRJ,MAXVRI,MAXVRK,MAXVLJ,MAXVLI,MAXVLK,
     *  TIMDC,NTIMD,NMOV,SUMTCH,NSCOL,NSROW,NSLAY,IOUTS,
     *  TOTIM,DELT,NODISP,DIFFUS,DECAY,ICONLY,MOCTYPE,
     *  IIMOV,CONC,CNOLD,NPCELL,NPOLD,LOCHFB,IGENLK,
     *  INTRPL,PC,PR,PL,PCONC,IPTID,
     *  VC,VR,VL,CINFL,IBOUND,DELCOL,DELROW,
     *  SUMC,LIMBO,PNEWC,PNEWR,PNEWL,IGENPT,
     *  NEWPTS,NCOL,NROW,NLAY,NPMAX,NLIMBO,NP,NCINFL,IABOVE,IBELOW,
     *  CNCNC,SRCSOL,EVTFLO,IEVT,SRCDCY,NEVTOP,
     *  KKSTP,NSTP,KKPER,NPER,RS,FDTMTH,CAVG,
     *  DISPCC,DISPCR,DISPCL,DISPRR,DISPRC,DISPRL,
     *  DISPLL,DISPLC,DISPLR,VA,VAD,RHS,CIN,
     *  MRNO,AP,PP,RA,RR,SS,
     *  XX,WW,WORK,CI,CIR,CIRH,CIRL,
     *  NCXIT,EPSSLV,MAXIT,NBN,NRN,
     *  CFXHBC,CHDFLO,CTCFLO,LOCBDY,
     *  RECH,CRECH,IRCH,NRCHOP,
     *  WELL,MXWELL,NWELLS,NWELVL,IWELLC,
     *  RIVR,MXRIVR,NRIVER,NRIVVL,IRIVRC,
     *  DRAI,MXDRN,NDRAIN,NDRNVL,
     *  BNDS,MXBND,NBOUND,NGHBVL,IBNDSC,
     *  DRTF,MXDRT,NDRTCL,NDRTVL,IDRTFL,
     *  IFLLOC,BDFV,NFLW,IFHBD4,IFHBFC,
     *  IHDLOC,BDHV,NHED,NFHBX2,IFHBHC,
     *  IUNIT,JRF,SBVL,NFACES,JUNIT,PERTIM,
     *  NPNTCL,ICONFM,HNEW,IOBLST,
     *  NUMOBS,IOBSFL,NPNTPL,NODESS,
     *  DKZO,DKFO,DKZS,
     *  DKFS,IDKZO,IDKFO,IDKZS,IDKFS,
     *  AGER8,
     *  DPCON,DPXRAT,DPPOR,
     *  DPZO,DPFO,
     *  IDPZO,IDPFO,IDPPS,
cellam
     *  RHSE,RHSO,NTFACE,DIAGO,DIAGST,DIAGDS,
     *  IDBNDY,LBNDY,
     *  XFOR,XBAC,YFOR,YBAC,CBNDY,NZIN,
     *  NONU,SAV,IACT,CFOR,RFOR,TFOR,
     *  CONLAY,VOL,RWORK,RWORK1,LENW,JA,IA,A,IDIM,
     *  NELT,NODES,JAS,IAS,AS,NELTS,LENIW,IWORK,NRFLG,
cellam
     *  NSTRMAR,STRM,ISTRM,NSOL,ISTCB1,ICBCFL,IGGLST,
     *  NSSAR,SGOTFLW,IDIVAR,IPTFLG,IOTSG,
     4  ISEG,COUT,CONCQ,CONCRUN,CNTRIB,SOLIN,CQIN,CGW,CLAKE,NLAKESAR,
     5  LKNODE,MXLKND,ILAKE,NTRB,NDV,ITRB,IDIV,STRIN,STROUT,STGOLD,
     1  STGNEW,CNDFCT,BOTM,NBOTM,KCNT,MSUB,MSUB1,SOLPPT,CSWIN,CSWOUT,
     5  CGWL,WTHDRW,CWDRAW,CAUG,PRECIP,VOLLAK,VOLOLD,CPPT,CGWIN,CGWOUT,
     7  CSRUN,CRUNF,CSLAKE,RNF,THETA,CLKSUM,KLK,LKDONE,RATECO,FLOB,
     8  CLKOLD,ALKIN,ALKOUT,LWRT,NUMGAGE,CONCPPT,SEG,
cgage
     *  EVAP,GWIN,GWOUT,SURFIN,SURFOT,FLXINL,SUMCNN,STAGES,VOLINIT,
     *  CLAKINIT,NIUNIT,SFRQ,NSEGDIM,
CMOCWT
     *  PTWT,SUMWT,SRCAVC,BDYSRC,BDYSNK,BDYSOL,SUMSGMS,SUMSGWT,
     *  SUMBFMS,SUMBFWT,
     *  RESIDWT,RESIDC,CELVOL,
     *  REMCRIT,IRAND,ISEEDPT,ISEEDBD,
cgzh disp fix 
     *  xd_mask,NZERO,NSKIP,
cgzh varpt
     *  PCORIG,PRORIG,PLORIG,NPTCOLA,NPTROWA,NPTLAYA,MULTSS,
cgzh cbdy
     *  CINFLA,CINFLB,CINXY,
cgzh mnw
     *  nwell2,mxwel2,well2,MNWid,
     *  SRCMNW,SNKMNW,SOLMNW,MNWSITE,
     *  MNWOLST,MNWUNIT,MNWOBS,
cgzh mnw2
     *  nmnw2,MNWMAX,mnw2,NODTOT,MNWNOD,WELLID,MNWPRNT,
     *  Wel1flag,QSUMflag,BYNDflag,MNWIID,MNWILST,ntotnod,
     *  iout,MNWO,
cgzh srcfix
     *  ISRCID,MAXSRC,NPCELLMAX,SRCFAC,NPORIG,
cgzh srcfix2
     &  SS_SRC,SS_SNK,SS_SOL,ISRCFIX,SRCVOL,
     &  SOL,
     &  TOTFLUXIN,TOTFLUXOT,ICONTRIBIN,ICONTRIBOT,     
cgzh zinn%
     *  CINIT,CTNMO,WTFAC,IPRTFM,
cgzh ptob
     *  IPTOBLST,NUMPTOB,IPTOBMNW,NUMPTOB_MNW,
cea
     *  SAGE,SRCAGE,
cgzh ccbd
     *  INCCBD,CCBDY,IPERGWT,
cgzh mbrpt
     *  IOUTMBRPT,IOUTMBITEM)
C     ******************************************************************
C
CMOCWT
      INCLUDE 'ptwt.inc'
C TEMP ARRAYS 
      DOUBLE PRECISION RESIDWT
cgzh debug double sgmsout + snkmsout
      DOUBLE PRECISION SGMSOUT,SNKMSOUT
      logical xd_mask,xe_mask
      ALLOCATABLE SGMSOUT(:,:,:),SNKMSOUT(:,:,:),
     * xe_mask(:,:,:)
      ALLOCATABLE CWELL(:)
C
      DOUBLE PRECISION CELVOL
cgzh debug double sbvl, sumsgwt
      DOUBLE PRECISION SBVL,SUMSGWT,SUMSGMS,SUMBFWT,SUMBFMS
cgzh debug double ptwt, sumwt
      DOUBLE PRECISION PTWT,SUMWT,SUMC
      DOUBLE PRECISION DECAY,MNWO
      DOUBLE PRECISION HNEW,PRECIP,EVAP
      DOUBLE PRECISION TOTFLUXIN,TOTFLUXOT
      DOUBLE PRECISION mnw2,MNWNOD
      INTEGER CIN,CI,CIR,CIRH,CIRL,MRNO
      DIMENSION
     *  SRCFLO(NSCOL,NSROW,NSLAY),SNKFLO(NSCOL,NSROW,NSLAY),
     *  SRCSOL(NSCOL,NSROW,NSLAY),FLOB(LKNODE),
     *  BOTM(NCOL,NROW,0:NBOTM),
     *  RF(NSCOL,NSROW,NSLAY),POR(NSCOL,NSROW,NSLAY),
     *  THCK(NSCOL,NSROW,NSLAY),IBOUND(NCOL,NROW,NLAY),
     *  CONC(NSCOL,NSROW,NSLAY),CNOLD(NSCOL,NSROW,NSLAY)
      DIMENSION BDFV(IFHBD4,NFLW),IFLLOC(4,NFLW)
      DIMENSION BDHV(NFHBX2,NHED),IHDLOC(4,NHED)
      DIMENSION
     *  NPCELL(NSCOL,NSROW,NSLAY),NPOLD(NSCOL,NSROW,NSLAY),
     *  PC(NPMAX),PR(NPMAX),PL(NPMAX),PCONC(NPMAX),IPTID(NPMAX),
     *  VC(NSCOL+1,NSROW,NSLAY),VR(NSCOL,NSROW+1,NSLAY),
     *  VL(NSCOL,NSROW,NSLAY+1),
     *  CINFL(NCINFL),CAVG(NSCOL,NSROW,NSLAY),
     *  SUMC(NSCOL,NSROW,NSLAY),IGENPT(NSCOL,NSROW,NSLAY),
     *  LIMBO(NLIMBO),PNEWC(NEWPTS),PNEWR(NEWPTS),PNEWL(NEWPTS),
     *  CNCNC(NSCOL,NSROW,NSLAY),
     *  EVTFLO(NSCOL,NSROW,2),IEVT(NROW,NCOL)
cgzh varpt
      DIMENSION PCORIG(NPMAX),PRORIG(NPMAX),PLORIG(NPMAX),
     *  NPTCOLA(NSCOL,NSROW,NSLAY),NPTROWA(NSCOL,NSROW,NSLAY),
     *  NPTLAYA(NSCOL,NSROW,NSLAY)
      DIMENSION
     *  DISPCC(NSCOL,NSROW,NSLAY),DISPCR(NSCOL,NSROW,NSLAY),
     *  DISPCL(NSCOL,NSROW,NSLAY),DISPRR(NSCOL,NSROW,NSLAY),
     *  DISPRC(NSCOL,NSROW,NSLAY),DISPRL(NSCOL,NSROW,NSLAY),
     *  DISPLL(NSCOL,NSROW,NSLAY),DISPLC(NSCOL,NSROW,NSLAY),
     *  DISPLR(NSCOL,NSROW,NSLAY)  
      dimension xd_mask(0:NSCOL+1,0:NSROW+1,0:NSLAY+1)
      DIMENSION CI(6,*),CIR(19,*),CIRH(10,*),CIRL(10,*),
     X     RS(NODESS),VA(6,*),
     X     VAD(NODESS),RHS(0:NODESS),CIN(6,*),MRNO(*),
     X     AP(*),PP(*),RA(10,*),RR(*),SS(*),
     X     XX(*),WW(*),WORK(*)
      DIMENSION SBVL(6,NIUNIT),IUNIT(NIUNIT),JUNIT(NIUNIT)
      DIMENSION WELL(NWELVL,MXWELL),RIVR(NRIVVL,MXRIVR),
     *  DRAI(NDRNVL,MXDRN),BNDS(NGHBVL,MXBND),
     *  RECH(NCOL,NROW),CRECH(NSCOL,NSROW),IRCH(NCOL,NROW),
     *  CHDFLO(NSCOL,NSROW,NSLAY),CTCFLO(NFACES),LOCBDY(3,NFACES),
     *  CFXHBC(NSCOL,NSROW,NSLAY),LOCHFB(NSCOL,NSROW,NSLAY,2),
     *  DRTF(NDRTVL,MXDRT)
      DIMENSION HNEW(NCOL,NROW,NLAY),IOBLST(4,NUMOBS)
      DIMENSION DELCOL(NCOL),DELROW(NROW)
      DIMENSION DKZO(NSCOL,NSROW,NSLAY),
     *  DKFO(NSCOL,NSROW,NSLAY),
     1   DKZS(NSCOL,NSROW,NSLAY),DKFS(NSCOL,NSROW,NSLAY)
      DIMENSION DPCON(NSCOL,NSROW,NSLAY),DPXRAT(NSCOL,NSROW,NSLAY),
     *  DPPOR(NSCOL,NSROW,NSLAY),
     1   DPZO(NSCOL,NSROW,NSLAY),DPFO(NSCOL,NSROW,NSLAY)
      DIMENSION CNDFCT(MXLKND),ILAKE(5,MXLKND),
     1 RNF(NLAKESAR),MSUB(NLAKESAR,NLAKESAR),IGENLK(NSCOL,NSROW,NSLAY),
     2 MSUB1(NLAKESAR),STROUT(NSSAR),ITRB(NLAKESAR,NTRB),
     3 IDIV(NLAKESAR,NDV),STGOLD(NLAKESAR),STGNEW(NLAKESAR),
     4 TOP(NCOL,NROW,NLAY),BOT(NCOL,NROW,NLAY)
       DIMENSION CLAKE(NLAKESAR,NSOL),CPPT(NLAKESAR,NSOL),
     7 VOLOLD(NLAKESAR),CAUG(NLAKESAR,NSOL),RATECO(LKNODE,NSOL),
     8 WTHDRW(NLAKESAR),CWDRAW(NLAKESAR,NSOL),CLKOLD(NLAKESAR,NSOL)
      DIMENSION PRECIP(NLAKESAR),CRUNF(NLAKESAR,NSOL),
     1 SOLPPT(NLAKESAR,NSOL),
     1 VOLLAK(NLAKESAR),CSLAKE(NLAKESAR,NSOL),CSWIN(NLAKESAR,NSOL),
     2 CSWOUT(NLAKESAR,NSOL),CSRUN(NLAKESAR,NSOL),CGWIN(NLAKESAR,NSOL),
     3 CGWOUT(NLAKESAR,NSOL),CGWL(NSOL)
      DIMENSION STRM(24,NSTRMAR),ISTRM(5,NSTRMAR),ISEG(4,NSEGDIM),
     2          SGOTFLW(NSSAR),IDIVAR(2,NSSAR),IOTSG(NSSAR),
     3          SEG(26,NSSAR)
      DIMENSION COUT(NSTRMAR,NSOL),CONCQ(NSEGDIM,NSOL),SOLIN(NSOL),
     1          CONCRUN(NSEGDIM,NSOL),CNTRIB(NSSAR,NSOL),CQIN(NSOL),
     2          CGW(NSOL),CONCPPT(NSEGDIM,NSOL)
      DIMENSION LKDONE(NLAKESAR),KLK(NLAKESAR),CLKSUM(NSOL)
      DIMENSION ALKIN(NSOL),ALKOUT(NSOL)
      DIMENSION IGGLST(4,NUMGAGE)
cgzh cbdy
      DIMENSION CINFLA(NSCOL,NSROW),CINFLB(NSCOL,NSROW)
C
cellam
      DIMENSION RHSE(NODESS),RHSO(NTFACE),DIAGO(NTFACE),
     * DIAGST(27,NODESS),DIAGDS(27,NODESS),
     * IDBNDY(NFACES),LBNDY(NTFACE),
     * XFOR(NSCOL),XBAC(NSCOL),YFOR(NSROW),YBAC(NSROW),
     * CBNDY(NTFACE),NZIN(NODESS),NONU(2,32*NFACES),
     * SAV(32*NFACES),IACT(NSCOL,NSROW,2),
     * CFOR(NSCOL-1,NSROW,2),RFOR(NSCOL,NSROW-1,2),
     * TFOR(NSCOL,NSROW),CONLAY(2*NSCOL-1,2*NSROW-1,3),
     * VOL(NSCOL,NSROW,2),RWORK(LENW),JA(NODESS+1),IA(27*NODESS),
     * A(27*NODESS),JAS(1+NODESS),IAS(27*NODESS),AS(27*NODESS),
     * IWORK(LENIW),RWORK1(NODESS)
CMOCWT
      DIMENSION PTWT(NPMAX)
      DIMENSION SUMWT(NSCOL,NSROW,NSLAY),SRCAVC(NSCOL,NSROW,NSLAY),
     *  BDYSRC(NSCOL,NSROW,NSLAY),BDYSNK(NSCOL,NSROW,NSLAY),
     *  BDYSOL(NSCOL,NSROW,NSLAY),SUMSGMS(NSCOL,NSROW,NSLAY),
     *  SUMSGWT(NSCOL,NSROW,NSLAY),RESIDWT(NSCOL,NSROW,NSLAY),
     *  SUMBFMS(NSCOL,NSROW,NSLAY),SUMBFWT(NSCOL,NSROW,NSLAY),
     *  RESIDC(NSCOL,NSROW,NSLAY),
     *  CELVOL(NSCOL,NSROW,NSLAY),SRCVOL(NSCOL,NSROW,NSLAY)
cgzh mnw
      DIMENSION SRCMNW(NSCOL,NSROW,NSLAY),
     *  SNKMNW(NSCOL,NSROW,NSLAY),SOLMNW(NSCOL,NSROW,NSLAY),
     * IPTOBMNW(NSCOL,NSROW,NSLAY)
      DIMENSION well2(18,mxwel2),MNWid(MNWMAX)
      dimension MNWsite(mxwel2)
      character*32 MNWsite
      character*32 MNWOLST
      DIMENSION MNWOLST(MNWOBS)               
      DIMENSION MNWUNIT(MNWOBS,2),MNWO(MNWMAX,7)              
cgzh srcfix
      DIMENSION ISRCID(NSCOL,NSROW,NSLAY),SRCFAC(MAXSRC,6,3),
     * NPORIG(NSCOL,NSROW,NSLAY)
cgzh srcfix2
      DIMENSION SS_SRC(NSCOL,NSROW,NSLAY),SS_SNK(NSCOL,NSROW,NSLAY),
     &  SS_SOL(NSCOL,NSROW,NSLAY),SOL(NSCOL,NSROW,NSLAY)
      DIMENSION TOTFLUXIN(NSCOL,NSROW,NSLAY),
     & TOTFLUXOT(NSCOL,NSROW,NSLAY),ICONTRIBIN(NSCOL,NSROW,NSLAY,6),
     & ICONTRIBOT(NSCOL,NSROW,NSLAY,6)
cgage
      DIMENSION EVAP(NLAKESAR),CLAKINIT(NLAKESAR,NSOL),
     * GWIN(NLAKESAR),GWOUT(NLAKESAR),SURFIN(NLAKESAR),SURFOT(NLAKESAR),
     * FLXINL(NLAKESAR),SUMCNN(NLAKESAR),STAGES(NLAKESAR),
     * VOLINIT(NLAKESAR)
cmnw2
      CHARACTER*20 WELLID
      dimension WELLID(MNWMAX)
      dimension mnw2(32,MNWMAX),MNWNOD(33,NODTOT)
cgzh ccbd
      DIMENSION CCBDY(NSCOL,NSROW,NSLAY)               
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
cellam 
      COMMON /GWT/ CDEL,RDEL,CNOFLO,CELDIS,FZERO,NZCRIT
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
      COMMON /DISCOM/LBOTM(999),LAYCBD(999)
C ALLOCATE SPACE
	ALLOCATE(SGMSOUT(NSCOL,NSROW,NSLAY),SNKMSOUT(NSCOL,NSROW,NSLAY),
     * xe_mask(0:NSCOL+1,0:NSROW+1,0:NSLAY+1),STAT=ISTAT)
      IF (ISTAT.NE.0) THEN
        WRITE(*,700)ISTAT
  700   FORMAT(1X,'ALLOCATION OF ARRAYS IN MVOT FAILED,',
     &  ' RETURNED ERROR MESSAGE NUMBER: ',I6)
        STOP 'ALLOCATION ERROR: MVOT'
      ENDIF
      if(iunit(57).gt.0) then
	ALLOCATE(CWELL(NODTOT),STAT=ISTAT)
      IF (ISTAT.NE.0) THEN
        WRITE(*,701)ISTAT
  701   FORMAT(1X,'ALLOCATION OF ARRAYS IN MVOT FAILED,',
     &  ' RETURNED ERROR MESSAGE NUMBER: ',I6)
        STOP 'ALLOCATION ERROR: MVOT'
      ENDIF
      end if
C
C Print progress line
C
C Two compiler-specific versions are presented: one for Lahey 
C Fortran and the other for Visual Fortran.  If you are using a 
C different compiler, a generic write and format are provided below.
C  
CGWT----THIS FORMAT STRUCTURE WORKS WITH LAHEY FORTRAN
c      WRITE(*,99) IIMOV,NMOV,KKSTP,NSTP,KKPER,NPER
c  99  FORMAT("+",' MOVE ',I7,' OF ',I7,
c     1       '; STEP ',I7,' OF ',I7,
c	2       '; PERIOD ',I5,' OF ',I5)
C
CGWT----THIS FORMAT STRUCTURE WORKS WITH COMPAQ VISUAL FORTRAN
C The CHAR(13) is ascii escape meaning "go to beginning of line".
C The $ descriptor supresses line feeds.
C This should keep the progress line printing on one line.
C Some compilers/systems may not understand the ascii escape character,
C also, '$' is non-standard and may cause problems with some compilers.
C
      WRITE(*,99) CHAR(13),IIMOV,NMOV,KKSTP,NSTP,KKPER,NPER
  99  FORMAT(A,' MOVE ',I7,' OF ',I7,
     1       '; STEP ',I7,' OF ',I7,
	2       '; PERIOD ',I5,' OF ',I5,$)
C
C The four commented lines below are standard fortran and can be used
C to replace the write statement.  However, the lines will scroll down 
C the screen.
C
CGWT----USE THIS FORMAT STRUCTURE WITH ANY FORTRAN COMPILER
c      WRITE(*,99) IIMOV,NMOV,KKSTP,NSTP,KKPER,NPER
c  99  FORMAT(' MOVE ',I7,' OF ',I7,
c     1       '; STEP ',I7,' OF ',I7,
c	2       '; PERIOD ',I5,' OF ',I5)
C
C
c chfb SET FLAG FOR CHFB PACKAGE
       ONCHFB=0
       IF(IUNIT(21).GT.0.AND.JUNIT(12).GT.0) ONCHFB=1
CGWT----UPDATE TRANSPORT TIME, SAVE CURRENT CONCENTRATION AND NUMBER
CGWT----OF PARTICLES PER CELL (NPCELL); FOR ELLAM, INIT
CGWT----MASS BALANCE ACCUMULATORS
C
      CALL MOC6AD(CONC,CNOLD,NPCELL,NPOLD,NSCOL,NSROW,NSLAY,
     *   MOCTYPE,TIMV,SUMTCH,IOUTS,IIMOV,NMOV,TOTIM,SAGE)
C
C  age all particles and nodes (not ellam)
      IF(JUNIT(9).GT.0) then
        DAGE=AGER8*TIMV
        IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
	   IF (PTWTON.EQ.0) THEN
          CALL AGE6AP(PC,PR,PL,PCONC,CONC,IBOUND,SBVL(1,17),
     *              THCK,POR,DAGE,
     *      NCOL,NROW,NLAY,NP,NSCOL,NSROW,NSLAY)
CMOCWT AGE
         ELSE
          CALL AGE6APWT(PC,PR,PL,PCONC,SBVL(1,17),
     *              PTWT,DAGE,NP,CONC,NSCOL,NSROW,NSLAY,
     *              IBOUND,ncol,nrow,nlay)
         END IF
        END IF
      ELSE
	  IF(MOCTYPE.EQ.3) THEN
          DAGE=0.0
          AGER8=0.0
        ENDIF
      END IF
c
cgzh MNW
c        Process MNW well nodes before moving particles
c  why: C' for any recharge is computed using CNOLD, so to be consistent
c       with when the C' comes from, remove and add weight before advection
c
CGWT----CALCULATE COMPLEX MNW FLUXES AND PRINT WELL CONCENTRATION FILE
C  
		  IF(IUNIT(57).GT.0) THEN
     		  CALL GWT1MNW2CX(nmnw2,MNWMAX,mnw2,NODTOT,MNWNOD,ibound,
     +          ncol,nrow,nlay,WELLID,MNWPRNT,
     +          iouts,conc,srcflo,srcsol,snkflo,nscol,nsrow,nslay,
     +          MNWid,SRCMNW,SNKMNW,SOLMNW,SRCVOL,
     *          RF,DECAY,TIMV,SRCDCY,
     *          DKFO,DKFS,INDK,IDKFO,IDKFS,
     *          SBVL,NIUNIT,Cwell,THCK,iimov,
     *          BOTM,NBOTM,IUNIT(58),MNWO)
            ELSE
	         SOLMNW=0.0
            END IF
cellam
C SKIP IF ELLAM
      IF(MOCTYPE.EQ.3) GO TO 100
cellam
cgzh srcfix2
C    CALCULATE SS_SRC, SS_SNK, SS_SOL, and update for SRCAVC FOR CELLS WITH SS_SRC>0

           IF(PTWTON.GT.0) THEN
            IF(ISRCFIX.GT.0) THEN
              CALL PTWT1SSFL(ISRCID,
     &         IGENPT,IBOUND,
     &         VC,VR,VL,
     &         NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,
     &         RDEL,CDEL,TIMV,
     &         SRCSOL,SRCVOL,SRCDCY,CONC,
     *         DKFO,DKFS,INDK,IDKFO,IDKFS,DECAY,
     &         SS_SRC,SS_SNK,SS_SOL,ISRCFIX,iimov)     
            ELSE
               SS_SOL=0.0
            END IF
C
C    CALCULATE SRCAVC
C
            CALL PTWT1SRAV(SOL,SRCVOL,SRCAVC,NSCOL,NSROW,NSLAY,
     &   SOLMNW,SS_SOL)
           END IF
C
C
CGWT----ADVECT PARTICLES TO NEW LOCATIONS AND COMPUTE CONCENTRATIONS
CGWT----AT END OF MOVE WITHOUT SINK/SOURCES OR DISPERSION
CGWT----DECAY PARTICLE CONCENTRATIONS
C
CGWT----CHECK FLAG FOR INTERPOLATION SCHEME;
CGWT----INTRPL=1:LINEAR INTRPL=2:BILINEAR
	IF (PTWTON.EQ.0) THEN
         CALL MOVE(PC,PR,PL,PCONC,IPTID,
     *     VC,VR,VL,RF,THCK,POR,
     *     CINFL,SRCFLO,SNKFLO,CONC,CAVG,IBOUND,
     *     CNOLD,SUMC,NPCELL,NPOLD,LIMBO,
     *     PNEWC,PNEWR,PNEWL,IGENPT,IGENLK,NEWPTS,
     *     NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NPMAX,NLIMBO,IOUTS,
     *     DECAY,IIMOV,TIMV,NP,NCINFL,IABOVE,IBELOW,
     *     VCMAX,VRMAX,TLMIN,ICONLY,INTRPL,
     *     DKFO,DKFS,JUNIT(11),IDKFO,IDKFS,JUNIT(15),
     *     CINFLA,CINFLB,CINXY,WTFAC,
cgzh ptob
     *     JUNIT(23),SUMTCH,IPTOBLST,
     *     NUMPTOB,NUMPTOB_MNW,
     *     IPTOBMNW,PTWT,SUMWT)
CMOCWT
C	--- WEIGHTED PARTICLE MOVE ROUTINES
	ELSE
C for MOCWTI (implicit), save nzero to check below whether va etc need
c to be redefined       
         IF(MOCTYPE.EQ.2) NSKIPOLD=NZERO+NSKIP
C
c      IF (INTRPL.EQ.1) THEN
         CALL MOVEWT(PC,PR,PL,PCONC,IPTID,
     *     VC,VR,VL,RF,THCK,POR,
     *     CINFL,SRCFLO,SNKFLO,CONC,CAVG,IBOUND,
     *     CNOLD,SUMC,NPCELL,NPOLD,LIMBO,
     *     PNEWC,PNEWR,PNEWL,IGENPT,NEWPTS,
     *     NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NPMAX,NLIMBO,IOUTS,
     *     DECAY,IIMOV,TIMV,NP,NCINFL,IABOVE,IBELOW,
     *     VCMAX,VRMAX,TLMIN,ICONLY,
     *     DKFO,DKFS,JUNIT(11),IDKFO,IDKFS,
CMOCWT
     *     PTWT,SUMWT,SRCAVC,BDYSRC,BDYSNK,BDYSOL,SUMSGMS,SUMSGWT,
     *     SGMSOUT,SNKMSOUT,
     *     SUMBFMS,SUMBFWT,
     *     RESIDWT,RESIDC,CELVOL,NZERO,SBVL,NIUNIT,NSKIP,
cgzh varpt
     *     JUNIT(13),JUNIT(14),PCORIG,PRORIG,PLORIG,
     *     NPTCOLA,NPTROWA,NPTLAYA,IDIM,NMOV,INTRPL,
     *     REMCRIT,IRAND,
cgzh randpt
     *     ISEEDPT,
cgzh randbd
     *     ISEEDBD,
cgzh mnw
     *     SRCMNW,SNKMNW,IUNIT(50),
cgzh srcfix
     *     ISRCID,MAXSRC,NPCELLMAX,SRCFAC,NPORIG,WTFAC,HNEW,JUNIT(15),
cgzh srcfix2
     &     SS_SRC,SS_SNK,ISRCFIX,
     &     TOTFLUXIN,TOTFLUXOT,ICONTRIBIN,ICONTRIBOT,     
cgzh ptob
     *     JUNIT(23),SUMTCH,IPTOBLST,NUMPTOB,IPTOBMNW,NUMPTOB_MNW,
cgzh ccbd
     *     INCCBD,CCBDY,
cgzh et
cgzh debug kkper is debug
     *     IUNIT(5),NEVTOP,IEVT,EVTFLO,JUNIT(9),kkper)
c      ELSE
c         CALL MOVEWTBI(PC,PR,PL,PCONC,IPTID,
c     *     VC,VR,VL,RF,THCK,POR,
c     *     CINFL,SRCFLO,SNKFLO,CONC,CAVG,IBOUND,
c     *     CNOLD,SUMC,NPCELL,NPOLD,LIMBO,
c     *     PNEWC,PNEWR,PNEWL,IGENPT,IGENLK,NEWPTS,
c     *     NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NPMAX,NLIMBO,IOUTS,
c     *     DECAY,IIMOV,TIMV,NP,NCINFL,IABOVE,IBELOW,
c     *     VCMAX,VRMAX,TLMIN,ICONLY,
c     *     DKFO,DKFS,JUNIT(11),IDKFO,IDKFS,
CMOCWT
c     *     PTWT,SUMWT,SRCAVC,BDYSRC,BDYSNK,BDYSOL,SUMSGMS,SUMSGWT,
c     *     SGMSOUT,SNKMSOUT,
c     *     RESIDWT,RESIDC,CELVOL,NZERO,SBVL,NIUNIT,
cgzh varpt
c     *     JUNIT(13),JUNIT(14),PCORIG,PRORIG,PLORIG,
c     *     NPTCOLA,NPTROWA,NPTLAYA,IDIM,
c     *     REMCRIT,GENCRIT)
c      ENDIF
	END IF
C
CGWT----CLEAR CNCNC ARRAY IF DISPERSION OR SINK/SOURCES ACTIVE
      IF(ICONLY.NE.1.OR.NODISP.NE.1.OR.DIFFUS.NE.0.0)
     *  CALL SMOC5Z(CNCNC,NSCOL,NSROW,NSLAY,0.0)
C
CGWT----APPROXIMATE CHANGES IN CONCENTRATION DUE TO FLUID SINK/SOURCES
CMOCWT
C  DO NOT CALL SRC ROUTINES IF USING WEIGHTED PARTICLES
	IF (PTWTON.EQ.0) THEN
        IF(MOCTYPE.EQ.1) THEN
          IF(ICONLY.NE.1) CALL SRC6AP(IBOUND,SRCFLO,SRCSOL,
     *    SNKFLO,RF,CONC,THCK,POR,CNCNC,
     *    CNOLD,CAVG,EVTFLO,IEVT,SRCDCY,
     *    NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NEVTOP,KKSTP,KKPER,IOUTS,
     *    IIMOV,TIMV,DECAY,JUNIT(9))
        ELSEIF(MOCTYPE.EQ.2) THEN
C.....At beginning of time step, load right-hand-side terms with explicit
C.....     data and with explicit source/sink terms
          IF(ICONLY.NE.1) CALL SRC6IAP(IBOUND,SRCFLO,SRCSOL,
     *    SNKFLO,RF,CONC,THCK,POR,
     *    CNOLD,CAVG,EVTFLO,IEVT,SRCDCY,
     *    NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NEVTOP,
     *    TIMV,DECAY,
     X    RS,FDTMTH,VAD,MRNO,NODESS,IIMOV,JUNIT(9))
        END IF
C IF USING WEIGHTED MOCWTI, MUST INITIALIZE RS (USUALLY DONE IN SRC6IAP,
C  BUT THAT IS SKIPPED FOR MOCWTI
      ELSEIF(MOCTYPE.EQ.2) THEN
	  RS=0.0
	END IF
C
C    APPROXIMATE CHANGES IN CONCENTRATION DUE TO ZERO-ORDER GROWTH
      IF(JUNIT(11).GT.0) THEN
        IF(IDKZO.EQ.1.OR.IDKZS.EQ.1) THEN
          IF(MOCTYPE.EQ.1) THEN
            CALL DK6AP(IBOUND,CNCNC,
     *         CAVG,DKZO,DKZS,RF,THCK,POR,
     *         DKZOIN,DKZOOUT,DKZSIN,DKZSOUT,
     *         NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,KKSTP,KKPER,
     *         IIMOV,TIMV,IDKZO,IDKZS)
          ELSE IF(MOCTYPE.EQ.2) THEN
            CALL DK6IAP(IBOUND,CAVG,DKZO,DKZS,RF,
     *         THCK,POR,DKZOIN,DKZOOUT,DKZSIN,DKZSOUT,
     *         NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,KKSTP,KKPER,
     *         TIMV,IDKZO,IDKZS,
     X  RS,FDTMTH,VAD,MRNO,NODESS,IIMOV)
          END IF
          CALL DK6MB(SBVL,DKZOIN,DKZOOUT,DKZSIN,DKZSOUT,IDKZO,IDKZS,
     *               NIUNIT)
        END IF
      END IF
C  DOUBLE POROSITY
      IF(JUNIT(10).GT.0) THEN
          IF(MOCTYPE.EQ.1) THEN
        CALL DP6AP(IBOUND,
     *  DPCON,DPXRAT,DPPOR,DPZO,DPFO,
     *  RF,CAVG,THCK,POR,CNCNC,
     *  NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *  KSTP,KPER,IOUTS,IIMOV,TIMV,
     *  RMASS,ZODPIN,ZODPOUT,FODPIN,FODPOUT,
     *  IDPZO,IDPFO)
        CALL DP6MB(SBVL,
     *    RMASS,ZODPIN,ZODPOUT,FODPIN,FODPOUT,
     *    IDPZO,IDPFO,NIUNIT)
        ELSE
            CALL DP6IAP(IBOUND,
     *  DPCON,DPXRAT,DPPOR,DPZO,DPFO,
     *  RF,CAVG,THCK,POR,
     *  NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *  KSTP,KPER,IOUTS,IIMOV,TIMV,
     *  ZODPIN,ZODPOUT,IDPZO,IDPFO,
     X  RS,FDTMTH,VAD,MRNO,NODESS)
          END IF
C
      END IF
C
CGWT----APPROXIMATE CHANGES IN CONCENTRATION DUE TO DISPERSION
      IF (MOCTYPE.EQ.1) THEN
        IF(NODISP.NE.1.OR.DIFFUS.NE.0.0) CALL DSP6AP(
     *    DISPCC,DISPCR,DISPCL,DISPRR,DISPRC,DISPRL,
     *    DISPLL,DISPLC,DISPLR,THCK,POR,RF,
CMOCWT  added npcell + others 
     *    CONC,CNCNC,IBOUND,CAVG,NPCELL,SUMWT,CELVOL,
     *    NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *    IOUTS,KKSTP,KKPER,IIMOV,TIMV,NODISP,
     *    LOCHFB,ONCHFB)
      ELSEIF (MOCTYPE.EQ.2) THEN
CGWT----APPROXIMATE CHANGES IN CONCENTRATION DUE TO DISPERSION-IMPLICIT
c ... Build the right-hand-side vector dispersive terms for implicit 
c ...      difference equations
        NXY=NSCOL*NSROW
        CALL RHSN(CAVG,DISPCC,DISPRR,DISPLL,RS,
     *      NSCOL,NSROW,NSLAY,NXY,NODESS,
c dzz 
     *      NPCELL)
cgzh debug 
CMOCWT
C set xe_mask (temp for xd_mask) for cells with no pts
c copy xd_mask to temp array; MOCWT needs to alter it for
c cells with NPCELL=0
        xe_mask=xd_mask
        IF(PTWTON.EQ.1) THEN
C if nzero>0 or nzero=0 but nzeroOLD>0, redefine implicit terms
C for logic just exclude the one case where we don't want to call
C i.e., don't call only if nzero and nzeroold are both 0
C
cgzh debug output
c      write(iouts,*) 'NZERO,NZEROOLD',NZERO,NZEROOLD
cgzh debug is this the problem?
c      if(nzero.lt.nzeroold) then
c	write(iouts,*) 'debug this: nzero cells decreased 1'
c	else
c	write(iouts,*) 'debug this: nzero cells decreased 0'
c	end if
          IF(.NOT.(NSKIP.EQ.0.AND.NSKIPOLD.EQ.0)) THEN
C
cgzh debug output
c      write(iouts,*) '**Calling npcell=0 routines**'
            CALL MASKXE(MRNO,xd_mask,xe_mask,NPCELL,
     X       NSCOL,NSROW,NSLAY,NXY,NODESS,NRN)      
C.....Create cell connection list
            CALL CELCONEC(IBOUND,CIN,NPCELL,
     X       NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NODESS)
cgzh debug output
c      do 987 m=1,nodess
c               CALL MTOIJK(M,IS,JS,KS,NSCOL,NSROW)
c      do 987 i=1,6
c	 write(78,*) 'js,is,ks,i,cin(i,m)',js,is,ks,i,cin(i,m)
c  987 continue
C reset VA and VAD for NPCELL=0 cells
            CALL ASEMBL(
     X       DISPCC,DISPRR,DISPLL,
     X       VA,VAD,RHS,CIN,IBOUND,MRNO,FDTMTH,
     X       NSCOL,NSROW,NSLAY,NXY,NODESS,NRN,
     X       NCOL,NROW,NLAY,
     X       RF,POR,THCK,
     X       NPCELL)
          END IF
        END IF
C.....Start the solution of c equations for current time step
C.....Do the concentration cycle
        DO 35 ITRN=1,NCXIT
		  IF(ITRN.EQ.1) THEN
			CALL CR5DSP(CAVG,CNCNC,
     X	     DISPCR,DISPCL,DISPRC,DISPRL,DISPLC,DISPLR,
     X         RS,RHS,CIN,IBOUND,MRNO,
     X         NSCOL,NSROW,NSLAY,NXY,NODESS,NRN,
     X         LOCHFB,ONCHFB,
cgzh send temp array in for xd_mask
     *         THCK,xe_mask)
		  ELSE
			CALL CR5DSP(CONC,CNCNC,
     X         DISPCR,DISPCL,DISPRC,DISPRL,DISPLC,DISPLR,
     X         RS,RHS,CIN,IBOUND,MRNO,
     X         NSCOL,NSROW,NSLAY,NXY,NODESS,NRN,
     X         LOCHFB,ONCHFB,
     *         THCK,xe_mask)
		  ENDIF
C.....Solve the matrix equations
C.....Red-black reduced  conjugate gradient solution
           CALL CGRIES(VA,VAD,RHS,AP,PP,RA,RR,SS,XX,WW,WORK,
     X     EPSSLV,MAXIT,CI,CIR,CIRL,CIRH,NODESS,NRN,NBN,
     X     IOUTS,ITRN,NCXIT)
C
           DO 90 M=1,NODESS
            MA=MRNO(M)
            CALL MTOIJK(M,I,J,K,NSCOL,NSROW)
            CNCNC(I,J,K)=RHS(MA)
   90      CONTINUE
   35   CONTINUE
C.....End of NCXIT-cycle solution loop
      ENDIF
C
C REVERT TO NPCELL WITHOUT DIFFERENCE-IN-VOLUME FLAGS
      DO 95 KS=1,NSLAY
      DO 95 IS=1,NSROW
      DO 95 JS=1,NSCOL
        IF(NPCELL(JS,IS,KS).LT.0) NPCELL(JS,IS,KS)=-NPCELL(JS,IS,KS)
   95 CONTINUE
C
C  UPDATE DOUBLE POROSITY CONCENTRATIONS FOR IMPLICIT MOCTYPE=2
      IF(JUNIT(10).GT.0.AND.MOCTYPE.EQ.2) THEN
          CALL DP6IUP(IBOUND,
     *  DPCON,DPXRAT,DPPOR,DPZO,DPFO,
     *  RF,CAVG,CNCNC,THCK,POR,
     *  NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *  KSTP,KPER,IOUTS,IIMOV,TIMV,
     *  RMASS,FODPIN,FODPOUT,ZODPIN,ZODPOUT,
     *  IDPZO,IDPFO,
     X  FDTMTH)
        CALL DP6MB(SBVL,
     *    RMASS,ZODPIN,ZODPOUT,FODPIN,FODPOUT,
     *    IDPZO,IDPFO,NIUNIT)
C
      END IF
C
CGWT----COMPUTE NEW NODE AND PARTICLE CONCENTRATIONS AT END OF MOVE
      IF(PTWTON.EQ.0) THEN
       IF(ICONLY.NE.1.OR.NODISP.NE.1.OR.DIFFUS.NE.0.0)
     *  CALL MOC5AP(IBOUND,PC,PR,PL,PCONC,
     *    CONC,IGENPT,SUMC,CNCNC,NSCOL,NSROW,NSLAY,
     *    NPMAX,NCOL,NROW,NLAY,IOUTS,NP)
CMOCWT
CGWT----COMPUTE NEW NODE AND PARTICLE CONCENTRATIONS AT END OF MOVE (MOCWT)
      ELSE
       IF(ICONLY.NE.1.OR.NODISP.NE.1.OR.DIFFUS.NE.0.0)
     *  CALL MOC5WTAP(IBOUND,PC,PR,PL,PCONC,
cgzh debug  iimov
     *    SBVL,SUMWT,PTWT,CELVOL,iimov,
     *    CONC,CAVG,SUMC,CNCNC,NSCOL,NSROW,NSLAY,
cgzh debug temp     *    CONC,SUMC,CNCNC,NSCOL,NSROW,NSLAY,
     *    NPMAX,NCOL,NROW,NLAY,IOUTS,NP,NIUNIT,
cgzh ccbd
     *    INCCBD,CCBDY)
      END IF
cgzh debug output
c     if(iimov.eq.25) then
c	write(iouts,*) 'after  wtap 17522 pc=',pc(17522),pconc(17522)
c	end if
cgzh debug output
C
cellam
C SKIP IF MOC OR MOCIMP
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) GO TO 200
C SKIP TO HERE IF ELLAM
 100  CONTINUE
C
CELLAM---CLEAR MATRIX DIAGS, OUTFLOW DIAG AND RHSE
      CALL SMOC5Z(RHSE,NODESS,1,1,0.0)
      CALL SMOC5Z(RHSO,NTFACE,1,1,0.0)
      CALL SMOC5Z(DIAGO,NTFACE,1,1,0.0)
      IF (IIMOV.EQ.1) THEN
         NCOEF=0
         CALL SMOC5Z(DIAGST,27,NODESS,1,0.0)
         CALL SMOC5Z(DIAGDS,27,NODESS,1,0.0)
      ENDIF
C
CELLAM---CREATE BOUNDARY ARRAYS AND ACCUMULATE INFLOW MASS
      CALL ELLBDY(NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,
     *        CINFL,RHSE,RHSO,NODESS,IABOVE,IBELOW,NCINFL,
     *        IDBNDY,CTCFLO,LOCBDY,LBNDY,DIAGO,NFACES,NTFACE,
     *        VC,VR,VL,RF,
     *        THCK,POR,IBOUND,
     *        IOUTS,TIMV,TSTEP2,VCMAX,VRMAX,VLMAX,
     *        DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,DECAY,SRCDCY,
     *        CINFLA,CINFLB,CINXY,
     *        AGER8,SAGE)
C
CELLAM---RHSE INTEGRATE CONCENTRATION AT OLD TIME LEVEL
CELLAM---LHS INTEGRATE CONCENTRATION AT NEW TIME LEVEL
        CALL BDYINT(IIMOV,NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,
     *      JRF,DELCOL,DELROW,THCK,
     *      IBOUND,NODESS,CNOLD,CBNDY,RHSE,RHSO,NTFACE,VC,VR,VL,RF,
     *      POR,TIMV,VCMAX,VRMAX,VLMAX,IOUTS,DIAGST,LBNDY,NZIN,
     *      NFACES,NONU,SAV,XFOR,XBAC,
     *      YFOR,YBAC,CINFL,NCINFL,IABOVE,IBELOW,DECAY,IDIM,NRFLG,DAGE)
C
        CALL ELLLHI(IIMOV,NSCOL,NSROW,NSLAY,
     *   NODESS,NCOL,NROW,NLAY,IBOUND,CNOLD,DIAGST,XFOR,
     *   YFOR,THCK,IACT,CFOR,RFOR,TFOR,CONLAY,VOL,DELCOL,DELROW,
     *   RHSE,RHSO,LBNDY,NZIN,
     *   NTFACE,VC,VR,VL,RF,POR,TIMV,
     *   VCMAX,VRMAX,VLMAX,IOUTS,
     *   XBAC,YBAC,DECAY,NRFLG,DAGE)
C
CELLAM---LHS BUILD DISPERSION INTEGRAL
      IF((IIMOV.EQ.1).AND.(NODISP.NE.1.OR.DIFFUS.NE.0.0)) THEN
	 IF(IUNIT(21).EQ.0.OR.JUNIT(12).EQ.0) THEN
        CALL ELLDIS(IBOUND,DISPCC,DISPCR,DISPCL,DISPRC,DISPRR,
     *      DISPRL,DISPLC,DISPLR,DISPLL,
     *      POR,THCK,RF,DIAGDS,TIMV,
     *      NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NODESS,
     *      DELCOL,DELROW)
       ELSE
        CALL ELLDISH(IBOUND,DISPCC,DISPCR,DISPCL,DISPRC,DISPRR,
     *      DISPRL,DISPLC,DISPLR,DISPLL,
     *      POR,THCK,RF,DIAGDS,TIMV,
     *      NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NODESS,
     *      DELCOL,DELROW,LOCHFB)
       END IF
      END IF
CELLAM---LHS AND RHSE BUILD SOURCE INTEGRAL
      IF(ICONLY.NE.1) CALL ELLSRC(IBOUND,SRCFLO,SRCSOL,SNKFLO,RF,
     *  THCK,POR,DIAGDS,RHSE,CNOLD,
     *  EVTFLO,IEVT,SRCDCY,NODESS,IIMOV,
     *  NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NEVTOP,
     *  IOUTS,TIMV,DECAY,
     *  VC,VR,VL,VCMAX,VRMAX,VLMAX,
     *  LBNDY,NTFACE,RHSO,
     *  DELCOL,DELROW,XFOR,XBAC,YFOR,YBAC,
     *  AGER8,SAGE,JUNIT(9))
C
CELLAM---MOVE INFLOW CONCENTRATIONS TO INFLOW BNDY NODES
       IF(IIMOV.EQ.1) CALL ELIUPD(CBNDY,IDBNDY,CTCFLO,LOCBDY,
     *    CINFL,NCINFL,RF,
     *    IABOVE,IBELOW,CONC,NODESS,NTFACE,NFACES,NSCOL,NSROW,NSLAY,
     *    NCOL,NROW,
     *    CINFLA,CINFLB,CINXY)
CELLAM---SOLVE FOR NEW CONCENTRATION ON OUTFLOW BOUNDARY,
C        MOVE OUTFLOW CBNDY * SAV TO RHSE, FOR OUTFLOW FACES
C        MOVE  INFLOW CBNDY * SAV TO RHSE, FOR INFLOW  FACES
C        ACCUMULATE MASS REPRESENTED BY BNDY NODE FOR MASS BALANCE
      CALL ELLOUT(CBNDY,DIAGO,RHSO,NONU,SAV,IDBNDY,RHSE,RF,ibound,
     *          NSCOL,NSROW,NSLAY,NTFACE,NODESS,JRF,NFACES,POR,cnold,
     *          NCOL,NROW,NLAY,NRFLG)
CELLAM---IF FIRST TRANSPORT TIME STEP,
C        CONVERT MATRICES,
C        FIND INITIAL MASS
C
      IF (IIMOV.EQ.1) THEN
       CALL CONVERT(NSCOL,NSROW,NSLAY,NODESS,DIAGST,DIAGDS,
     *       RWORK,LENW,JA,IA,A,NELT)
       CALL SMOC5I(JRF,NODES,NODESS,NSCOL,NSROW,NSLAY,
     *       NCOL,NROW,NLAY,NZIN,RWORK,JAS,IAS,AS,NELTS,
     *       RWORK,RWORK1,LENW,leniw,KKSTP,KKPER,
     *       CNOLD,RF,DIAGST,POR,IBOUND,SBVL,NRFLG,THCK,NIUNIT,
     *       JUNIT(9),AGER8,DELT,IPERGWT)
      ENDIF 
C
CELLAM---SOLVE FOR NEW CONCENTRATION AT TRANSPORT SUBGRID NODES
      CALL ELLSLV(IBOUND,DIAGST,DIAGDS,
     *     RHSE,CONC,NCOL,NROW,NLAY,
     *     NODES,NODESS,NSCOL,NSROW,NSLAY,RWORK,LENW,IWORK,LENIW,
     *     IA,JA,A,NELT,iimov,nmov,
     *     delcol,delrow,thck,IOUTS)
C
CELLAM---MOVE INTERIOR NODE CONCENTRATION TO NOFLOW BNDY NODES
      CALL ELNUPD(CBNDY,LBNDY,CONC,NODESS,NTFACE,NFACES,
     *            NSCOL,NSROW,NSLAY)
cgzh debug  calculate CAVG...used in packages (MNW at least) below
      DO 11 KS=1,NSLAY
      DO 11 IS=1,NSROW
      DO 11 JS=1,NSCOL
            CAVG(JS,IS,KS)=0.5*(CONC(JS,IS,KS)+CNOLD(JS,IS,KS))
  11  continue
C SKIP TO HERE IF MOC OR MOCIMP
 200  CONTINUE
cgzh MNW
c        Process MNW sink nodes after moving particles
c  why: CAVG or SNKMSOUT (depending on PTWTON) now holds info on what actually left sinks
c
CGWT----CALCULATE COMPLEX MNW FLUXES AND PRINT WELL CONCENTRATION FILE
C  
		  IF(IUNIT(57).GT.0)
     &		  CALL GWT1MNW2sm(nmnw2,MNWMAX,mnw2,mnwnod,nodtot,
     +             ibound,ncol,nrow,nlay,
     +             iouts,CAVG,nscol,nsrow,nslay,
     +             MNWid,TIMV,SNKFLO,SNKMSOUT,
     *             SBVL,NIUNIT,Cwell,imov,
     *             MNWO,IUNIT(58))
C
CGWT----Calculate solute budget terms for lakes, and update concentration
C            in headwater and isolated lakes and lake systems
      IF (IUNIT(22).GT.0) CALL CILK3BD(LKNODE,MXLKND,ILAKE,KLK,
     1      CLKSUM,NCOL,NROW,NLAY,NLAKESAR,NSSAR,NTRB,NDV,ISS,
     2      ITRB,IDIV,STROUT,
     3      NSLAY,NSROW,NSCOL,NSOL,TIMV,KCNT,
     4      MSUB,MSUB1,LKDONE,SOLPPT,CSWIN,CSWOUT,CLAKE,CGWL,
     5      WTHDRW,CWDRAW,CAUG,CONC,CNOLD,IOUTS,IIMOV,
     6      PRECIP,VOLLAK,VOLOLD,CPPT,CGWIN,CGWOUT,CLKOLD,
     7      CSRUN,CRUNF,CSLAKE,FLOB,RNF,
CMOCWT
     8      SNKMSOUT,SNKFLO,SUMBFMS,SUMBFWT)
CGWT----Update downstream solute routing & stream cell concentrations
      IF (IUNIT(44).GT.0) CALL CSTR3BD(NSTRMAR,STRM,ISTRM,SEG,
     1  NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NSOL,ISTCB1,ICBCFL,
     2  IOUTS,NSSAR,SGOTFLW,IDIVAR,IPTFLG,IOTSG,
     3  SRCFLO,SRCSOL,SNKFLO,CSTIN,CSTOUT,COUTOLD,
     4  ISEG,COUT,CONCQ,CONCRUN,CNTRIB,SOLIN,CQIN,CGW,
     5  KLK,CLKSUM,NLAKESAR,NTRB,IUNIT(22),CONC,CNOLD,CONCPPT,
     1  ITRB,STRIN,TIMV,KCNT,MSUB,MSUB1,LKDONE,
     2  SOLPPT,CSWIN,CSWOUT,CLAKE,CWDRAW,
     3  VOLLAK,CGWIN,CGWOUT,CSRUN,CSLAKE,
     4  NPNTCL,KKPER,NPER,KKSTP,NSTP,IIMOV,NMOV,NSEGDIM,
     5  NLAKESAR,NSTRMAR)
C
      IF (IUNIT(22).GT.0) CALL CLAK3AD(NLAKESAR,LKNODE,ILAKE,MXLKND,
     1  NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,NSOL,LKDONE,
     2  IOUTS,SRCFLO,SRCSOL,SNKFLO,CLAKE,RATECO,FLOB,CLKOLD,
     3  CNOLD,CONC,LWRT,KKPER,NPER,KKSTP,NSTP,IIMOV,NMOV,NPNTCL,
     4  VOLLAK,SOLPPT,CSWIN,CSWOUT,CWDRAW,CSRUN,CGWIN,CGWOUT,CSLAKE,
     5  ALKIN,ALKOUT,
CMOCWT
     6  SNKMSOUT,SUMBFMS,JUNIT(15))
cellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
CGWT----COMPUTE CUMULATIVE SOLUTE MASS BALANCE
        CALL SMOC6BD(IBOUND,RF,
     *  CONC,CNOLD,CFXHBC,CINFL,
     *  THCK,POR,CHDFLO,CTCFLO,LOCBDY,
     *  RECH,CRECH,IRCH,NRCHOP,
     *  WELL,MXWELL,NWELLS,NWELVL,IWELLC,
     *  RIVR,MXRIVR,NRIVER,NRIVVL,IRIVRC,
     *  DRAI,MXDRN,NDRAIN,NDRNVL,
     *  BNDS,MXBND,NBOUND,NGHBVL,IBNDSC,
     *  DRTF,MXDRT,NDRTCL,NDRTVL,IDRTFL,
     *  EVTFLO,IEVT,NEVTOP,
     *  IFLLOC,BDFV,NFLW,IFHBD4,IFHBFC,
     *  IHDLOC,BDHV,NHED,NFHBX2,IFHBHC,
     *  DECAY,TIMV,CSTIN,CSTOUT,ALKIN,ALKOUT,NSOL,
     *  NCOL,NROW,NLAY,
     *  NSCOL,NSROW,NSLAY,
     *  IUNIT,IOUTS,NCINFL,JRF,SBVL,
     *  NFACES,IABOVE,IBELOW,MOCTYPE,
     *  DKFO,DKFS,JUNIT(11),IDKFO,IDKFS,NIUNIT,JUNIT(9),
CMOCWT
     *  SGMSOUT,SNKMSOUT,SNKFLO,SUMSGMS,SUMBFMS,SUMC,
     *  CINFLA,CINFLB,CINXY,
cgzh mnw
     *  nwell2,mxwel2,well2,MNWid)
      ELSEIF(MOCTYPE.EQ.3) THEN
CGWT----COMPUTE CUMULATIVE SOLUTE MASS BALANCE (ELLAM)
       CALL SMOC6BE(IBOUND,RF,
     *  CONC,CBNDY,IDBNDY,
     *  CNOLD,CFXHBC,CINFL,
     *  THCK,POR,CHDFLO,CTCFLO,LOCBDY,
     *  RECH,CRECH,IRCH,NRCHOP,
     *  WELL,MXWELL,NWELLS,NWELVL,IWELLC,
     *  RIVR,MXRIVR,NRIVER,NRIVVL,IRIVRC,
     *  DRAI,MXDRN,NDRAIN,NDRNVL,
     *  BNDS,MXBND,NBOUND,NGHBVL,IBNDSC,
     *  DRTF,MXDRT,NDRTCL,NDRTVL,IDRTFL,
     *  EVTFLO,IEVT,NEVTOP,
     *  NZIN,RWORK,JAS,IAS,AS,NELTS,
     *  LENW,DECAY,TIMV,CSTIN,CSTOUT,ALKIN,ALKOUT,NSOL,
     *  XFOR,XBAC,YFOR,YBAC,
     *  NCOL,NROW,NLAY,NODESS,NODES,
     *  NSCOL,NSROW,NSLAY,
     *  IUNIT,IOUTS,NCINFL,JRF,SBVL,NTFACE,
     *  NFACES,IABOVE,IBELOW,DELCOL,DELROW,NIUNIT,JUNIT(9),
     *  DAGE,SRCAGE,SAGE,
     *  CINFLA,CINFLB,CINXY,
cgzh mnw
     *  nwell2,mxwel2,well2,MNWid)
      ENDIF
cellam
C
cgzh
CMOCWT
C FOR WEIGHTED CODE, INTERPOLATE CONC AT CELLS WHERE NPCELL=0
      IF(PTWTON.EQ.1) THEN
        CALL SMOC6INTERP(CONC,NPCELL,IBOUND,
     *    NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,IOUTS)
C
C FOR WEIGHTED CODE, UPDATE CUMULATIVE MASS BALANCE NUMBERS (MULTSS)
C     CUMULATE MB NUMBERS IN 5,6 SLOTS
c slots 5 and 6 will hold cumulative for new stress period
        IF(MULTSS.EQ.1.AND.KKSTP.EQ.NSTP.AND.IIMOV.EQ.NMOV) THEN
          SBVL(5,3)=SBVL(5,3)+SBVL(3,3)
C         MASS DECAYED
          SBVL(6,3)=SBVL(6,3)+SBVL(4,3)
          DO 800 I=4,12
	      SBVL(5,I)=SBVL(5,I)+SBVL(1,I)
            SBVL(6,I)=SBVL(6,I)+SBVL(4,I)
 800      CONTINUE
          DO 801 I=13,23
	      SBVL(5,I)=SBVL(5,I)+SBVL(1,I)
            SBVL(6,I)=SBVL(6,I)+SBVL(2,I)
 801      CONTINUE
          DO 802 I=24,24
	      SBVL(5,I)=SBVL(5,I)+SBVL(1,I)
            SBVL(6,I)=SBVL(6,I)+SBVL(4,I)
 802      CONTINUE
          DO 803 I=26,26
	      SBVL(5,I)=SBVL(5,I)+SBVL(1,I)
            SBVL(6,I)=SBVL(6,I)+SBVL(2,I)
 803      CONTINUE
        END IF
      END IF
C
CGWT----PRINT CONCENTRATION DATA
      CALL SMOC6C(CONC,THCK,SBVL,SRCDCY,
     *  KKSTP,NSTP,KKPER,NPER,IIMOV,NMOV,TIMV,
     *  DELCOL,DELROW,NCOL,NROW,NLAY,
     *  NSCOL,NSROW,NSLAY,IOUTS,JUNIT,PERTIM,TOTIM,SUMTCH,
     *  NPNTCL,ICONFM,ICONLY,
     *  IDKZO,IDKFO,IDKZS,IDKFS,
     *  IDPZO,IDPFO,IUNIT(44),IUNIT(22),IUNIT(40),NIUNIT,
C MOCWT
     *  DECAY,IUNIT,MULTSS,
cea
     *  SRCAGE,IUNIT(57))
cgzh mbrpt
CGWT----PRINT SEPARATE MASS BALANCE REPORT
      
      IF ((JUNIT(26).GT.0).OR.(JUNIT(27).GT.0)) THEN
	 IF(PTWTON.GT.0) THEN
	  CALL SMOC6MBRP_WT(SBVL,SRCDCY,IPERGWT,
     *  KKSTP,KKPER,IIMOV,NSTP,NMOV,SUMTCH,
     *  NIUNIT,JUNIT(10),MULTSS,IOUTMBRPT,IOUTMBITEM,NSOL)
cgzh debug not coded yet for unweighted version
c       ELSE
c	  CALL SMOC6MBRP(SBVL,SRCDCY,
c     *  KKSTP,KKPER,IIMOV,SUMTCH,
c     *  NIUNIT,MULTSS,JUNIT(26)
       END IF
	END IF
C
cgzh zinn%
CGWT----PRINT GAMMA AND % CHANGE DATA
      CALL SMOC6PCT(CONC,CINIT,CTNMO,
     *    KKSTP,NSTP,KKPER,NPER,IIMOV,NMOV,TIMV,
     *    NSCOL,NSROW,NSLAY,IOUTS,JUNIT,SUMTCH,
     *    NPNTCL,ICONFM,NIUNIT,NODESS)
C
CDP----PRINT DOUBLE POROSITY CONCENTRATION DATA
      IF(JUNIT(10).GT.0.AND.IDPPS.NE.0) CALL SDP6C(DPCON,
     *    KKSTP,NSTP,KKPER,NPER,IIMOV,NMOV,
     *    NSCOL,NSROW,NSLAY,IOUTS,JUNIT,PERTIM,TOTIM,SUMTCH,
     *    NPNTCL,ICONFM,IDPPS,NIUNIT)
C
CGWT----PRINT OBSERVATION DATA
      IF (IUNIT(15).GT.0.AND.JUNIT(8).GT.0)
     * CALL SOBS5O(HNEW,CONC,SUMTCH,IOBLST,IIMOV,
     *   NSCOL,NSROW,NSLAY,NCOL,NROW,NLAY,NUMOBS,IOBSFL,
cgzh debug zinn
     *   SUMWT,NPCELL)
C
C-------Post-processing of MNW2 output --- MNWI package
        IF (IUNIT(58).GT.0) CALL GWF1MNWIOT(Wel1flag,QSUMflag,BYNDflag,
     &                    NSTP,kkstp,nmnw2,MNWMAX,mnw2,
     &                    MNWNOD,NODTOT,WELLID,SUMTCH,HNEW,
     &                    ncol,nrow,nlay,MNWOBS,DELT,MNWIID,MNWILST,
     &                    KKPER,ntotnod,iout,-99.0,IUNIT(15),1,iimov,
     &                    MNWO)
C
CGAG---WRITE LAKE GAGING STATION DATA
      IF(IUNIT(46).GT.0.AND.IUNIT(22).GT.0)
     1       CALL SGWF1GAG5LO(IGGLST,NUMGAGE,IUNIT(15),STGNEW,
     2       CLAKE,NLAKESAR,SUMTCH,NSOL,VOLLAK,
     *                  PRECIP,EVAP,RNF,
     *                  GWIN,GWOUT,SURFIN,SURFOT,
     *                  WTHDRW,FLXINL,SUMCNN,
     *                  STGOLD,VOLOLD,STAGES,VOLINIT,
     *                  CLKOLD,CLAKINIT)
C
CGAG---WRITE STREAM GAGING STATION DATA
      IF(IUNIT(46).GT.0.AND.IUNIT(44).GT.0)
     1       CALL SGWF1GAG5SO(IGGLST,NUMGAGE,IUNIT(15),
     2       STRM,ISEG,NSEGDIM,NSTRMAR,SUMTCH,NSOL,COUT,SFRQ,
     3       NSSAR,SEG,SGOTFLW,IDIVAR, dum,dum,dum,dum,dum,dum)
C
CGWT----DUMP PARTICLE LOCATIONS
c only if no ellam
      IF(IUNIT(15).GT.0.AND.JUNIT(4).GT.0.AND.MOCTYPE.NE.3)
     * CALL SMOC5P(PC,PR,PL,PCONC,
     *   JUNIT(4),KKPER,NPER,KKSTP,NSTP,IIMOV,NMOV,TIMV,NP,
     *      SUMTCH,NPNTPL,0,PTWT,
cgzh wtfac
     *      NSCOL,NSROW,NSLAY,WTFAC,IPRTFM,IOUTS)
      IF(IUNIT(15).GT.0.AND.JUNIT(5).GT.0.AND.MOCTYPE.NE.3)
     * CALL SMOC5P(PC,PR,PL,PCONC,
     *   JUNIT(5),KKPER,NPER,KKSTP,NSTP,IIMOV,NMOV,TIMV,NP,
     *      SUMTCH,NPNTPL,1,PTWT,
cgzh wtfac
     *      NSCOL,NSROW,NSLAY,WTFAC,IPRTFM,IOUTS)
C
C  "EXPLODE" PARTICLES UPGRADIENT FROM CELLS WITH ZERO PARTICLES
C  ONLY CALLED IF THERE ARE CELLS WITH NO PARTICLES 
C  AND NOT AT THE END OF THE SIMULATION
corig      IF((PTWTON.EQ.1.AND.NZERO.GT.0).AND.
cgzh debug ptwton is never 2, this is debug "skip" of ptwt1boom
      IF((PTWTON.EQ.2.AND.NZERO.GT.0).AND.
     *  (.NOT.(KKPER.EQ.NPER.AND.KKSTP.EQ.NSTP.AND.IIMOV.EQ.NMOV))) THEN
c      write(*,*) 
c      write(*,*) 'exploding pts'
	CALL PTWT1BOOM(IBOUND,
     *  imov,
     *  PC,PR,PL,PCONC,
     *  SUMWT,PTWT,CELVOL,
     *  VC,VR,VL,
     *  IPTID,PNEWC,PNEWR,PNEWL,
     *  NPCELL,SUMC,
     *  LIMBO,NLIMBO,
     *  NSCOL,NSROW,NSLAY,NPMAX,NEWPTS,
     *  NCOL,NROW,NLAY,IOUTS,NP,
     *  JUNIT(13),JUNIT(14),PCORIG,PRORIG,PLORIG,
     *  NPTLAYA,NPTROWA,NPTCOLA,IDIM)
	END IF
C
C rbw begin change
C  RBW       Regenerating particles for weighted particles here   
      IF((PTWTON.EQ.1.AND.NZERO.GT.NZCRIT).AND.
!      IF((PTWTON.EQ.1.AND.NZERO.GT.0).AND.
     *  (.NOT.(KKPER.EQ.NPER.AND.KKSTP.EQ.NSTP.AND.IIMOV.EQ.NMOV))) THEN
          call RefreshEmptyCellsV4(PC,PR,PL,IPTID,PCONC,PTWT,
     *      NPCELL, CONC, CELVOL, SUMWT, 
     *      IBOUND,
     *      PNEWC,PNEWR,PNEWL,
     *      NEWPTS, ! number of initial particles per cell plus 1. 
     *      IOUTS,  ! unit number of listing file for GWT
     *      THCK, VC, VR, VL, POR,    
     *      NPMAX, NP, NSCOL,NSROW,NSLAY,ISCOL1,ISROW1,ISLAY1, 
     *      NCOL,NROW,NLAY,
     *      NZERO, ! number of empty cells.
     *      TIMV) ! length of transport time step.
        IF(NZERO.GT.NZCRIT) THEN
          STOP 'FZERO EXCEEDED IN MOVEWT'
        ENDIF
      endif
      
!      SBVL(1,1) =SBVL(2,1)  ! Update initial Dissolved mass
!      SBVL(1,2) =SBVL(2,2)  ! Update initial Sorbed mass
!      SBVL(1,18)=SBVL(2,18) ! Update initial double porosity mass

C rbw end change          
C
C  RELEASE MEMORY
      DEALLOCATE(SGMSOUT,SNKMSOUT,xe_mask)
      if(iunit(57).gt.0)  DEALLOCATE(CWELL)
C
      RETURN
      END
CGWT----END OF MOC6MVOT
