cnew  contains entire code with subs title and ofile  12sep95
CDAN  ARBITRARY V ORIENTATION, READ VX, VY, VZ
C  DIRAC.F77  DISPERSAL OF A SLUG IN 3D UNIFORM FLOW
C  DERIVED BY DJGOODE FROM POINT3.F77 BY WEXLER
C  QM NOT USED, REMOVED
C   BIG.3D.DAT
C
CDUMP  DUMP C FOR MOD CONTOURING
C
C       THE FOLLOWING CARD MUST BE CHANGED IF PROBLEM DIMENSIONS ARE
C       GREATER THAN THOSE GIVEN HERE.
C         MAXX = MAXIMUM NUMBER OF X-VALUES
C         MAXY = MAXIMUM NUMBER OF Y-VALUES
C         MAXZ = MAXIMUM NUMBER OF Z-VALUES
C         MAXT = MAXIMUM NUMBER OF TIME VALUES
C         MAXXY = MAXX * MAXY
C         MAXXY2 = 2 * MAXX * MAXY
      PARAMETER MAXX=100,MAXY=100,MAXZ=25,MAXT=50,MAXXY=5000,MAXXY2=10000
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      CHARACTER*10 CUNITS,VUNITS,DUNITS,KUNITS,LUNITS,QUNITS,TUNITS
      REAL XP,YP,ZP,CP,TP,DELTA,XPC,YPC,XSCLP,YSCLP
      DIMENSION CXY(MAXX,MAXY),X(MAXX),Y(MAXY),Z(MAXZ),T(MAXT)
CDAN
      DIMENSION CLOG(MAXY),CTIME(10)
CDAN      DIMENSION CLOG(MAXY)
CDAN  END
CDUMP
      REAL CXYR(MAXX,MAXY)
      REAL PERTIM, TOTIM
      CHARACTER*4 TEXT(4)
CDUMP  END
      COMMON /PDAT/ XP(MAXX),YP(MAXY),CP(MAXXY),XPC(50),YPC(50),
     1 IFLAG(MAXXY2)
      COMMON /IOUNIT/ IN,IO
C
C     PROGRAM VARIABLES
C
C           NOTE:  ANY CONSISTANT SET OF UNITS MAY BE USED IN THE
C           MODEL.  NO FORMAT STATEMENTS NEED TO BE CHANGED AS
C           LABELS FOR ALL VARIABLES ARE SPECIFIED IN MODEL INPUT.
C
C     D0       SOLUTE MASS [M]   (RETARDED)
C     ALPHAL   LONGITUDINAL DISPERSIVITY [L]
C     ALPHAT   TRANSVERSE DISPERSIVITY [L]
C     VX       GROUND-WATER VELOCITY IN X-DIRECTION [L/T]
C     VY       GROUND-WATER VELOCITY IN Y-DIRECTION [L/T]
C     VZ       GROUND-WATER VELOCITY IN Z-DIRECTION [L/T]
C     DK       FIRST-ORDER SOLUTE DECAY CONSTANT [1/T]
C     X        X-POSITION AT WHICH CONCENTRATION IS EVALUATED [L]
C     Y        Y-POSITION AT WHICH CONCENTRATION IS EVALUATED [L]
C     Z        Z-POSITION AT WHICH CONCENTRATION IS EVALUATED [L]
C     T        TIME AT WHICH CONCENTRATION IS EVALUATED [T]
C     CN       NORMALIZED CONCENTRATION C/C0 [DIMENSIONLESS]
C     CXY      SOLUTE CONCENTRATION C(X,Y,Z,T) [M/L**3]
C     XC       X-COORDINATE OF DIRAC INITIAL CONDITION [L]
C     YC       Y-COORDINATE OF DIRAC INITIAL CONDITION [L]
C     ZC       Z-COORDINATE OF DIRAC INITIAL CONDITION [L]
C     POR      AQUIFER POROSITY [DIMENSIONLESS]
C
C     NX       NUMBER OF X-POSITIONS AT WHICH SOLUTION IS EVALUATED
C     NY       NUMBER OF Y-POSITIONS AT WHICH SOLUTION IS EVALUATED
C     NZ       NUMBER OF Z-POSITIONS AT WHICH SOLUTION IS EVALUATED
C     NT       NUMBER OF TIME VALUES AT WHICH SOLUTION IS EVALUATED
C
C     IPLT     PLOT CONTROL. IF IPLT>0, CONTOUR MAPS ARE PLOTTED
C     XSCLP    SCALING FACTOR TO CONVERT X TO PLOTTER INCHES
C     YSCLP    SCALING FACTOR TO CONVERT Y TO PLOTTER INCHES
C     DELTA    CONTOUR INCREMENT FOR PLOT. (VALUE BETWEEN 0 AND 1.0)
C
C       CHARACTER VARIABLES USED TO SPECIFY UNITS FOR MODEL PARAMETERS
C     CUNITS   UNITS OF CONCENTRATION (M/L**3)
C     VUNITS   UNITS OF GROUND-WATER VELOCITY (L/T)
C     KUNITS   UNITS OF SOLUTE DECAY CONSTANT  (1/T)
C     LUNITS   UNITS OF LENGTH (L)
C     TUNITS   UNITS OF TIME (T)
C
C       DEFINE INPUT/OUTPUT FILES AND PRINT TITLE PAGE
      CALL OFILE
      CALL TITLEX
      WRITE(IO,201)
C
C       READ IN MODEL PARAMETERS
      READ(IN,101) NX,NY,NZ,NT
      WRITE(IO,205) NX,NY,NZ,NT
CDAN  OPEN
      ILOG=96
cnew      OPEN(ILOG,FILE='CLOG.OUT',STATUS='UNKNOWN')
      OPEN(ILOG,FILE='clog.out',STATUS='UNKNOWN')
      ITIME=97
      IF(NT.GT.1)
     *  OPEN(ITIME,FILE='CTIME.OUT', STATUS='UNKNOWN')
CDAN  END
CDUMP
      KSTP=1
      KPER=1
      TEXT(1)='DIRA'
      TEXT(2)='C C '
      TEXT(3)='    '
      TEXT(4)='    '
      IDUMP=98
      OPEN(IDUMP,FILE='CDUMP.OUT',STATUS='UNKNOWN',
     *  FORM='UNFORMATTED')
CDUMP  END
      READ(IN,105) CUNITS,VUNITS,KUNITS,LUNITS,TUNITS
      READ(IN,110) D0,VX,VY,VZ,ALPHAL,ALPHAT,DK
      WRITE(IO,210) D0,CUNITS,VX,VUNITS,VY,VZ,
     *  ALPHAL,LUNITS,ALPHAT,LUNITS,
     1 DK,KUNITS
C  STOP IF ZERO VELOCITY
      IF(VX.EQ.0.0.AND.VY.EQ.0.0.AND.VZ.EQ.0.0) THEN
         WRITE(IO,*) ' STOPPING, ZERO VELOCITY NOT ALLOWED'
         STOP ' ZERO VELOCITY IN MAIN'
      END IF
      READ(IN,110) XC,YC,ZC,POR
      WRITE(IO,212) XC,LUNITS,YC,LUNITS,ZC,LUNITS,POR
      READ(IN,110) (X(I),I=1,NX)
      WRITE(IO,215) LUNITS
      WRITE(IO,220) (X(I),I=1,NX)
      READ(IN,110) (Y(I),I=1,NY)
      WRITE(IO,216) LUNITS
      WRITE(IO,220) (Y(I),I=1,NY)
      READ(IN,110) (Z(I),I=1,NZ)
      WRITE(IO,217) LUNITS
      WRITE(IO,220) (Z(I),I=1,NZ)
      READ(IN,110) (T(I),I=1,NT)
      WRITE(IO,225) TUNITS
      WRITE(IO,220) (T(I),I=1,NT)
C
C       BEGIN TIME LOOP
      DO 20 IT=1,NT
CDAN
CDAN  SET TIME COUNTER TO ZERO
      KTIMED=0
CDAN  END
C
C       BEGIN Z LOOP
      DO 30 IZ=1,NZ
      ZZ=Z(IZ)-ZC
C
C       BEGIN X LOOP
      DO 40 IX=1,NX
      XX=X(IX)-XC
C
C     CALCULATE NORMALIZED CONCENTRATION FOR ALL Y AT X=X(IX) AND Z=Z(IZ)
      DO 50 IY=1,NY
      YY=Y(IY)-YC
      CALL DIRAC3(POR,DK,T(IT),XX,YY,ZZ,ALPHAL,ALPHAT,VX,VY,VZ,
     *  CN)
      CXY(IX,IY)=D0*CN
CDAN
CDAN  WRITE LOG TRANSFORMED CONCENTRATION FOR PLOTTING WITH MOC
CDAN
CDAN  0.01 IS LOWEST C CONC IN CLOG OUTPUT
C CDAN  CONC AT SOURCE POINT SET TO 100,000
      CLOG(IY)=-2.E0
C      IF(YY.EQ.0.D0.AND.XX.EQ.0.D0.AND.ZZ.EQ.0.D0) THEN
C         CLOG(IY)=5.D0
C      ELSE IF(CXY(IX,IY).GT.0.01D0) THEN
      IF(CXY(IX,IY).GT.0.01D0) THEN
         CLOG(IY)=DLOG10(CXY(IX,IY))
      END IF
CDAN  SAVE C IN TIME ARRAY
CDAN
      IF(NT.GT.1) THEN
         KTIMED=KTIMED+1
         CTIME(KTIMED)=CXY(IX,IY)
      END IF
CDAN  END
50    CONTINUE
CDAN
      WRITE(ILOG,5555) (CLOG(IY),IY=1,NY)
 5555 FORMAT(8F10.6)
CDAN  END
40    CONTINUE
CDUMP  DUMP THIS LAYER
      PERTIM=T(IT)
      TOTIM=PERTIM
      WRITE(IDUMP) KSTP,KPER,PERTIM,TOTIM,TEXT,NX,NY,IZ
      DO 431 IY=1,NY
      DO 431 IX=1,NX
  431 CXYR(IX,IY)=CXY(IX,IY)
      WRITE(IDUMP) ((CXYR(IX,IY),IX=1,NX),IY=1,NY)
CDUMP  END
C
C       PRINT OUT TABLES OF CONCENTRATION VALUES
      NPAGE=1+(NY-1)/9
      DO 60 NP=1,NPAGE
      IF(NP.EQ.1) WRITE(IO,230) T(IT),TUNITS,Z(IZ),LUNITS,LUNITS
      IF(NP.NE.1) WRITE(IO,231) T(IT),TUNITS,Z(IZ),LUNITS,LUNITS
      NP1=(NP-1)*9
      NP2=9
      IF((NP1+NP2).GT.NY) NP2=NY-NP1
      WRITE(IO,235) (Y(NP1+J),J=1,NP2)
      WRITE(IO,236) CUNITS,LUNITS
      DO 70 IX=1,NX
      WRITE(IO,240) X(IX),(CXY(IX,NP1+J),J=1,NP2)
      IF(MOD(IX,45).NE.0) GO TO 70
      WRITE(IO,231) T(IT),TUNITS,Z(IZ),LUNITS,LUNITS
      WRITE(IO,235) (Y(NP1+J),J=1,NP2)
      WRITE(IO,236) CUNITS,LUNITS
70    IF(MOD(IX,5).EQ.0 .AND. MOD(IX,45).NE.0) WRITE(IO,241)
60    CONTINUE
C
30    CONTINUE
CDAN
CDAN  DUMP C'S FOR THIS TIME ON SEPARATE FILE
CDAN
      IF(NT.GT.1)
     *  WRITE(ITIME,8926) (T(IT),CTIME(KTIMER),KTIMER=1,KTIMED)
 8926 FORMAT(1P5E15.4)
CDAN  END
20    CONTINUE
      CLOSE (IN)
      CLOSE (IO)
      STOP
C
C        FORMAT STATEMENTS
101   FORMAT(20I4)
105   FORMAT(8A10)
110   FORMAT(8F10.0)
201   FORMAT(/////' ',29X,'ANALYTICAL SOLUTION TO THE THREE-DIMENSIONAL'
     1 /' ',28X,'ADVECTIVE-DISPERSIVE SOLUTE TRANSPORT EQUATION'/
     2 ' ',34X,'FOR AN AQUIFER OF INFINITE EXTENT'/
     3 ' ',30X,'WITH A CONTINUOUS POINT SOURCE AT XC,YC,ZC'
     3 ' ',30X,'WITH A DIRAC INITIAL CONDITION AT XC,YC,ZC'
     4 ///'0',40X,'INPUT DATA'/' ' ,40X,10('-'))
205   FORMAT('0',25X,'NUMBER OF X-COORDINATES (NX) = ',I4/' ',25X,
     1 'NUMBER OF Y-COORDINATES (NY) = ',I4/' ',25X,
     2 'NUMBER OF Z-COORDINATES (NZ) = ',I4/' ',25X,
     3 'NUMBER OF TIME VALUES (NT) = ',I4/' ',25X)
210   FORMAT('0',25X,'SOLUTE MASS IN SOLUTION (D0) =',
     1 1P1E13.6,1X,A10/' ',25X,
     2 'GROUND-WATER VELOCITY IN X-DIRECTION (VX) =',1P1E13.6,1X,A10/
     2 ' ',25X,'GROUND-WATER VELOCITY IN Y-DIRECTION (VY) =',1P1E13.6/
     2 ' ',25X,'GROUND-WATER VELOCITY IN Z-DIRECTION (VZ) =',1P1E13.6/
     4 ' ',25X,'DISPERSIVITY IN THE LONGITUDINAL DIRECTION',
     *  ' (ALPHAL) =',1P1E13.6,1X,A10/
     4 ' ',25X,'DISPERSIVITY IN THE TRANSVERSE DIRECTION',
     *  ' (ALPHAT) =',1P1E13.6,1X,A10/
     6 ' ',25X,'FIRST-ORDER SOLUTE DECAY RATE (DK) =',1P1E13.6,1X,A10)
212   FORMAT('0',25X,'AQUIFER IS OF INFINITE EXTENT'
     2 /'0',25X,'CONTINUOUS POINT SOURCE IS AT X =',1P1E13.6,1X,A10/
     3 ' ',55X,'Y =',1P1E13.6,1X,A10/' ',55X,'Z =',1P1E13.6,1X,A10/
     6 ' ',25X,'AQUIFER POROSITY (POR) =',1P1E13.6)
215   FORMAT('0',25X,'X-COORDINATES AT WHICH SOLUTE CONCENTRATIONS ',
     1 'WILL BE CALCULATED, IN ',A10/' ',25X,78('-')/)
216   FORMAT('0',25X,'Y-COORDINATES AT WHICH SOLUTE CONCENTRATIONS ',
     1 'WILL BE CALCULATED, IN ',A10/' ',25X,78('-')/)
217   FORMAT('0',25X,'Z-COORDINATES AT WHICH SOLUTE CONCENTRATIONS ',
     1 'WILL BE CALCULATED, IN ',A10/' ',25X,78('-')/)
220   FORMAT(' ',5X,8F12.4)
225   FORMAT('0',25X,'TIMES AT WHICH SOLUTE CONCENTRATIONS '
     1 'WILL BE CALCULATED, IN ',A10/' ',25X,70('-')/)
230   FORMAT('1'/'0',15X,'SOLUTE CONCENTRATION AT TIME =',
     1 F12.4,1X,A10/' ',35X,'AND AT Z =',F12.4,1X,A10/
     2 '0',25X,'Y-COORDINATE, IN ',A10)
231   FORMAT('1'/'0',15X,'SOLUTE CONCENTRATION AT TIME =',
     1 F12.4,1X,A10,5X,'(CONTINUED)'/' ',35X,'AND AT Z =',F12.4,1X,A10/
     2 '0',25X,'Y-COORDINATE, IN ',A10)
235   FORMAT(' ',20X,9F12.4)
236   FORMAT(' ',19X,'*',108('-')/
     1 ' ',4X,'X-COORDINATE,',2X,'!',44X,'SOLUTE CONCENTRATION, IN '
     2 A10/' ',4X,'IN ',A10,2X,'!'/' ',19X,'!')
240   FORMAT(' ',5X,F12.4,2X,'!',1P9E12.4)
241   FORMAT(' ',19X,'!')
      END
      SUBROUTINE DIRAC3(POR,DK,T,X,Y,Z,ALPHAL,ALPHAT,VX,VY,VZ,
     *  CN)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON /IOUNIT/ IN,IO
C
C       THIS ROUTINE CALCULATES SOLUTE CONCENTRATION AT X,Y,Z BASED ON
C       THE ANALYTIC SOLUTION TO THE THREE-DIMENSIONAL ADVECTIVE-
C       DISPERSIVE SOLUTE TRANSPORT EQUATION FOR AN AQUIFER OF
C       INFINITE EXTENT WITH A DIRAC INITIAL CONDITION LOCATED AT
C       X=XC, Y=YC, AND Z=ZC.  A CLOSED FORM SOLUTION WAS OBTAINED.
C
      CN=0.0D0
C
C       FOR T=0, ALL CONCENTRATIONS EQUAL 0.0
C  CANNOT COMPUTE INFINITE CONCENTRATION AT XC,YC,ZC AT T=0
      IF(T.LE.0.0D0) RETURN
      PI=3.14159265358979D0
C
C  COMPUTE DIRECTION COSINES
      VXY2=VX*VX+VY*VY
C  IF ONLY VZ, USE ARBITRARY TRANSVERSE
      IF(VXY2.EQ.0.0) THEN
         VV=DABS(VZ)
         ALX=0.D0
         ALY=0.D0
         ALZ=VZ/VV
         T1X=1.D0
         T1Y=0.D0
         T1Z=0.D0
         T2X=0.D0
         T2Y=1.D0
         T2Z=0.D0
      ELSE
         VXY=DSQRT(VXY2)
         VV=DSQRT(VXY2+VZ*VZ)
         ALX=VX/VV
         ALY=VY/VV
         ALZ=VZ/VV
         T1X=-VY/VXY
         T1Y=VX/VXY
         T1Z=0.D0
         T2X=-VZ*VX/VXY/VV
         T2Y=-VZ*VY/VXY/VV
         T2Z=VXY/VV
      END IF
C
CBUG  CHECK COORD TRANS
      IF(X.EQ.90.0.AND.Y.EQ.90.0.AND.Z.EQ.90.0) THEN
      SIZE1=DSQRT(ALX*ALX+ALY*ALY+ALZ*ALZ)
      SIZE2=DSQRT(T1X*T1X+T1Y*T1Y+T1Z*T1Z)
      SIZE3=DSQRT(T2X*T2X+T2Y*T2Y+T2Z*T2Z)
      WRITE(IO,*) ' SIZE1, SIZE2, SIZE3'
      WRITE(IO,*) SIZE1,SIZE2,SIZE3
      DOT12=ALX*T1X+ALY*T1Y+ALZ*T1Z
      DOT13=ALX*T2X+ALY*T2Y+ALZ*T2Z
      DOT23=T1X*T2X+T1Y*T2Y+T1Z*T2Z
      WRITE(IO,*) ' DOT12,DOT13,DOT23'
      WRITE(IO,*) DOT12,DOT13,DOT23
      END IF
CBUG  END
C
C  EXPONENTIAL TERM
      EXPTRM=-( ((X*ALX+Y*ALY+Z*ALZ-VV*T)**2)/(4.D0*ALPHAL*VV*T) +
     *        ((X*T1X+Y*T1Y+Z*T1Z)**2)/(4.D0*ALPHAT*VV*T) +
     *        ((X*T2X+Y*T2Y+Z*T2Z)**2)/(4.D0*ALPHAT*VV*T) +
     *        DK*T )
      EXPTRM=DEXP(EXPTRM)
C
C  NORMALIZED CONC (NORM BY MASS)
      CN=EXPTRM/(POR*8.D0*PI*ALPHAT*VV*DSQRT(PI*T*ALPHAL*VV)*T)
      RETURN
C
      END
C
C       ******************************************************
C      *                                                      *
C      *                  SUBROUTINE TITLE                    *
C      *                                                      *
C      *            VERSION CURRENT AS OF 10/01/87            *
C      *                                                      *
C       ******************************************************
C
      SUBROUTINE TITLEX
      CHARACTER*1 LINE1(60),EQUAL,BLANK
      CHARACTER DATE*16,TIME*8
      CHARACTER*60 LINE
      CHARACTER*61 TITLE,T1
      COMMON /IOUNIT/ IN,IO
      COMMON /TITLES/ TITLE(4)
      DATA EQUAL/'='/,BLANK/' '/
      DATA TITLE/4*'
     1         '/
      character(len=*), parameter :: FMTDISCLAIMER =                   
     & "(/,                                                              
     &'This software has been approved for release by the U.S. ',/,
     &'subjected to rigorous Geological Survey (USGS). Although the ',/,
     &'software has been subjected to rigorous review, the USGS ',/,
     &'reserves the right to update the software as needed pursuant ',/,
     &'to further analysis and review. No warranty, expressed or ',/, 
     &'implied, is made by the USGS or the U.S. Government as to ',/,
     &'the functionality of the software and related material nor ',/,
     &'shall the fact of release constitute any such warranty. ',/,
     &'Furthermore, the software is released on condition that ',/,
     &'neither the USGS nor the U.S. Government shall be held ',/,
     &'liable for any damages resulting from its authorized or ',/,
     &'unauthorized use. Also refer to the USGS Water ',/,
     &'Resources Software User Rights Notice for complete use, ',/,
     &'copyright, and distribution information.',/)"
C
C        THIS ROUTINE CREATES A TITLE BOX ON THE FIRST PAGE OF
C        PROGRAM OUTPUT. THE ROUTINE READS AND PRINTS ALL DATA
C        CARDS UNTIL IT ENCOUNTERS AN '=' IN COLUMN 1. THE FIRST 4
C        LINES READ IN ARE ALSO USED AS TITLES ON PLOTS.
C
cnew      CALL TIME$A (TIME)
cbug      call time(time)
      time='00:00:00'
cnew      CALL DATE$A(DATE)
cbug      call date(date)
      date='...00,sep,95....'
cbug
      WRITE(IO,201)
      DO 10 L=1,60
      READ(IN,101,END=20) LINE
      IF (LINE(1:1).EQ.EQUAL) GOTO 60
      T1=LINE
C       STRIP OFF TRAILING BLANKS AND CENTER LINE
      DO 15 N=1,60
      NN=61-N
15    IF(LINE(NN:NN).NE.BLANK) GOTO 20
20    NN1=NN+1
      T1(NN1:NN1)='$'
      IF(L.LT.5) TITLE(L)=T1
      NS=(60-NN)/2
      IF(NS.EQ.0) GO TO 35
      DO 30 I=1,60
30    LINE1(I)=BLANK
35    NS1=NS+1
      DO 40 I=1,NN
40    LINE1(NS+I)=LINE(I:I)
10    WRITE(IO,202) (LINE1(I),I=1,60)
      write(IO, FMTDISCLAIMER)

60    WRITE(IO,203) DATE,TIME
      RETURN
C
C       FORMAT STATEMENTS
101   FORMAT (A60)
201   FORMAT('1'//////////' ',16X,68('*'))
202   FORMAT(' ',16X,'*',66X,'*'/' ',16X,'*',3X,60A1,3X,'*')
203   FORMAT(' ',16X,'*',66X,'*'/' ',16X,'*',12X,'PROGRAM RUN ON ',
     1 A16,' AT ',A8,11X,'*'/' ',16X,'*',66X,'*'/' ',16X,68('*')
     2 /'1')
      END
C
C       ******************************************************
C      *                                                      *
C      *                  SUBROUTINE OFILE                    *
C      *                                                      *
C      *            VERSION CURRENT AS OF 10/01/87            *
C      *                                                      *
C       ******************************************************
C
      SUBROUTINE OFILE
      CHARACTER*50 IFNAME,OFNAME
      CHARACTER*1 STAR
      COMMON /IOUNIT/ IN,IO
      DATA STAR/'*'/
      IN=15
      IO=16
cnew      WRITE(1,5)
cnew      READ(1,7) IFNAME
cnew      WRITE(1,6)
cnew      READ(1,7) OFNAME
      WRITE(*,5)
      READ(*,7) IFNAME
      WRITE(*,6)
      READ(*,7) OFNAME
cnew  end
      OPEN (IN,FILE=IFNAME,STATUS='OLD')
      IF(OFNAME(1:1).EQ.STAR) IO=1
      IF(OFNAME(1:1).NE.STAR) OPEN (IO,FILE=OFNAME)
      RETURN
C
C       FORMAT STATEMENTS
5     FORMAT(5X,'TYPE IN INPUT FILE NAME')
6     FORMAT(5X,'TYPE IN OUTPUT FILE NAME')
7     FORMAT(A50)
      END
