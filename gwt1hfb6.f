C  GWT1CHFB5AL   CHFB PACKAGE ALLOCATION  
C
C     **********************************************************
C
      SUBROUTINE GWT1CHFB5AL(ISUM,ISUMI,NSROW,NSCOL,NSLAY,
     *   INCHFB,LSHFBL,LSHFBD,MXHFB,LSHBCK,
     *   IOUTS,IOUT)
C
C     ******************************************************************
C
C CHFB5AL   ALLOCATE SPACE IN X ARRAY FOR CHFB
C
C     ------------------------------------------------------------------
C
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
C     ALLOCATE SPACE FOR ARRAYS
C
      NSRC=NSROW*NSCOL
      ISSIZ=NSRC*NSLAY
C  HFB locations            
      if(INCHFB.gt.0) THEN
	  LSHFBL=ISUMI
	  ISUMI=ISUMI+ISSIZ*2
	  LSHFBD=ISUM
	  ISUM=ISUM+MXHFB*4
	  LSHBCK=ISUMI
	  ISUMI=ISUMI+MXHFB
	  num=(ISSIZ*2)+(MXHFB*5)
        WRITE(IOUT,4) num
        WRITE(IOUTS,4) num
      ELSE
        LSHFBL=1
	  LSHFBD=1
	  LSHBCK=1
      END IF
    4 FORMAT(1X,I8,' ELEMENTS IN X ARRAY ARE USED BY CHFB')
C memory checks, lenx not needed for dynamic memory allocation
c      ISUM1=ISUM-1
c      WRITE(IOUT,5)ISUM1,LENX
c    5 FORMAT(1X,I8,' ELEMENTS OF X ARRAY USED OUT OF',I8)
c      IF(ISUM1.GT.LENX)WRITE(IOUT,6)
c    6 FORMAT(1X,'   ***X ARRAY MUST BE MADE LARGER***')
C
      RETURN
      END
C
C   GWT1HFB6RP 
C
C-- READ DSPHFB ARRAYS
C-- DEFINE LOCATION OF HFB FACES IN LOCHFB ARRAY
C   
C     ****************************************************************
C
      SUBROUTINE GWT1HFB6RP(LOCHFB,IBOUND,DSPHFB,
     *    NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,IOUTS,    
     *    HFB,NHFB,MXHFB,INCHFB,IHFBCK,MOCTYPE)
C
C INPUT FOR CHFB IS
C  IRANGE1 IRANGE2 HFBALG HFBATH HFBATV HFBDIF
C  One range of barriers (by barrier number) per line, all having same properties
C
C  IRANGE1 is starting range (must be = 1 on first line)
C  IRANGE2 is end for this range (must be = number of barriers on last line)
C  HFBALG = LONGITUDINAL DISPERSIVITY
C  HFBATH = TRANSVERSE HORIZ DISP
C  HFBATV = TRANSVERSE VERT DISP
C  HFBDIF = DIFFUSION COEFFICIENT
C     ****************************************************************
	DIMENSION LOCHFB(NSCOL,NSROW,NSLAY,2), IBOUND(NCOL,NROW,NLAY),
     * HFB(7,MXHFB),DSPHFB(4,MXHFB),IHFBCK(MXHFB)
C
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
C
C-----WRITE WARNING AND SKIP INPUT IF CHFB FILE NOT OPENED
      IF(INCHFB.LE.0) THEN
         WRITE(IOUTS,*)
	   WRITE(IOUTS,*) '***WARNING*** CHFB INACTIVE!  USE OF CHFB ',
     * 'PACKAGE IS STRONGLY RECOMMENDED WHEN USING GWT AND HFB'
	   GOTO 200
	END IF
C-----INITIALIZE CHECKING AND INPUT ARRAYS
      DO 1 II=1,NHFB
	  IHFBCK(II)=0
        DSPHFB(1,II)=0.0
        DSPHFB(2,II)=0.0
        DSPHFB(3,II)=0.0
        DSPHFB(4,II)=0.0
   1  CONTINUE
C-----READ DISPERSIVITY AND DIFFUSION FOR HFB BARRIERS
      WRITE(IOUTS,'(/,A,I4)') 'CHFB: NUMBER OF BARRIERS = ',NHFB
      IDONE=0
      ILINE=1
	DO WHILE (IDONE.EQ.0)
	 READ(INCHFB,*) IRANGE1, IRANGE2, HFBALG, HFBATH, HFBATV, HFBDIF	
C----CHECK DATA
        IF(ILINE.EQ.1.AND.IRANGE1.NE.1) THEN
	    WRITE(IOUTS,*) '***ERROR***  CHFB INPUT: IRANGE1 ON FIRST',
     *                   ' LINE MUST BE SET TO 1'
	    STOP
	  END IF
        IF(IRANGE1.LT.1) THEN
	    WRITE(IOUTS,*) '***ERROR***  CHFB INPUT: IRANGE1 < ZERO ',
     *                   ' ON LINE ',ILINE
	    STOP
	  END IF
        IF(IRANGE2.GT.NHFB) THEN
	    WRITE(IOUTS,*) '***ERROR***  CHFB INPUT: IRANGE2 > TOTAL ',
     *                   ' NUMBER OF BARRIERS ON LINE ',ILINE
	    STOP
	  END IF
	  ILINE=ILINE+1
C----FILL IHFBCK AND HFBDSP ARRAYS
C IHFBCK =1 MEANS DATA EXISTS FOR BARRIER
C DSPHFB (1) IS LONGITUDINAL DISPERSIVITY (alpha-L)
C DSPHFB (2) IS TRANSVERSE HORIZONTAL DISPERSIVITY (alpha-Th)
C DSPHFB (3) IS TRANSVERSE VERTICAL DISPERSIVITY (alpha-Tv)
C DSPHFB (4) IS DIFFUSION COEFFICIENT 
	  DO 2 II=IRANGE1, IRANGE2
          IHFBCK(II)=1
          DSPHFB(1,II)=HFBALG
          DSPHFB(2,II)=HFBATH
          DSPHFB(3,II)=HFBATV
          DSPHFB(4,II)=HFBDIF
 2      CONTINUE
C----REPORT TO GWT OUTPUT FILE
        WRITE(IOUTS,'(A,I4,A,I4)') ' HFB RANGE:',IRANGE1, ' TO',IRANGE2
        WRITE(IOUTS,'(A,1PE13.4)') '  LONGITUDINAL DISPERSIVITY = ',
     * HFBALG
        WRITE(IOUTS,'(A,1PE13.4)') '  TRANSVERSE HORIZ DISP     = ',
     * HFBATH
        WRITE(IOUTS,'(A,1PE13.4)') '  TRANSVERSE VERT DISP      = ',
     * HFBATV
        WRITE(IOUTS,'(A,1PE13.4)') '  DIFFUSION COEFFICIENT     = ',
     * HFBDIF
C CHECK TO SEE IF AT END OF LIST
        IF(IRANGE2.EQ.NHFB) IDONE=1
      END DO
C----CHECK INPUT
      DO 3 II=1,NHFB
	  IF(IHFBCK(II).EQ.0) WRITE(IOUTS,1000) II
 3    CONTINUE
 1000 FORMAT('***WARNING***  PROPERTIES OF BARRIER ',I4,' NOT',
     * ' DEFINED; ASSUME ALL = 0.0')
C------INITIALIZE HFB LOCATION ARRAY
      DO 5 KS=1,NSLAY
      DO 5 IS=1,NSROW
      DO 5 JS=1,NSCOL
        LOCHFB(JS,IS,KS,1)=0
        LOCHFB(JS,IS,KS,2)=0
 5    CONTINUE
c 6/02/2000 build hfb location array; using much from SHFB1N code
C
C   LOCHFB(JS,IS,KS,1) for forward column direction (1=true)
C   LOCHFB(JS,IS,KS,2) for forward row direction (1=true)
C
C2----CYCLE THROUGH EACH BARRIER.
      DO 100 II = 1,NHFB
        K=HFB(1,II)
c skip if not in subgrid
	  IF(K.LT.ISLAY1.OR.K.GT.ISLAY2) GOTO 100
C
C2C----FIND ROW AND COLUMN NUMBERS OF THE TWO CELLS ON BOTH SIDES
C2C----OF THE BARRIER
c these are fixed in hfb so that i1 j1 is always topmost or leftmost
        I1=HFB(2,II)
        J1=HFB(3,II)
        I2=HFB(4,II)
        J2=HFB(5,II)
c skip if either is no-flow
	  IF(IBOUND(J1,I1,K).eq.0) GOTO 100
	  IF(IBOUND(J2,I2,K).eq.0) GOTO 100
c skip if not in subgrid
	  IF(I1.LT.ISROW1.OR.I1.GT.ISROW2) GOTO 100
	  IF(I2.LT.ISROW1.OR.I2.GT.ISROW2) GOTO 100
	  IF(J1.LT.ISCOL1.OR.J1.GT.ISCOL2) GOTO 100
	  IF(J2.LT.ISCOL1.OR.J2.GT.ISCOL2) GOTO 100
c correct for subgrid, needed for disp terms
        KS=K-ISLAY1+1
        IS=I1-ISROW1+1
        JS=J1-ISCOL1+1
C
C2D----IF I1=I2, BARRIER IS BETWEEN TWO CELLS ON THE SAME ROW.
        IF (I1.EQ.I2) THEN
c this is the column direction (across columns, X, left to right, in one row)
	    LOCHFB(JS,IS,KS,1)=1
        ELSE IF (J1.EQ.J2) THEN
c this is the row direction (across rows, Y, up to down, in one column)
          LOCHFB(JS,IS,KS,2)=1
	  END IF
  100 CONTINUE
C4-----RETURN	
C
  200 CONTINUE
	RETURN
	END
C
C
C  DSP6HFB  MODIFY DISPERSION COEFFICIENTS 
C           ACCORDING TO HFB FACES
C (set disp and diff at HFB faces = to user defined values)
C***********************************************
C
      SUBROUTINE DSP6HFB(IBOUND,     
     *    DISPCC,DISPCR,DISPRR,DISPRC,DISPCL,DISPRL,
     *    POR,THCK,VC,VR,VL,
     *    NCOL,NROW,NLAY,NSCOL,NSROW,NSLAY,
     *    IOUTS,
     *    HFB,NHFB,MXHFB,DSPHFB,
cellam
     *    MOCTYPE,DELCOL,DELROW)
C
C DSPHFB ARRAY HAS USER-DEFINED DISP AND DIFF FOR HFBs
C
C DSPHFB (1) IS LONGITUDINAL DISPERSIVITY (alpha-L)
C DSPHFB (2) IS TRANSVERSE HORIZONTAL DISPERSIVITY (alpha-Th)
C DSPHFB (3) IS TRANSVERSE VERTICAL DISPERSIVITY (alpha-Tv)
C DSPHFB (4) IS DIFFUSION COEFFICIENT 
C
C FOR ELLAM, MODIFIED TO
C  - YIELD CORRECT CELL DIMENSION IN DENOMINATOR
C  - HANDLE NONUNIFORM GRID.
C  THIS VERSION RETAINS GWT APPROXIMATION IGNORING VARIABLE
C  CELL THICKNESS IN DENOMINATOR
C***********************************************
      DIMENSION IBOUND(NCOL,NROW,NLAY),
     *  DISPCC(NSCOL,NSROW,NSLAY),DISPCR(NSCOL,NSROW,NSLAY),
     *  DISPRR(NSCOL,NSROW,NSLAY),DISPRC(NSCOL,NSROW,NSLAY),
     *  DISPCL(NSCOL,NSROW,NSLAY),DISPRL(NSCOL,NSROW,NSLAY),
     *  POR(NSCOL,NSROW,NSLAY),THCK(NSCOL,NSROW,NSLAY),
     *  VC(NSCOL+1,NSROW,NSLAY),VR(NSCOL,NSROW+1,NSLAY),
     *  VL(NSCOL,NSROW,NSLAY+1),
     *  HFB(7,MXHFB),DSPHFB(4,MXHFB)
cellam
      DIMENSION DELCOL(NCOL),DELROW(NROW)
      COMMON /ELLAM/ CINV,RINV,BINV,HCINV,HRINV,HBINV,WATVOL,
     *               STINIT,ADINIT,STMASS,ADMASS,OLMASS,
     *               AZERO,
     *               NSC,NSR,NSL,NT,NCTF,NRTF,NLTF,
     *               NEIGHB(8,2),NSLOPE(3),
     *               IDTOP,IDMAX,NCOEF,NSCH,NSRH,NSLH
      COMMON /SUBGRD/
     *  ISCOL1,ISCOL2,ISROW1,ISROW2,ISLAY1,ISLAY2,ISUBGD
      COMMON /GWT/ CDEL,RDEL,CNOFLO,CELDIS,FZERO,NZCRIT
C
C  BUFF HOLDS AVG CONC; DSP BY FACE, NOT BLOCK
C  INDEXING FOR VELOCITY VX(IXV, ,) IS FLOW FROM IXV-1 TO IXV
C
cellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
       DCINV=1.D0/CDEL
       CC2INV=DCINV*DCINV
       DRINV=1.D0/RDEL
       RR2INV=DRINV*DRINV
       CR2INV=0.25D0*DCINV*DRINV
       ARINV=DCINV*DRINV
      ENDIF
C2----CYCLE THROUGH EACH BARRIER.
C  05/08/2000 used SHFB1N code; altered for MOC3D disp+HFB
      DO 100 II = 1,NHFB
        K=HFB(1,II)
c skip if not in subgrid
	  IF(K.LT.ISLAY1.OR.K.GT.ISLAY2) GOTO 100
C
C2C----FIND ROW AND COLUMN NUMBERS OF THE TWO CELLS ON BOTH SIDES
C2C----OF THE BARRIER
c these are fixed in hfb so that i1 j1 is always topmost or leftmost
        I1=HFB(2,II)
        J1=HFB(3,II)
        I2=HFB(4,II)
        J2=HFB(5,II)
c skip if either is no-flow
	  IF(IBOUND(J1,I1,K).eq.0) GOTO 100
	  IF(IBOUND(J2,I2,K).eq.0) GOTO 100
c skip if not in subgrid
	  IF(I1.LT.ISROW1.OR.I1.GT.ISROW2) GOTO 100
	  IF(I2.LT.ISROW1.OR.I2.GT.ISROW2) GOTO 100
	  IF(J1.LT.ISCOL1.OR.J1.GT.ISCOL2) GOTO 100
	  IF(J2.LT.ISCOL1.OR.J2.GT.ISCOL2) GOTO 100
c correct for subgrid, needed for disp terms
        KS=K-ISLAY1+1
        IS=I1-ISROW1+1
        JS=J1-ISCOL1+1
	  I=I1
	  J=J1
c compute delta Z using thickness
        IF(KS.LT.NSLAY) THEN
           DELINV=2.D0/(THCK(JS,IS,KS)+THCK(JS,IS,KS+1))
         IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
           DL2INV=DELINV*DELINV
           CL2INV=0.25D0*DCINV*DELINV
           RL2INV=0.25D0*DRINV*DELINV
cellam
         ELSEIF(MOCTYPE.EQ.3) THEN
           L4INV=0.25D0*DELINV
         END IF
        END IF
cellam  ELLAM DENOMINATORS VARY BY CELL DIMENSION
        IF(MOCTYPE.EQ.3) THEN
          DIINV=1.D0/DELROW(I)
          R4INV=0.25D0*DIINV
          DJINV=1.D0/DELCOL(J)
          C4INV=0.25D0*DJINV
	    ARINV=DJINV*DIINV
	  END IF
C2D----IF I1=I2, BARRIER IS BETWEEN TWO CELLS ON THE SAME ROW.
        IF (I1.EQ.I2) THEN
c this is the column direction (across columns, X, left to right, in one row)
C2BI---MODIFY DISPCC,DISPCR AND DISPCL TO ACCOUNT FOR BARRIER.
C         SKIP IF AT END OF ROW
          IF (JS.EQ.NSCOL) GOTO 100
cellam
          IF(MOCTYPE.EQ.3) THEN
            DCINV=2.D0/(DELCOL(J)+DELCOL(J+1))
            DJ1INV=1.D0/DELCOL(J+1)
          END IF
C         SKIP IF FORWARD NODE IS NO FLOW
          IF(IBOUND(J+1,I,K).EQ.0) GO TO 100
C         DIFFUSION OF HFB BARRIER
          IF(DSPHFB(4,II).NE.0.0) THEN
           PORB1=POR(JS,IS,KS)*THCK(JS,IS,KS)
           PORB2=POR(JS+1,IS,KS)*THCK(JS+1,IS,KS)
           IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
            DISPCC(JS,IS,KS)=DSPHFB(4,II)*2.D0*PORB1*PORB2/
     *        (PORB1+PORB2)*CC2INV
cellam
           ELSEIF(MOCTYPE.EQ.3) THEN
            DISPCC(JS,IS,KS)=DSPHFB(4,II)*2.D0*PORB1*PORB2/
     *        (PORB1+PORB2)*DCINV
           ENDIF
          ELSE
            DISPCC(JS,IS,KS)=0.0
	    END IF
C         DISPERSIVITY OF BARRIER
C  COMPUTE VELOCITY COMPONENTS AT (J+1/2,I,K)
          IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
            VC2=VC(JS+1,IS,KS)*DRINV
            VC22=VC2*VC2
C  BINLINEAR INTERPOLATION FOR VR AND VL
            VRC2=(VR(JS,IS,KS)+VR(JS+1,IS,KS)+
     *      VR(JS,IS+1,KS)+VR(JS+1,IS+1,KS))*0.25D0*DCINV
            VRC22=VRC2*VRC2
            VLC2=(VL(JS,IS,KS)+VL(JS+1,IS,KS)+
     *      VL(JS,IS,KS+1)+VL(JS+1,IS,KS+1))*0.25D0*THCK(JS,IS,KS)*ARINV
            VLC22=VLC2*VLC2
          ELSEIF(MOCTYPE.EQ.3) THEN
            VC2=VC(JS+1,IS,KS)*DIINV
            VC22=VC2*VC2
C  BINLINEAR INTERPOLATION FOR VR AND VL
            VRC2=(VR(JS,IS,KS)+VR(JS+1,IS+1,KS))*0.25D0*DJINV+
     *     (VR(JS+1,IS,KS)+VR(JS+1,IS+1,KS))*0.25D0*DJ1INV
            VRC22=VRC2*VRC2
            VLC2=((VL(JS,IS,KS)+VL(JS,IS,KS+1))*DJINV+
     *  (VL(JS+1,IS,KS)+VL(JS+1,IS,KS+1))*DJ1INV)*0.25D0*THCK(JS,IS,KS)
     *  *DIINV
            VLC22=VLC2*VLC2
          ENDIF
C  MAGNITUDE OF VELOCITY AT (J+1/2,I,K)
          VMGC22=VC22+VRC22+VLC22
          VMGC2=SQRT(VMGC22)
C  SKIP IF VELOCITY IS MACHINE ZERO
          IF(VMGC2.LT.1.0E-20) GO TO 100
C  ---CC COEFFICIENT---
C  USE DSPHFB TERMS
cellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
          DISPCC(JS,IS,KS)=DISPCC(JS,IS,KS)+
     *       (DSPHFB(1,II)*VC22+DSPHFB(2,II)*VRC22+DSPHFB(3,II)*VLC22)
     *        /VMGC2*CC2INV
      ELSEIF(MOCTYPE.EQ.3) THEN
          DISPCC(JS,IS,KS)=DISPCC(JS,IS,KS)+
     *       (DSPHFB(1,II)*VC22+DSPHFB(2,II)*VRC22+DSPHFB(3,II)*VLC22)
     *        /VMGC2*DCINV
      ENDIF
C
C           ---CR COEFFICIENT---
C
C  SKIP IF FIRST OR LAST ROW IN SUBGRID
          IF(IS.EQ.1.OR.IS.EQ.NSROW) GO TO 10
C  SKIP IF ANY OF CELLS USED FOR D(CONC)/DR ARE INACTIVE
C   SKIP TO ROW IF DISPERSIVITIES ARE EQUAL (NO CROSS TERMS)
          IF(IBOUND(J,I-1,K).EQ.0.OR.IBOUND(J+1,I-1,K).EQ.0.OR.
     *       IBOUND(J,I+1,K).EQ.0.OR.IBOUND(J+1,I+1,K).EQ.0.OR.
     *       DSPHFB(1,II).EQ.DSPHFB(2,II))
     *     GO TO 10
C  USE DSPHFB TERMS
cellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
          DISPCR(JS,IS,KS)=(DSPHFB(1,II)-DSPHFB(2,II))*VC2*VRC2
     *                     /VMGC2*CR2INV
      ELSEIF(MOCTYPE.EQ.3) THEN
          DISPCR(JS,IS,KS)=(DSPHFB(1,II)-DSPHFB(2,II))*VC2*VRC2
     *                     /VMGC2*R4INV
      ENDIF
C
C           ---CL COEFFICIENT---
C
C  SKIP IF FIRST OR LAST LAYER IN SUBGRID
   10     IF(KS.EQ.1.OR.KS.EQ.NSLAY) GO TO 100
C  SKIP IF ANY OF CELLS USED FOR D(CONC)/DL ARE INACTIVE
          IF(IBOUND(J,I,K-1).EQ.0.OR.IBOUND(J+1,I,K-1).EQ.0.OR.
     *      IBOUND(J,I,K+1).EQ.0.OR.IBOUND(J+1,I,K+1).EQ.0.OR.
     *      DSPHFB(1,II).EQ.DSPHFB(3,II))
     *     GO TO 100
C  USE DSPHFB TERMS
cellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
          DISPCL(JS,IS,KS)=(DSPHFB(1,II)-DSPHFB(3,II))*VC2*VLC2
     *                     /VMGC2*CL2INV
      ELSEIF(MOCTYPE.EQ.3) THEN
          DISPCL(JS,IS,KS)=(DSPHFB(1,II)-DSPHFB(3,II))*VC2*VLC2
     *                     /VMGC2*L4INV
      ENDIF
C
	  ELSE IF (J1.EQ.J2) THEN
c this is the row direction (across rows, Y, up to down, in one column)
C2F-----MODIFY DISPRR,DISPRC,AND DISPRL TO ACCOUNT FOR BARRIER.
C         SKIP IF AT END OF COLUMN
          IF (IS.EQ.NSROW) GOTO 100
cellam
          IF(MOCTYPE.EQ.3) THEN
            DRINV=2.D0/(DELROW(I)+DELROW(I+1))
            DI1INV=1.D0/DELROW(I+1)
          END IF
C         SKIP IF FORWARD NODE IS NO FLOW
          IF(IBOUND(J,I+1,K).EQ.0) GO TO 100
C         DIFFUSION OF HFB BARRIER
          IF(DSPHFB(4,II).NE.0.0) THEN
            PORB1=POR(JS,IS,KS)*THCK(JS,IS,KS)
            PORB2=POR(JS,IS+1,KS)*THCK(JS,IS+1,KS)
            IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
              DISPRR(JS,IS,KS)=DSPHFB(4,II)*2.D0*PORB1*PORB2/
     *       (PORB1+PORB2)*RR2INV
            ELSEIF(MOCTYPE.EQ.3) THEN
              DISPRR(JS,IS,KS)=DSPHFB(4,II)*2.D0*PORB1*PORB2/
     *       (PORB1+PORB2)*DRINV
	      END IF
          ELSE
            DISPRR(JS,IS,KS)=0.0
	    END IF
C         DISPERSIVITY OF BARRIER
          IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN
            VR2=VR(JS,IS+1,KS)*DCINV
            VR22=VR2*VR2
            VCR2=(VC(JS,IS,KS)+VC(JS,IS+1,KS)+
     *      VC(JS+1,IS,KS)+VC(JS+1,IS+1,KS))*0.25*DRINV
            VCR22=VCR2*VCR2
            VLR2=(VL(JS,IS,KS)+VL(JS,IS+1,KS)+
     *      VL(JS,IS,KS+1)+VL(JS,IS+1,KS+1))*0.25*THCK(JS,IS,KS)*ARINV
            VLR22=VLR2*VLR2
          ELSEIF(MOCTYPE.EQ.3) THEN
            VR2=VR(JS,IS+1,KS)*DJINV
            VR22=VR2*VR2
            VCR2=(VC(JS,IS,KS)+VC(JS+1,IS,KS))*0.25D0*DIINV+
     *      (VC(JS,IS+1,KS)+VC(JS+1,IS+1,KS))*0.25D0*DI1INV
            VCR22=VCR2*VCR2
            DOVC=THCK(JS,IS,KS)*DJINV
            VLR2=(VL(JS,IS,KS)+VL(JS,IS,KS+1))*0.25D0*DOVC*DIINV+
     *      (VL(JS,IS+1,KS)+VL(JS,IS+1,KS+1))*0.25D0*DOVC*DI1INV
            VLR22=VLR2*VLR2
          END IF
          VMGR22=VCR22+VR22+VLR22
          VMGR2=SQRT(VMGR22)
          IF(VMGR2.LT.1.0E-20) GO TO 100
C  USE DSPHFB TERMS
cellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN      
          DISPRR(JS,IS,KS)=DISPRR(JS,IS,KS)+
     *         (DSPHFB(1,II)*VR22+DSPHFB(2,II)*VCR22+DSPHFB(3,II)*VLR22)
     *         /VMGR2*RR2INV
      ELSEIF(MOCTYPE.EQ.3) THEN
          DISPRR(JS,IS,KS)=DISPRR(JS,IS,KS)+
     *         (DSPHFB(1,II)*VR22+DSPHFB(2,II)*VCR22+DSPHFB(3,II)*VLR22)
     *         /VMGR2*DRINV
      ENDIF
cellam
          IF(JS.EQ.1.OR.JS.EQ.NSCOL) GO TO 30
C           ---RC COEFFICIENT---
          IF(IBOUND(J-1,I,K).EQ.0.OR.IBOUND(J-1,I+1,K).EQ.0.OR.
     *       IBOUND(J+1,I,K).EQ.0.OR.IBOUND(J+1,I+1,K).EQ.0.OR.
     *       DSPHFB(1,II).EQ.DSPHFB(2,II))
     *     GO TO 30
C  USE DSPHFB TERMS
cellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN      
          DISPRC(JS,IS,KS)=(DSPHFB(1,II)-DSPHFB(2,II))*VCR2*VR2
     *                     /VMGR2*CR2INV
      ELSEIF(MOCTYPE.EQ.3) THEN
          DISPRC(JS,IS,KS)=(DSPHFB(1,II)-DSPHFB(2,II))*VCR2*VR2
     *                     /VMGR2*C4INV
      ENDIF
cellam
C           ---RL COEFFICIENT---
   30     IF(KS.EQ.1.OR.KS.EQ.NSLAY) GO TO 100
          IF(IBOUND(J,I,K-1).EQ.0.OR.IBOUND(J,I+1,K-1).EQ.0.OR.
     *       IBOUND(J,I,K+1).EQ.0.OR.IBOUND(J,I+1,K+1).EQ.0.OR.
     *       DSPHFB(1,II).EQ.DSPHFB(3,II))
     *     GO TO 100
C  USE DSPHFB TERMS
cellam
      IF(MOCTYPE.EQ.1.OR.MOCTYPE.EQ.2) THEN      
          DISPRL(JS,IS,KS)=(DSPHFB(1,II)-DSPHFB(3,II))*VR2*VLR2
     *                     /VMGR2*RL2INV
      ELSEIF(MOCTYPE.EQ.3) THEN
          DISPRL(JS,IS,KS)=(DSPHFB(1,II)-DSPHFB(3,II))*VR2*VLR2
     *                     /VMGR2*L4INV
      ENDIF
cellam
	  END IF
  100 CONTINUE
C
C4-----RETURN
      RETURN
      END

